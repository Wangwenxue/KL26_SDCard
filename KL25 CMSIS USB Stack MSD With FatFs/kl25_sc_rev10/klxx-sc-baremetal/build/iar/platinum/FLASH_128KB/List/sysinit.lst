###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        30/Nov/2015  21:44:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\cpu\sysinit.c
#    Command line =  
#        "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\cpu\sysinit.c" -D IAR -D
#        FREEDOM -lCN "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD
#        With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -lB "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -o "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\"
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\projects\platinum\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\common\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\platforms\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\" -Oh
#    List file    =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\sysinit.lst
#    Object file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\sysinit.o
#
###############################################################################

D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\cpu\sysinit.c
      1          /*
      2           * File:        sysinit.c
      3           * Purpose:     Kinetis L Family Configuration
      4           *              Initializes processor to a default state
      5           *
      6           * Notes:
      7           *
      8           *
      9           */
     10          
     11          #include "common.h"
     12          #include "sysinit.h"
     13          #include "UART.h"
     14          
     15          /********************************************************************/
     16          
     17          /* System clock frequency variables - Represents the current system clock
     18           * settings
     19           */

   \                                 In section .bss, align 4
     20          int mcg_clk_hz;
   \                     mcg_clk_hz:
   \   00000000                      DS8 4
     21          int mcg_clk_khz;
   \                     mcg_clk_khz:
   \   00000004                      DS8 4
     22          int core_clk_khz;
   \                     core_clk_khz:
   \   00000008                      DS8 4
     23          int periph_clk_khz;
   \                     periph_clk_khz:
   \   0000000C                      DS8 4
     24          int pll_clk_khz;
     25          int uart0_clk_khz;
   \                     uart0_clk_khz:
   \   00000010                      DS8 4

   \                                 In section .bss, align 4
   \                     pll_clk_khz:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          uint32 uart0_clk_hz;
   \                     uart0_clk_hz:
   \   00000000                      DS8 4
     27          extern uint32_t SystemCoreClock;
     28          
     29          
     30          
     31          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     32          void sysinit (void)
     33          {
   \                     sysinit: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
     34                  /* Enable all of the port clocks. These have to be enabled to configure
     35                   * pin muxing options, so most code will need all of these on anyway.
     36                   */
     37                  SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
     38                                | SIM_SCGC5_PORTB_MASK
     39                                | SIM_SCGC5_PORTC_MASK
     40                                | SIM_SCGC5_PORTD_MASK
     41                                | SIM_SCGC5_PORTE_MASK );
   \   00000004   0x....             LDR      R4,??DataTable2  ;; 0x40048004
   \   00000006   0x6B60             LDR      R0,[R4, #+52]
   \   00000008   0x21F8             MOVS     R1,#+248
   \   0000000A   0x0189             LSLS     R1,R1,#+6        ;; #+15872
   \   0000000C   0x4301             ORRS     R1,R1,R0
   \   0000000E   0x6361             STR      R1,[R4, #+52]
     42                  
     43                  // Release hold with ACKISO:  Only has an effect if recovering from VLLS1, VLLS2, or VLLS3
     44                  // if ACKISO is set you must clear ackiso before calling pll_init 
     45                  //    or pll init hangs waiting for OSC to initialize
     46                  // if osc enabled in low power modes - enable it first before ack
     47                  // if I/O needs to be maintained without glitches enable outputs and modules first before ack.
     48                  if (PMC_REGSC &  PMC_REGSC_ACKISO_MASK)
   \   00000010   0x2008             MOVS     R0,#+8
   \   00000012   0x....             LDR      R1,??DataTable2_1  ;; 0x4007d002
   \   00000014   0x780A             LDRB     R2,[R1, #+0]
   \   00000016   0x4202             TST      R2,R0
   \   00000018   0xD002             BEQ      ??sysinit_0
     49                  PMC_REGSC |= PMC_REGSC_ACKISO_MASK;
   \   0000001A   0x780A             LDRB     R2,[R1, #+0]
   \   0000001C   0x4310             ORRS     R0,R0,R2
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     50          
     51          #if defined(NO_PLL_INIT)
     52                  // If PLL initialization is not desired, set FLL to 48 MHz clock in default FEI mode
     53                  MCG_C4 |= (MCG_C4_DRST_DRS(1) | MCG_C4_DMX32_MASK);
     54                  mcg_clk_hz = 21000000; //FEI mode
     55                  
     56                  SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK; // clear PLLFLLSEL to select the FLL for this clock source
     57                  
     58                  uart0_clk_khz = (mcg_clk_hz / 1000); // the uart0 clock frequency will equal the FLL frequency
     59                 
     60          #else 
     61                 /* Ramp up the system clock */
     62                 /* Set the system dividers */
     63                 /* NOTE: The PLL init will not configure the system clock dividers,
     64                  * so they must be configured appropriately before calling the PLL
     65                  * init function to ensure that clocks remain in valid ranges.
     66                  */  
     67          //        SIM_CLKDIV1 = ( 0
     68          //                        | SIM_CLKDIV1_OUTDIV1(0)
     69          //                        | SIM_CLKDIV1_OUTDIV4(1) );
     70                   SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(1) | SIM_CLKDIV1_OUTDIV4(1);
   \                     ??sysinit_0: (+1)
   \   00000020   0x....             LDR      R0,??DataTable2_2  ;; 0x10010000
   \   00000022   0x6420             STR      R0,[R4, #+64]
     71                 
     72          #ifndef CMSIS
     73                 /* Initialize PLL */
     74                 /* PLL will be the source for MCG CLKOUT so the core, system, and flash clocks are derived from it */ 
     75                 mcg_clk_hz = pll_init(CLK0_FREQ_HZ,  /* CLKIN0 frequency */
     76                                       LOW_POWER,     /* Set the oscillator for low power mode */
     77                                       CLK0_TYPE,     /* Crystal or canned oscillator clock input */
     78                                       PLL0_PRDIV,    /* PLL predivider value */
     79                                       PLL0_VDIV,     /* PLL multiplier */
     80                                       MCGOUT);       /* Use the output from this PLL as the MCGOUT */
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x2030             MOVS     R0,#+48
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   \   0000002C   0x2304             MOVS     R3,#+4
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x....             LDR      R0,??DataTable2_3  ;; 0x7a1200
   \   00000034   0x.... 0x....      BL       pll_init
   \   00000038   0x....             LDR      R5,??DataTable2_4
   \   0000003A   0x6028             STR      R0,[R5, #+0]
     81          #else
     82          mcg_clk_hz = SystemCoreClock;
     83          #endif
     84                 /* Check the value returned from pll_init() to make sure there wasn't an error */
     85                 if (mcg_clk_hz < 0x100)
   \   0000003C   0x28FF             CMP      R0,#+255
   \   0000003E   0xDC00             BGT      ??sysinit_1
     86                   while(1);
   \                     ??sysinit_2: (+1)
   \   00000040   0xE7FE             B        ??sysinit_2
     87                 
     88                 SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; // set PLLFLLSEL to select the PLL for this clock source
   \                     ??sysinit_1: (+1)
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x2180             MOVS     R1,#+128
   \   00000046   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   00000048   0x4301             ORRS     R1,R1,R0
   \   0000004A   0x6021             STR      R1,[R4, #+0]
     89                 
     90                 uart0_clk_khz = ((mcg_clk_hz / 2) / 1000); // UART0 clock frequency will equal half the PLL frequency
   \   0000004C   0x682E             LDR      R6,[R5, #+0]
   \   0000004E   0x27FA             MOVS     R7,#+250
   \   00000050   0x00BF             LSLS     R7,R7,#+2        ;; #+1000
   \   00000052   0x0FF0             LSRS     R0,R6,#+31
   \   00000054   0x1980             ADDS     R0,R0,R6
   \   00000056   0x1040             ASRS     R0,R0,#+1
   \   00000058   0x0039             MOVS     R1,R7
   \   0000005A   0x.... 0x....      BL       __aeabi_idiv
   \   0000005E   0x6128             STR      R0,[R5, #+16]
     91          #endif      
     92          
     93          	/*
     94                   * Use the value obtained from the pll_init function to define variables
     95          	 * for the core clock in kHz and also the peripheral clock. These
     96          	 * variables can be used by other functions that need awareness of the
     97          	 * system frequency.
     98          	 */
     99                  mcg_clk_khz = mcg_clk_hz / 1000;
   \   00000060   0x0030             MOVS     R0,R6
   \   00000062   0x0039             MOVS     R1,R7
   \   00000064   0x.... 0x....      BL       __aeabi_idiv
   \   00000068   0x6068             STR      R0,[R5, #+4]
    100            	core_clk_khz = mcg_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV1_MASK) >> 28)+ 1);
   \   0000006A   0x6C21             LDR      R1,[R4, #+64]
   \   0000006C   0x0F09             LSRS     R1,R1,#+28
   \   0000006E   0x1C49             ADDS     R1,R1,#+1
   \   00000070   0x.... 0x....      BL       __aeabi_uidiv
   \   00000074   0x60A8             STR      R0,[R5, #+8]
    101                  periph_clk_khz = core_clk_khz / (((SIM_CLKDIV1 & SIM_CLKDIV1_OUTDIV4_MASK) >> 16)+ 1);
   \   00000076   0x6C21             LDR      R1,[R4, #+64]
   \   00000078   0x0349             LSLS     R1,R1,#+13
   \   0000007A   0x0F49             LSRS     R1,R1,#+29
   \   0000007C   0x1C49             ADDS     R1,R1,#+1
   \   0000007E   0x.... 0x....      BL       __aeabi_uidiv
   \   00000082   0x60E8             STR      R0,[R5, #+12]
    102                  
    103                  /* Enable pin interrupt for the abort button - PTA4 */
    104                  /* This pin could also be used as the NMI interrupt, but since the NMI
    105                   * is level sensitive each button press will cause multiple interrupts.
    106                   * Using the GPIO interrupt instead means we can configure for an edge
    107                   * sensitive interrupt instead = one interrupt per button press.
    108                   */       
    109                  
    110                  if (TERM_PORT_NUM == 0)
    111                  {
    112            	  /* Enable the pins for the selected UART */
    113          #ifdef FREEDOM
    114                    /* Enable the UART_TXD function on PTA1 */
    115                    PORTA_PCR1 = PORT_PCR_MUX(0x2);
   \   00000084   0x....             LDR      R0,??DataTable2_5  ;; 0x40049004
   \   00000086   0x0D41             LSRS     R1,R0,#+21
   \   00000088   0x6001             STR      R1,[R0, #+0]
    116                    
    117                    /* Enable the UART_TXD function on PTA2 */
    118                    PORTA_PCR2 = PORT_PCR_MUX(0x2);
   \   0000008A   0x6041             STR      R1,[R0, #+4]
    119                    
    120          #else
    121                    /* Enable the UART_TXD function on PTA14 */
    122            	  PORTA_PCR14 = PORT_PCR_MUX(0x3); // UART0 is alt3 function for this pin
    123            		
    124            	  /* Enable the UART_RXD function on PTA15 */
    125            	  PORTA_PCR15 = PORT_PCR_MUX(0x3); // UART0 is alt3 function for this pin
    126          #endif
    127                   
    128                    SIM_SOPT2 |= SIM_SOPT2_UART0SRC(1); // select the PLLFLLCLK as UART0 clock source
   \   0000008C   0x6820             LDR      R0,[R4, #+0]
   \   0000008E   0x0449             LSLS     R1,R1,#+17
   \   00000090   0x4301             ORRS     R1,R1,R0
   \   00000092   0x6021             STR      R1,[R4, #+0]
    129                  }
    130            	if (TERM_PORT_NUM == 1)
    131            	{
    132                          /* Enable the UART_TXD function on PTC4 */
    133            		PORTC_PCR4 = PORT_PCR_MUX(0x3); // UART1 is alt3 function for this pin
    134            		
    135            		/* Enable the UART_RXD function on PTC3 */
    136            		PORTC_PCR3 = PORT_PCR_MUX(0x3); // UART1 is alt3 function for this pin
    137            	}
    138                  
    139                  if (TERM_PORT_NUM == 2)
    140            	{
    141                           /* Enable the UART_TXD function on PTD3 */
    142            		PORTD_PCR3 = PORT_PCR_MUX(0x3); // UART2 is alt3 function for this pin
    143            		
    144            		/* Enable the UART_RXD function on PTD2 */
    145            		PORTD_PCR2 = PORT_PCR_MUX(0x3); // UART2 is alt3 function for this pin
    146            	}
    147                  
    148            	/* UART0 is clocked asynchronously to the core clock, but all other UARTs are
    149                   * clocked from the peripheral clock. So we have to determine which clock
    150                   * to send to the UART_init function.
    151                   */
    152                  if (TERM_PORT_NUM == 0)
    153                      uart0_init (UART0_BASE_PTR, uart0_clk_khz, TERMINAL_BAUD);
   \   00000094   0x22E1             MOVS     R2,#+225
   \   00000096   0x0252             LSLS     R2,R2,#+9        ;; #+115200
   \   00000098   0x6929             LDR      R1,[R5, #+16]
   \   0000009A   0x....             LDR      R0,??DataTable2_6  ;; 0x4006a000
   \   0000009C   0x.... 0x....      BL       uart0_init
    154                  else if (TERM_PORT_NUM == 1)
    155            	    uart_init (UART1_BASE_PTR, periph_clk_khz, TERMINAL_BAUD);
    156                  else if (TERM_PORT_NUM == 2)
    157                      uart_init (UART2_BASE_PTR, periph_clk_khz, TERMINAL_BAUD);
    158                  else
    159                    while(1);
    160          }
   \   000000A0   0xB003             ADD      SP,SP,#+12
   \   000000A2   0xBDF0             POP      {R4-R7,PC}       ;; return
    161          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    162          void enable_abort_button(void)
    163          {
   \                     enable_abort_button: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    164              /* Configure the PTA4 pin for its GPIO function */
    165              PORTA_PCR4 = PORT_PCR_MUX(0x1); // GPIO is alt1 function for this pin
   \   00000002   0x....             LDR      R0,??DataTable2_7  ;; 0x40049010
   \   00000004   0x0D81             LSRS     R1,R0,#+22
   \   00000006   0x6001             STR      R1,[R0, #+0]
    166              
    167              /* Configure the PTA4 pin for rising edge interrupts */
    168              PORTA_PCR4 |= PORT_PCR_IRQC(0x9); 
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x2290             MOVS     R2,#+144
   \   0000000C   0x0312             LSLS     R2,R2,#+12       ;; #+589824
   \   0000000E   0x430A             ORRS     R2,R2,R1
   \   00000010   0x6002             STR      R2,[R0, #+0]
    169              
    170              /* Enable the associated IRQ in the NVIC */
    171          #ifndef CMSIS
    172              enable_irq(30);      
   \   00000012   0x201E             MOVS     R0,#+30
   \   00000014   0x.... 0x....      BL       enable_irq
    173          #else
    174              NVIC_EnableIRQ(PORTA_IRQn);
    175          #endif
    176          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    177          /********************************************************************/
    178          
    179          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    180          void clk_out_init(void)
    181          {
    182          
    183              // If you are using UART1 for serial communications do not
    184              // initialize the clock out function or you may break the UART!
    185              if (TERM_PORT_NUM != 1)
    186              {
    187                  /* Enable the CLKOUT function on PTC3 (alt5 function) */
    188          	PORTC_PCR3 = ( PORT_PCR_MUX(0x5));
   \                     clk_out_init: (+1)
   \   00000000   0x20A0             MOVS     R0,#+160
   \   00000002   0x00C0             LSLS     R0,R0,#+3        ;; #+1280
   \   00000004   0x....             LDR      R1,??DataTable2_8  ;; 0x4004b00c
   \   00000006   0x6008             STR      R0,[R1, #+0]
    189                  
    190                  /* Select the CLKOUT in the SMI_SOPT2 mux to be bus clk*/
    191                  SIM_SOPT2 |= SIM_SOPT2_CLKOUTSEL(2);
   \   00000008   0x....             LDR      R0,??DataTable2  ;; 0x40048004
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0x2240             MOVS     R2,#+64
   \   0000000E   0x430A             ORRS     R2,R2,R1
   \   00000010   0x6002             STR      R2,[R0, #+0]
    192              }
    193                  
    194          }
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4007D002         DC32     0x4007d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x10010000         DC32     0x10010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x007A1200         DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     mcg_clk_hz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40049004         DC32     0x40049004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40049010         DC32     0x40049010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   clk_out_init
       8   enable_abort_button
         8   -> enable_irq
      32   sysinit
        32   -> pll_init
        32   -> uart0_init
        32 __aeabi_idiv
        32 __aeabi_uidiv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
      20  clk_out_init
      26  enable_abort_button
      20  mcg_clk_hz
          mcg_clk_khz
          core_clk_khz
          periph_clk_khz
          uart0_clk_khz
       4  pll_clk_khz
     164  sysinit
       4  uart0_clk_hz

 
  28 bytes in section .bss
 246 bytes in section .text
 
 246 bytes of CODE memory
  28 bytes of DATA memory

Errors: none
Warnings: none
