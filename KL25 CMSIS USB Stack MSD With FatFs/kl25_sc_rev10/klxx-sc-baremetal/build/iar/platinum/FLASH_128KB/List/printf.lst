###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        30/Nov/2015  21:44:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\common\printf.c
#    Command line =  
#        "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\common\printf.c" -D IAR -D
#        FREEDOM -lCN "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD
#        With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -lB "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -o "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\"
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\projects\platinum\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\common\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\platforms\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\" -Oh
#    List file    =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\printf.lst
#    Object file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\printf.o
#
###############################################################################

D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\common\printf.c
      1          /*
      2           * File:        printk.c
      3           * Purpose:     The standard C library routine printf()
      4           */
      5          
      6          #include "common.h"
      7          #include "stdio.h"
      8          #include <stdarg.h>
      9          
     10          /********************************************************************/
     11          
     12          typedef struct
     13          {
     14              int dest;
     15              void (*func)(char);
     16              char *loc;
     17          } PRINTK_INFO;
     18          
     19          int 
     20          printk (PRINTK_INFO *, const char *, va_list);
     21          
     22          /********************************************************************/
     23          
     24          #define DEST_CONSOLE    (1)
     25          #define DEST_STRING     (2)
     26          
     27          #define FLAGS_MINUS     (0x01)
     28          #define FLAGS_PLUS      (0x02)
     29          #define FLAGS_SPACE     (0x04)
     30          #define FLAGS_ZERO      (0x08)
     31          #define FLAGS_POUND     (0x10)
     32          
     33          #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
     34          #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
     35          #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
     36          #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
     37          #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
     38          
     39          #define LENMOD_h        (0x01)
     40          #define LENMOD_l        (0x02)
     41          #define LENMOD_L        (0x04)
     42          
     43          #define IS_LENMOD_h(a)  (a & LENMOD_h)
     44          #define IS_LENMOD_l(a)  (a & LENMOD_l)
     45          #define IS_LENMOD_L(a)  (a & LENMOD_L)
     46          
     47          #define FMT_d   (0x0001)
     48          #define FMT_o   (0x0002)
     49          #define FMT_x   (0x0004)
     50          #define FMT_X   (0x0008)
     51          #define FMT_u   (0x0010)
     52          #define FMT_c   (0x0020)
     53          #define FMT_s   (0x0040)
     54          #define FMT_p   (0x0080)
     55          #define FMT_n   (0x0100)
     56          
     57          #define IS_FMT_d(a)     (a & FMT_d)
     58          #define IS_FMT_o(a)     (a & FMT_o)
     59          #define IS_FMT_x(a)     (a & FMT_x)
     60          #define IS_FMT_X(a)     (a & FMT_X)
     61          #define IS_FMT_u(a)     (a & FMT_u)
     62          #define IS_FMT_c(a)     (a & FMT_c)
     63          #define IS_FMT_s(a)     (a & FMT_s)
     64          #define IS_FMT_p(a)     (a & FMT_p)
     65          #define IS_FMT_n(a)     (a & FMT_n)
     66          
     67          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          static void
     69          printk_putc (int c, int *count, PRINTK_INFO *info)
     70          {
   \                     printk_putc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x000C             MOVS     R4,R1
     71              switch (info->dest)
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0x2901             CMP      R1,#+1
   \   00000008   0xD002             BEQ      ??printk_putc_0
   \   0000000A   0x2902             CMP      R1,#+2
   \   0000000C   0xD004             BEQ      ??printk_putc_1
   \   0000000E   0xE008             B        ??printk_putc_2
     72              {
     73                  case DEST_CONSOLE:
     74                      info->func((char)c);
   \                     ??printk_putc_0: (+1)
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x6851             LDR      R1,[R2, #+4]
   \   00000014   0x4788             BLX      R1
     75                      break;
   \   00000016   0xE004             B        ??printk_putc_2
     76                  case DEST_STRING:
     77                      *(info->loc) = (unsigned char)c;
   \                     ??printk_putc_1: (+1)
   \   00000018   0x6891             LDR      R1,[R2, #+8]
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
     78                      ++(info->loc);
   \   0000001C   0x6890             LDR      R0,[R2, #+8]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x6090             STR      R0,[R2, #+8]
     79                      break;
     80                  default:
     81                      break;
     82              }
     83              *count += 1;
   \                     ??printk_putc_2: (+1)
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x6020             STR      R0,[R4, #+0]
     84          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
     85          
     86          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          static int
     88          printk_mknumstr (char *numstr, void *nump, int neg, int radix)
     89          {
   \                     printk_mknumstr: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x001D             MOVS     R5,R3
     90              int a,b,c;
     91              unsigned int ua,ub,uc;
     92          
     93              int nlen;
     94              char *nstrp;
     95          
     96              nlen = 0;
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x2400             MOVS     R4,#+0
     97              nstrp = numstr;
     98              *nstrp++ = '\0';
   \   00000008   0x7003             STRB     R3,[R0, #+0]
   \   0000000A   0x1C46             ADDS     R6,R0,#+1
     99          
    100              if (neg)
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0x680F             LDR      R7,[R1, #+0]
   \   00000010   0xD014             BEQ      ??printk_mknumstr_0
    101              {
    102                  a = *(int *)nump;
    103                  if (a == 0)
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD014             BEQ      ??printk_mknumstr_1
    104                  {
    105                      *nstrp = '0';
    106                      ++nlen;
    107                      goto done;
    108                  }
    109                  while (a != 0)
    110                  {
    111                      b = (int)a / (int)radix;
   \                     ??printk_mknumstr_2: (+1)
   \   00000016   0x0038             MOVS     R0,R7
   \   00000018   0x0029             MOVS     R1,R5
   \   0000001A   0x.... 0x....      BL       __aeabi_idiv
   \   0000001E   0x0001             MOVS     R1,R0
    112                      c = (int)a - ((int)b * (int)radix);
   \   00000020   0x4368             MULS     R0,R5,R0
   \   00000022   0x1A3A             SUBS     R2,R7,R0
    113                      if (c < 0)
   \   00000024   0xD502             BPL      ??printk_mknumstr_3
    114                      {
    115                          c = ~c + 1 + '0';
   \   00000026   0x43D2             MVNS     R2,R2
   \   00000028   0x3231             ADDS     R2,R2,#+49
   \   0000002A   0xE000             B        ??printk_mknumstr_4
    116                      }
    117                      else
    118                      {
    119                          c = c + '0';
   \                     ??printk_mknumstr_3: (+1)
   \   0000002C   0x3230             ADDS     R2,R2,#+48
    120                      }
    121                      a = b;
   \                     ??printk_mknumstr_4: (+1)
   \   0000002E   0x000F             MOVS     R7,R1
    122                      *nstrp++ = (char)c;
   \   00000030   0x7032             STRB     R2,[R6, #+0]
   \   00000032   0x1C76             ADDS     R6,R6,#+1
    123                      ++nlen;
   \   00000034   0x1C64             ADDS     R4,R4,#+1
    124                  }
   \   00000036   0x2F00             CMP      R7,#+0
   \   00000038   0xD018             BEQ      ??printk_mknumstr_5
   \   0000003A   0xE7EC             B        ??printk_mknumstr_2
    125              }
    126              else
    127              {
    128                  ua = *(unsigned int *)nump;
    129                  if (ua == 0)
   \                     ??printk_mknumstr_0: (+1)
   \   0000003C   0x2F00             CMP      R7,#+0
   \   0000003E   0xD103             BNE      ??printk_mknumstr_6
    130                  {
    131                      *nstrp = '0';
   \                     ??printk_mknumstr_1: (+1)
   \   00000040   0x2030             MOVS     R0,#+48
   \   00000042   0x7030             STRB     R0,[R6, #+0]
    132                      ++nlen;
   \   00000044   0x2401             MOVS     R4,#+1
    133                      goto done;
   \   00000046   0xE011             B        ??printk_mknumstr_5
    134                  }
    135                  while (ua != 0)
    136                  {
    137                      ub = (unsigned int)ua / (unsigned int)radix;
   \                     ??printk_mknumstr_6: (+1)
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x0029             MOVS     R1,R5
   \   0000004C   0x.... 0x....      BL       __aeabi_uidiv
    138                      uc = (unsigned int)ua - ((unsigned int)ub * (unsigned int)radix);
   \   00000050   0x0001             MOVS     R1,R0
   \   00000052   0x4369             MULS     R1,R5,R1
   \   00000054   0x1A79             SUBS     R1,R7,R1
    139                      if (uc < 10)
   \   00000056   0x290A             CMP      R1,#+10
   \   00000058   0xD201             BCS      ??printk_mknumstr_7
    140                      {
    141                          uc = uc + '0';
   \   0000005A   0x3130             ADDS     R1,R1,#+48
   \   0000005C   0xE000             B        ??printk_mknumstr_8
    142                      }
    143                      else
    144                      {
    145                          uc = uc - 10 + 'A';
   \                     ??printk_mknumstr_7: (+1)
   \   0000005E   0x3137             ADDS     R1,R1,#+55
    146                      }
    147                      ua = ub;
   \                     ??printk_mknumstr_8: (+1)
   \   00000060   0x0007             MOVS     R7,R0
    148                      *nstrp++ = (char)uc;
   \   00000062   0x7031             STRB     R1,[R6, #+0]
   \   00000064   0x1C76             ADDS     R6,R6,#+1
    149                      ++nlen;
   \   00000066   0x1C64             ADDS     R4,R4,#+1
    150                  }
   \   00000068   0x2F00             CMP      R7,#+0
   \   0000006A   0xD1ED             BNE      ??printk_mknumstr_6
    151              }
    152              done:
    153              return nlen;
   \                     ??printk_mknumstr_5: (+1)
   \   0000006C   0x0020             MOVS     R0,R4
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
    154          }
    155          
    156          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    157          static void
    158          printk_pad_zero (int curlen, int field_width, int *count, PRINTK_INFO *info)
    159          {
   \                     printk_pad_zero: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0017             MOVS     R7,R2
   \   00000004   0x001C             MOVS     R4,R3
    160              int i;
    161          
    162              for (i = curlen; i < field_width; i++)
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xDA14             BGE      ??printk_pad_zero_0
   \   0000000A   0x1A0D             SUBS     R5,R1,R0
   \   0000000C   0x2630             MOVS     R6,#+48
    163              {
    164                  printk_putc('0',count, info);
   \                     ??printk_pad_zero_1: (+1)
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD007             BEQ      ??printk_pad_zero_2
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD108             BNE      ??printk_pad_zero_3
   \   00000018   0x68A0             LDR      R0,[R4, #+8]
   \   0000001A   0x7006             STRB     R6,[R0, #+0]
   \   0000001C   0x68A0             LDR      R0,[R4, #+8]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x60A0             STR      R0,[R4, #+8]
   \   00000022   0xE002             B        ??printk_pad_zero_3
   \                     ??printk_pad_zero_2: (+1)
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x6861             LDR      R1,[R4, #+4]
   \   00000028   0x4788             BLX      R1
   \                     ??printk_pad_zero_3: (+1)
   \   0000002A   0x6838             LDR      R0,[R7, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    165              }
   \   00000030   0x1E6D             SUBS     R5,R5,#+1
   \   00000032   0xD1EC             BNE      ??printk_pad_zero_1
    166          }
   \                     ??printk_pad_zero_0: (+1)
   \   00000034   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    167          
    168          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    169          static void
    170          printk_pad_space (int curlen, int field_width, int *count, PRINTK_INFO *info)
    171          {
   \                     printk_pad_space: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0017             MOVS     R7,R2
   \   00000004   0x001C             MOVS     R4,R3
    172              int i;
    173          
    174              for (i = curlen; i < field_width; i++)
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xDA14             BGE      ??printk_pad_space_0
   \   0000000A   0x1A0D             SUBS     R5,R1,R0
   \   0000000C   0x2620             MOVS     R6,#+32
    175              {
    176                  printk_putc(' ',count, info);
   \                     ??printk_pad_space_1: (+1)
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD007             BEQ      ??printk_pad_space_2
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD108             BNE      ??printk_pad_space_3
   \   00000018   0x68A0             LDR      R0,[R4, #+8]
   \   0000001A   0x7006             STRB     R6,[R0, #+0]
   \   0000001C   0x68A0             LDR      R0,[R4, #+8]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x60A0             STR      R0,[R4, #+8]
   \   00000022   0xE002             B        ??printk_pad_space_3
   \                     ??printk_pad_space_2: (+1)
   \   00000024   0x2020             MOVS     R0,#+32
   \   00000026   0x6861             LDR      R1,[R4, #+4]
   \   00000028   0x4788             BLX      R1
   \                     ??printk_pad_space_3: (+1)
   \   0000002A   0x6838             LDR      R0,[R7, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    177              }
   \   00000030   0x1E6D             SUBS     R5,R5,#+1
   \   00000032   0xD1EC             BNE      ??printk_pad_space_1
    178          }
   \                     ??printk_pad_space_0: (+1)
   \   00000034   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    179          
    180          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          int
    182          printk (PRINTK_INFO *info, const char *fmt, va_list ap)
    183          {
   \                     printk: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x0015             MOVS     R5,R2
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    184              /* va_list ap; */
    185              char *p;
    186              int c;
    187          
    188              char vstr[33];
    189              char *vstrp;
    190              int vlen;
    191          
    192              int done;
    193              int count = 0;
    194          
    195              int flags_used;
    196              int field_width;
    197          #if 0
    198              int precision_used;
    199              int precision_width;
    200              int length_modifier;
    201          #endif
    202          
    203              int ival;
    204              int schar, dschar;
    205              int *ivalp;
    206              char *sval;
    207              int cval;
    208              unsigned int uval;
    209          
    210              /*
    211               * Start parsing apart the format string and display appropriate
    212               * formats and data.
    213               */
    214              for (p = (char *)fmt; (c = *p) != 0; p++)
   \   0000000C   0x9104             STR      R1,[SP, #+16]
   \   0000000E   0xE006             B        ??printk_0
    215              {
    216                  /*
    217                   * All formats begin with a '%' marker.  Special chars like
    218                   * '\n' or '\t' are normally converted to the appropriate
    219                   * character by the __compiler__.  Thus, no need for this
    220                   * routine to account for the '\' character.
    221                   */
    222                  if (c != '%')
    223                  {
    224                      /*
    225                       * This needs to be replaced with something like
    226                       * 'out_char()' or call an OS routine.
    227                       */
    228          #ifndef UNIX_DEBUG
    229                      if (c != '\n')
    230                      {
    231                          printk_putc(c, &count, info);
    232                      }
    233                      else
    234                      {
    235                          printk_putc(0x0D /* CR */, &count, info);
    236                          printk_putc(0x0A /* LF */, &count, info);
    237                      }
    238          #else
    239                      printk_putc(c, &count, info);
    240          #endif
    241          
    242                      /*
    243                       * By using 'continue', the next iteration of the loop
    244                       * is used, skipping the code that follows.
    245                       */
    246                      continue;
    247                  }
    248          
    249                  /*
    250                   * First check for specification modifier flags.
    251                   */
    252                  flags_used = 0;
    253                  done = FALSE;
    254                  while (!done)
    255                  {
    256                      switch (/* c = */ *++p)
    257                      {
    258                          case '-':
    259                              flags_used |= FLAGS_MINUS;
    260                              break;
    261                          case '+':
    262                              flags_used |= FLAGS_PLUS;
    263                              break;
    264                          case ' ':
    265                              flags_used |= FLAGS_SPACE;
    266                              break;
    267                          case '0':
    268                              flags_used |= FLAGS_ZERO;
    269                              break;
    270                          case '#':
    271                              flags_used |= FLAGS_POUND;
    272                              break;
    273                          default:
    274                              /* we've gone one char too far */
    275                              --p;
    276                              done = TRUE;
    277                              break;
    278                      }
    279                  }
    280          
    281                  /*
    282                   * Next check for minimum field width.
    283                   */
    284                  field_width = 0;
    285                  done = FALSE;
    286                  while (!done)
    287                  {
    288                      switch (c = *++p)
    289                      {
    290                          case '0':
    291                          case '1':
    292                          case '2':
    293                          case '3':
    294                          case '4':
    295                          case '5':
    296                          case '6':
    297                          case '7':
    298                          case '8':
    299                          case '9':
    300                              field_width = (field_width * 10) + (c - '0');
    301                              break;
    302                          default:
    303                              /* we've gone one char too far */
    304                              --p;
    305                              done = TRUE;
    306                              break;
    307                      }
    308                  }
    309          
    310                  /*
    311                   * Next check for the width and precision field separator.
    312                   */
    313                  if (*++p == '.')
    314                  {
    315          
    316                      /*
    317                       * Must get precision field width, if present.
    318                       */
    319                      done = FALSE;
    320                      while (!done)
    321                      {
    322                          switch (/* c = uncomment if used below */ *++p)
    323                          {
    324                              case '0':
    325                              case '1':
    326                              case '2':
    327                              case '3':
    328                              case '4':
    329                              case '5':
    330                              case '6':
    331                              case '7':
    332                              case '8':
    333                              case '9':
    334          #if 0
    335                                  precision_width = (precision_width * 10) +
    336                                      (c - '0');
    337          #endif
    338                                  break;
    339                              default:
    340                                  /* we've gone one char too far */
    341                                  --p;
    342                                  done = TRUE;
    343                                  break;
    344                          }
    345                      }
    346                  }
    347                  else
    348                  {
    349                      /* we've gone one char too far */
    350                      --p;
    351          #if 0
    352                      precision_used = FALSE;
    353                      precision_width = 0;
    354          #endif
    355                  }
    356          
    357                  /*
    358                   * Check for the length modifier.
    359                   */
    360                  switch (*++p)
    361                  {
    362                      case 'h':
    363                          break;
    364                      case 'l':
    365                          break;
    366                      case 'L':
    367                          break;
    368                      default:
    369                          /* we've gone one char too far */
    370                          --p;
    371                          break;
    372                  }
    373          
    374                  /*
    375                   * Now we're ready to examine the format.
    376                   */
    377                  switch (c = *++p)
    378                  {
    379                      case 'd':
    380                      case 'i':
    381                          ival = (int)va_arg(ap, int);
    382                          vlen = printk_mknumstr(vstr,&ival,TRUE,10);
    383                          vstrp = &vstr[vlen];
    384          
    385                          if (ival < 0)
    386                          {
    387                              schar = '-';
    388                              ++vlen;
    389                          }
    390                          else
    391                          {
    392                              if (IS_FLAG_PLUS(flags_used))
    393                              {
    394                                  schar = '+';
    395                                  ++vlen;
    396                              }
    397                              else
    398                              {
    399                                  if (IS_FLAG_SPACE(flags_used))
    400                                  {
    401                                      schar = ' ';
    402                                      ++vlen;
    403                                  }
    404                                  else
    405                                  {
    406                                      schar = 0;
    407                                  }
    408                              }
    409                          }
    410                          dschar = FALSE;
    411                      
    412                          /*
    413                           * do the ZERO pad.
    414                           */
    415                          if (IS_FLAG_ZERO(flags_used))
    416                          {
    417                              if (schar)
    418                                  printk_putc(schar, &count, info);
    419                              dschar = TRUE;
    420                      
    421                              printk_pad_zero (vlen, field_width, &count, info);
    422                              vlen = field_width;
    423                          }
    424                          else
    425                          {
    426                              if (!IS_FLAG_MINUS(flags_used))
    427                              {
    428                                  printk_pad_space (vlen, field_width, &count, info);
    429                      
    430                                  if (schar)
    431                                      printk_putc(schar, &count, info);
    432                                  dschar = TRUE;
    433                              }
    434                          }
    435                      
    436                          /* the string was built in reverse order, now display in */
    437                          /* correct order */
    438                          if (!dschar && schar)
    439                          {
    440                              printk_putc(schar, &count, info);
    441                          }
    442                          goto cont_xd;
    443          
    444                      case 'x':
    445                      case 'X':
    446                          uval = (unsigned int)va_arg(ap, unsigned int);
    447                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
    448                          vstrp = &vstr[vlen];
    449          
    450                          dschar = FALSE;
    451                          if (IS_FLAG_ZERO(flags_used))
    452                          {
    453                              if (IS_FLAG_POUND(flags_used))
    454                              {
    455                                  printk_putc('0', &count, info);
    456                                  printk_putc('x', &count, info);
    457                                  /*vlen += 2;*/
    458                                  dschar = TRUE;
    459                              }
    460                              printk_pad_zero (vlen, field_width, &count, info);
    461                              vlen = field_width;
    462                          }
    463                          else
    464                          {
    465                              if (!IS_FLAG_MINUS(flags_used))
    466                              {
    467                                  if (IS_FLAG_POUND(flags_used))
    468                                  {
    469                                      vlen += 2;
    470                                  }
    471                                  printk_pad_space (vlen, field_width, &count, info);
    472                                  if (IS_FLAG_POUND(flags_used))
    473                                  {
    474                                      printk_putc('0', &count, info);
    475                                      printk_putc('x', &count, info);
    476                                      dschar = TRUE;
    477                                  }
    478                              }
    479                          }
    480          
    481                          if ((IS_FLAG_POUND(flags_used)) && !dschar)
    482                          {
    483                              printk_putc('0', &count, info);
    484                              printk_putc('x', &count, info);
    485                              vlen += 2;
    486                          }
    487                          goto cont_xd;
    488          
    489                      case 'o':
    490                          uval = (unsigned int)va_arg(ap, unsigned int);
    491                          vlen = printk_mknumstr(vstr,&uval,FALSE,8);
    492                          goto cont_u;
    493                      case 'b':
    494                          uval = (unsigned int)va_arg(ap, unsigned int);
    495                          vlen = printk_mknumstr(vstr,&uval,FALSE,2);
    496                          goto cont_u;
    497                      case 'p':
    498                          uval = (unsigned int)va_arg(ap, void *);
    499                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
    500                          goto cont_u;
    501                      case 'u':
    502                          uval = (unsigned int)va_arg(ap, unsigned int);
    503                          vlen = printk_mknumstr(vstr,&uval,FALSE,10);
    504          
    505                          cont_u:
    506                              vstrp = &vstr[vlen];
    507          
    508                              if (IS_FLAG_ZERO(flags_used))
    509                              {
    510                                  printk_pad_zero (vlen, field_width, &count, info);
    511                                  vlen = field_width;
    512                              }
    513                              else
    514                              {
    515                                  if (!IS_FLAG_MINUS(flags_used))
    516                                  {
    517                                      printk_pad_space (vlen, field_width, &count, info);
    518                                  }
    519                              }
    520          
    521                          cont_xd:
    522                              while (*vstrp)
    523                                  printk_putc(*vstrp--, &count, info);
    524          
    525                              if (IS_FLAG_MINUS(flags_used))
    526                              {
    527                                  printk_pad_space (vlen, field_width, &count, info);
    528                              }
    529                          break;
    530          
    531                      case 'c':
    532                          cval = (char)va_arg(ap, unsigned int);
    533                          printk_putc(cval,&count, info);
    534                          break;
    535                      case 's':
    536                          sval = (char *)va_arg(ap, char *);
    537                          if (sval)
    538                          {
    539                              vlen = strlen(sval);
    540                              if (!IS_FLAG_MINUS(flags_used))
    541                              {
    542                                  printk_pad_space (vlen, field_width, &count, info);
    543                              }
    544                              while (*sval)
    545                                  printk_putc(*sval++,&count, info);
    546                              if (IS_FLAG_MINUS(flags_used))
    547                              {
    548                                  printk_pad_space (vlen, field_width, &count, info);
    549                              }
    550                          }
    551                          break;
    552                      case 'n':
    553                          ivalp = (int *)va_arg(ap, int *);
    554                          *ivalp = count;
    555                          break;
    556                      default:
    557                          printk_putc(c,&count, info);
   \                     ??printk_1: (+1)
   \   00000010   0x0032             MOVS     R2,R6
   \   00000012   0x4669             MOV      R1,SP
   \                     ??printk_2: (+1)
   \   00000014   0x.... 0x....      BL       printk_putc
    558                          break;
   \                     ??printk_3: (+1)
   \   00000018   0x9804             LDR      R0,[SP, #+16]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x9004             STR      R0,[SP, #+16]
   \                     ??printk_0: (+1)
   \   0000001E   0x9804             LDR      R0,[SP, #+16]
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD100             BNE      .+4
   \   00000026   0xE1FF             B        ??printk_4
   \   00000028   0x2825             CMP      R0,#+37
   \   0000002A   0xD026             BEQ      ??printk_5
   \   0000002C   0x280A             CMP      R0,#+10
   \   0000002E   0xD1EF             BNE      ??printk_1
   \   00000030   0x6830             LDR      R0,[R6, #+0]
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD008             BEQ      ??printk_6
   \   00000036   0x2802             CMP      R0,#+2
   \   00000038   0xD109             BNE      ??printk_7
   \   0000003A   0x200D             MOVS     R0,#+13
   \   0000003C   0x68B1             LDR      R1,[R6, #+8]
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
   \   00000040   0x68B0             LDR      R0,[R6, #+8]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x60B0             STR      R0,[R6, #+8]
   \   00000046   0xE002             B        ??printk_7
   \                     ??printk_6: (+1)
   \   00000048   0x200D             MOVS     R0,#+13
   \   0000004A   0x6871             LDR      R1,[R6, #+4]
   \   0000004C   0x4788             BLX      R1
   \                     ??printk_7: (+1)
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0x6830             LDR      R0,[R6, #+0]
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD008             BEQ      ??printk_8
   \   0000005A   0x2802             CMP      R0,#+2
   \   0000005C   0xD109             BNE      ??printk_9
   \   0000005E   0x200A             MOVS     R0,#+10
   \   00000060   0x68B1             LDR      R1,[R6, #+8]
   \   00000062   0x7008             STRB     R0,[R1, #+0]
   \   00000064   0x68B0             LDR      R0,[R6, #+8]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x60B0             STR      R0,[R6, #+8]
   \   0000006A   0xE002             B        ??printk_9
   \                     ??printk_8: (+1)
   \   0000006C   0x200A             MOVS     R0,#+10
   \   0000006E   0x6871             LDR      R1,[R6, #+4]
   \   00000070   0x4788             BLX      R1
   \                     ??printk_9: (+1)
   \   00000072   0x9800             LDR      R0,[SP, #+0]
   \   00000074   0x1C40             ADDS     R0,R0,#+1
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0xE7CE             B        ??printk_3
   \                     ??printk_5: (+1)
   \   0000007A   0x2700             MOVS     R7,#+0
   \   0000007C   0xE002             B        ??printk_10
   \                     ??printk_11: (+1)
   \   0000007E   0x0038             MOVS     R0,R7
   \   00000080   0x2710             MOVS     R7,#+16
   \                     ??printk_12: (+1)
   \   00000082   0x4307             ORRS     R7,R7,R0
   \                     ??printk_10: (+1)
   \   00000084   0x9804             LDR      R0,[SP, #+16]
   \   00000086   0x1C40             ADDS     R0,R0,#+1
   \   00000088   0x9004             STR      R0,[SP, #+16]
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x2820             CMP      R0,#+32
   \   0000008E   0xD00E             BEQ      ??printk_13
   \   00000090   0x2823             CMP      R0,#+35
   \   00000092   0xD0F4             BEQ      ??printk_11
   \   00000094   0x282B             CMP      R0,#+43
   \   00000096   0xD007             BEQ      ??printk_14
   \   00000098   0x282D             CMP      R0,#+45
   \   0000009A   0xD002             BEQ      ??printk_15
   \   0000009C   0x2830             CMP      R0,#+48
   \   0000009E   0xD009             BEQ      ??printk_16
   \   000000A0   0xE00B             B        ??printk_17
   \                     ??printk_15: (+1)
   \   000000A2   0x0038             MOVS     R0,R7
   \   000000A4   0x2701             MOVS     R7,#+1
   \   000000A6   0xE7EC             B        ??printk_12
   \                     ??printk_14: (+1)
   \   000000A8   0x0038             MOVS     R0,R7
   \   000000AA   0x2702             MOVS     R7,#+2
   \   000000AC   0xE7E9             B        ??printk_12
   \                     ??printk_13: (+1)
   \   000000AE   0x0038             MOVS     R0,R7
   \   000000B0   0x2704             MOVS     R7,#+4
   \   000000B2   0xE7E6             B        ??printk_12
   \                     ??printk_16: (+1)
   \   000000B4   0x0038             MOVS     R0,R7
   \   000000B6   0x2708             MOVS     R7,#+8
   \   000000B8   0xE7E3             B        ??printk_12
   \                     ??printk_17: (+1)
   \   000000BA   0x9904             LDR      R1,[SP, #+16]
   \   000000BC   0x1E49             SUBS     R1,R1,#+1
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xE005             B        ??printk_18
   \                     ??printk_19: (+1)
   \   000000C2   0x9A02             LDR      R2,[SP, #+8]
   \   000000C4   0x0093             LSLS     R3,R2,#+2
   \   000000C6   0x189A             ADDS     R2,R3,R2
   \   000000C8   0x0052             LSLS     R2,R2,#+1
   \   000000CA   0x1810             ADDS     R0,R2,R0
   \   000000CC   0x3830             SUBS     R0,R0,#+48
   \                     ??printk_18: (+1)
   \   000000CE   0x9002             STR      R0,[SP, #+8]
   \   000000D0   0x1C49             ADDS     R1,R1,#+1
   \   000000D2   0x7808             LDRB     R0,[R1, #+0]
   \   000000D4   0x0002             MOVS     R2,R0
   \   000000D6   0x3A30             SUBS     R2,R2,#+48
   \   000000D8   0x2A09             CMP      R2,#+9
   \   000000DA   0xD9F2             BLS      ??printk_19
   \   000000DC   0x282E             CMP      R0,#+46
   \   000000DE   0xD104             BNE      ??printk_20
   \                     ??printk_21: (+1)
   \   000000E0   0x1C49             ADDS     R1,R1,#+1
   \   000000E2   0x7808             LDRB     R0,[R1, #+0]
   \   000000E4   0x3830             SUBS     R0,R0,#+48
   \   000000E6   0x2809             CMP      R0,#+9
   \   000000E8   0xD9FA             BLS      ??printk_21
   \                     ??printk_20: (+1)
   \   000000EA   0x1E49             SUBS     R1,R1,#+1
   \   000000EC   0x1C48             ADDS     R0,R1,#+1
   \   000000EE   0x7802             LDRB     R2,[R0, #+0]
   \   000000F0   0x2A4C             CMP      R2,#+76
   \   000000F2   0xD004             BEQ      ??printk_22
   \   000000F4   0x2A68             CMP      R2,#+104
   \   000000F6   0xD002             BEQ      ??printk_22
   \   000000F8   0x2A6C             CMP      R2,#+108
   \   000000FA   0xD000             BEQ      ??printk_22
   \   000000FC   0x0008             MOVS     R0,R1
   \                     ??printk_22: (+1)
   \   000000FE   0x1C40             ADDS     R0,R0,#+1
   \   00000100   0x9004             STR      R0,[SP, #+16]
   \   00000102   0x7800             LDRB     R0,[R0, #+0]
   \   00000104   0x2858             CMP      R0,#+88
   \   00000106   0xD072             BEQ      ??printk_23
   \   00000108   0x2862             CMP      R0,#+98
   \   0000010A   0xD100             BNE      .+4
   \   0000010C   0xE113             B        ??printk_24
   \   0000010E   0x2863             CMP      R0,#+99
   \   00000110   0xD100             BNE      .+4
   \   00000112   0xE157             B        ??printk_25
   \   00000114   0x2864             CMP      R0,#+100
   \   00000116   0xD013             BEQ      ??printk_26
   \   00000118   0x2869             CMP      R0,#+105
   \   0000011A   0xD011             BEQ      ??printk_26
   \   0000011C   0x286E             CMP      R0,#+110
   \   0000011E   0xD100             BNE      .+4
   \   00000120   0xE17D             B        ??printk_27
   \   00000122   0x286F             CMP      R0,#+111
   \   00000124   0xD100             BNE      .+4
   \   00000126   0xE101             B        ??printk_28
   \   00000128   0x2870             CMP      R0,#+112
   \   0000012A   0xD100             BNE      .+4
   \   0000012C   0xE108             B        ??printk_29
   \   0000012E   0x2873             CMP      R0,#+115
   \   00000130   0xD100             BNE      .+4
   \   00000132   0xE14D             B        ??printk_30
   \   00000134   0x2875             CMP      R0,#+117
   \   00000136   0xD100             BNE      .+4
   \   00000138   0xE107             B        ??printk_31
   \   0000013A   0x2878             CMP      R0,#+120
   \   0000013C   0xD057             BEQ      ??printk_23
   \   0000013E   0xE767             B        ??printk_1
   \                     ??printk_26: (+1)
   \   00000140   0x6828             LDR      R0,[R5, #+0]
   \   00000142   0x1D2D             ADDS     R5,R5,#+4
   \   00000144   0x9006             STR      R0,[SP, #+24]
   \   00000146   0x230A             MOVS     R3,#+10
   \   00000148   0x2201             MOVS     R2,#+1
   \   0000014A   0xA906             ADD      R1,SP,#+24
   \   0000014C   0xA807             ADD      R0,SP,#+28
   \   0000014E   0x.... 0x....      BL       printk_mknumstr
   \   00000152   0x0004             MOVS     R4,R0
   \   00000154   0xA807             ADD      R0,SP,#+28
   \   00000156   0x1900             ADDS     R0,R0,R4
   \   00000158   0x9005             STR      R0,[SP, #+20]
   \   0000015A   0x9806             LDR      R0,[SP, #+24]
   \   0000015C   0x2800             CMP      R0,#+0
   \   0000015E   0xD501             BPL      ??printk_32
   \   00000160   0x202D             MOVS     R0,#+45
   \   00000162   0xE006             B.N      ??printk_33
   \                     ??printk_32: (+1)
   \   00000164   0x07B8             LSLS     R0,R7,#+30
   \   00000166   0xD501             BPL      ??printk_34
   \   00000168   0x202B             MOVS     R0,#+43
   \   0000016A   0xE002             B.N      ??printk_33
   \                     ??printk_34: (+1)
   \   0000016C   0x0778             LSLS     R0,R7,#+29
   \   0000016E   0xD503             BPL      ??printk_35
   \   00000170   0x2020             MOVS     R0,#+32
   \                     ??printk_33: (+1)
   \   00000172   0x9001             STR      R0,[SP, #+4]
   \   00000174   0x1C64             ADDS     R4,R4,#+1
   \   00000176   0xE001             B        ??printk_36
   \                     ??printk_35: (+1)
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x9001             STR      R0,[SP, #+4]
   \                     ??printk_36: (+1)
   \   0000017C   0x0738             LSLS     R0,R7,#+28
   \   0000017E   0xD50D             BPL      ??printk_37
   \   00000180   0x9801             LDR      R0,[SP, #+4]
   \   00000182   0x2800             CMP      R0,#+0
   \   00000184   0xD003             BEQ      ??printk_38
   \   00000186   0x0032             MOVS     R2,R6
   \   00000188   0x4669             MOV      R1,SP
   \   0000018A   0x.... 0x....      BL       printk_putc
   \                     ??printk_38: (+1)
   \   0000018E   0x0033             MOVS     R3,R6
   \   00000190   0x466A             MOV      R2,SP
   \   00000192   0x9902             LDR      R1,[SP, #+8]
   \   00000194   0x0020             MOVS     R0,R4
   \   00000196   0x.... 0x....      BL       printk_pad_zero
   \   0000019A   0xE0FD             B.N      ??printk_39
   \                     ??printk_37: (+1)
   \   0000019C   0x07F8             LSLS     R0,R7,#+31
   \   0000019E   0xD40E             BMI      ??printk_40
   \   000001A0   0x0033             MOVS     R3,R6
   \   000001A2   0x466A             MOV      R2,SP
   \   000001A4   0x9902             LDR      R1,[SP, #+8]
   \   000001A6   0x0020             MOVS     R0,R4
   \   000001A8   0x.... 0x....      BL       printk_pad_space
   \   000001AC   0x9801             LDR      R0,[SP, #+4]
   \   000001AE   0x2800             CMP      R0,#+0
   \   000001B0   0xD100             BNE      .+4
   \   000001B2   0xE0FB             B        ??printk_41
   \   000001B4   0x0032             MOVS     R2,R6
   \   000001B6   0x4669             MOV      R1,SP
   \   000001B8   0x.... 0x....      BL       printk_putc
   \   000001BC   0xE0F6             B        ??printk_41
   \                     ??printk_40: (+1)
   \   000001BE   0x9801             LDR      R0,[SP, #+4]
   \   000001C0   0x2800             CMP      R0,#+0
   \   000001C2   0xD100             BNE      .+4
   \   000001C4   0xE0F2             B        ??printk_41
   \   000001C6   0x6830             LDR      R0,[R6, #+0]
   \   000001C8   0x2801             CMP      R0,#+1
   \   000001CA   0xD008             BEQ      ??printk_42
   \   000001CC   0x2802             CMP      R0,#+2
   \   000001CE   0xD10A             BNE      ??printk_43
   \   000001D0   0x9801             LDR      R0,[SP, #+4]
   \   000001D2   0x68B1             LDR      R1,[R6, #+8]
   \   000001D4   0x7008             STRB     R0,[R1, #+0]
   \   000001D6   0x68B0             LDR      R0,[R6, #+8]
   \   000001D8   0x1C40             ADDS     R0,R0,#+1
   \   000001DA   0x60B0             STR      R0,[R6, #+8]
   \   000001DC   0xE003             B        ??printk_43
   \                     ??printk_42: (+1)
   \   000001DE   0x9801             LDR      R0,[SP, #+4]
   \   000001E0   0xB2C0             UXTB     R0,R0
   \   000001E2   0x6871             LDR      R1,[R6, #+4]
   \   000001E4   0x4788             BLX      R1
   \                     ??printk_43: (+1)
   \   000001E6   0x9800             LDR      R0,[SP, #+0]
   \   000001E8   0x1C40             ADDS     R0,R0,#+1
   \   000001EA   0x9000             STR      R0,[SP, #+0]
   \   000001EC   0xE0DE             B        ??printk_41
   \                     ??printk_23: (+1)
   \   000001EE   0x6828             LDR      R0,[R5, #+0]
   \   000001F0   0x1D2D             ADDS     R5,R5,#+4
   \   000001F2   0x9003             STR      R0,[SP, #+12]
   \   000001F4   0x2310             MOVS     R3,#+16
   \   000001F6   0x2200             MOVS     R2,#+0
   \   000001F8   0xA903             ADD      R1,SP,#+12
   \   000001FA   0xA807             ADD      R0,SP,#+28
   \   000001FC   0x.... 0x....      BL       printk_mknumstr
   \   00000200   0x0004             MOVS     R4,R0
   \   00000202   0xA807             ADD      R0,SP,#+28
   \   00000204   0x1900             ADDS     R0,R0,R4
   \   00000206   0x9005             STR      R0,[SP, #+20]
   \   00000208   0x2000             MOVS     R0,#+0
   \   0000020A   0x9001             STR      R0,[SP, #+4]
   \   0000020C   0x0738             LSLS     R0,R7,#+28
   \   0000020E   0xD52F             BPL      ??printk_44
   \   00000210   0x06F8             LSLS     R0,R7,#+27
   \   00000212   0xD525             BPL      ??printk_45
   \   00000214   0x6830             LDR      R0,[R6, #+0]
   \   00000216   0x2801             CMP      R0,#+1
   \   00000218   0xD008             BEQ      ??printk_46
   \   0000021A   0x2802             CMP      R0,#+2
   \   0000021C   0xD109             BNE      ??printk_47
   \   0000021E   0x2030             MOVS     R0,#+48
   \   00000220   0x68B1             LDR      R1,[R6, #+8]
   \   00000222   0x7008             STRB     R0,[R1, #+0]
   \   00000224   0x68B0             LDR      R0,[R6, #+8]
   \   00000226   0x1C40             ADDS     R0,R0,#+1
   \   00000228   0x60B0             STR      R0,[R6, #+8]
   \   0000022A   0xE002             B        ??printk_47
   \                     ??printk_46: (+1)
   \   0000022C   0x2030             MOVS     R0,#+48
   \   0000022E   0x6871             LDR      R1,[R6, #+4]
   \   00000230   0x4788             BLX      R1
   \                     ??printk_47: (+1)
   \   00000232   0x9800             LDR      R0,[SP, #+0]
   \   00000234   0x1C40             ADDS     R0,R0,#+1
   \   00000236   0x9000             STR      R0,[SP, #+0]
   \   00000238   0x6830             LDR      R0,[R6, #+0]
   \   0000023A   0x2801             CMP      R0,#+1
   \   0000023C   0xD008             BEQ      ??printk_48
   \   0000023E   0x2802             CMP      R0,#+2
   \   00000240   0xD109             BNE      ??printk_49
   \   00000242   0x2078             MOVS     R0,#+120
   \   00000244   0x68B1             LDR      R1,[R6, #+8]
   \   00000246   0x7008             STRB     R0,[R1, #+0]
   \   00000248   0x68B0             LDR      R0,[R6, #+8]
   \   0000024A   0x1C40             ADDS     R0,R0,#+1
   \   0000024C   0x60B0             STR      R0,[R6, #+8]
   \   0000024E   0xE002             B        ??printk_49
   \                     ??printk_48: (+1)
   \   00000250   0x2078             MOVS     R0,#+120
   \   00000252   0x6871             LDR      R1,[R6, #+4]
   \   00000254   0x4788             BLX      R1
   \                     ??printk_49: (+1)
   \   00000256   0x9800             LDR      R0,[SP, #+0]
   \   00000258   0x1C40             ADDS     R0,R0,#+1
   \   0000025A   0x9000             STR      R0,[SP, #+0]
   \   0000025C   0x2001             MOVS     R0,#+1
   \   0000025E   0x9001             STR      R0,[SP, #+4]
   \                     ??printk_45: (+1)
   \   00000260   0x0033             MOVS     R3,R6
   \   00000262   0x466A             MOV      R2,SP
   \   00000264   0x9902             LDR      R1,[SP, #+8]
   \   00000266   0x0020             MOVS     R0,R4
   \   00000268   0x.... 0x....      BL       printk_pad_zero
   \   0000026C   0x9C02             LDR      R4,[SP, #+8]
   \   0000026E   0xE032             B        ??printk_50
   \                     ??printk_44: (+1)
   \   00000270   0x07F8             LSLS     R0,R7,#+31
   \   00000272   0xD430             BMI      ??printk_50
   \   00000274   0x06F8             LSLS     R0,R7,#+27
   \   00000276   0xD500             BPL      ??printk_51
   \   00000278   0x1CA4             ADDS     R4,R4,#+2
   \                     ??printk_51: (+1)
   \   0000027A   0x0033             MOVS     R3,R6
   \   0000027C   0x466A             MOV      R2,SP
   \   0000027E   0x9902             LDR      R1,[SP, #+8]
   \   00000280   0x0020             MOVS     R0,R4
   \   00000282   0x.... 0x....      BL       printk_pad_space
   \   00000286   0x06F8             LSLS     R0,R7,#+27
   \   00000288   0xD525             BPL      ??printk_50
   \   0000028A   0x6830             LDR      R0,[R6, #+0]
   \   0000028C   0x2801             CMP      R0,#+1
   \   0000028E   0xD008             BEQ      ??printk_52
   \   00000290   0x2802             CMP      R0,#+2
   \   00000292   0xD109             BNE      ??printk_53
   \   00000294   0x2030             MOVS     R0,#+48
   \   00000296   0x68B1             LDR      R1,[R6, #+8]
   \   00000298   0x7008             STRB     R0,[R1, #+0]
   \   0000029A   0x68B0             LDR      R0,[R6, #+8]
   \   0000029C   0x1C40             ADDS     R0,R0,#+1
   \   0000029E   0x60B0             STR      R0,[R6, #+8]
   \   000002A0   0xE002             B        ??printk_53
   \                     ??printk_52: (+1)
   \   000002A2   0x2030             MOVS     R0,#+48
   \   000002A4   0x6871             LDR      R1,[R6, #+4]
   \   000002A6   0x4788             BLX      R1
   \                     ??printk_53: (+1)
   \   000002A8   0x9800             LDR      R0,[SP, #+0]
   \   000002AA   0x1C40             ADDS     R0,R0,#+1
   \   000002AC   0x9000             STR      R0,[SP, #+0]
   \   000002AE   0x6830             LDR      R0,[R6, #+0]
   \   000002B0   0x2801             CMP      R0,#+1
   \   000002B2   0xD008             BEQ      ??printk_54
   \   000002B4   0x2802             CMP      R0,#+2
   \   000002B6   0xD109             BNE      ??printk_55
   \   000002B8   0x2078             MOVS     R0,#+120
   \   000002BA   0x68B1             LDR      R1,[R6, #+8]
   \   000002BC   0x7008             STRB     R0,[R1, #+0]
   \   000002BE   0x68B0             LDR      R0,[R6, #+8]
   \   000002C0   0x1C40             ADDS     R0,R0,#+1
   \   000002C2   0x60B0             STR      R0,[R6, #+8]
   \   000002C4   0xE002             B        ??printk_55
   \                     ??printk_54: (+1)
   \   000002C6   0x2078             MOVS     R0,#+120
   \   000002C8   0x6871             LDR      R1,[R6, #+4]
   \   000002CA   0x4788             BLX      R1
   \                     ??printk_55: (+1)
   \   000002CC   0x9800             LDR      R0,[SP, #+0]
   \   000002CE   0x1C40             ADDS     R0,R0,#+1
   \   000002D0   0x9000             STR      R0,[SP, #+0]
   \   000002D2   0x2001             MOVS     R0,#+1
   \   000002D4   0x9001             STR      R0,[SP, #+4]
   \                     ??printk_50: (+1)
   \   000002D6   0x06F8             LSLS     R0,R7,#+27
   \   000002D8   0xD568             BPL      ??printk_41
   \   000002DA   0x9801             LDR      R0,[SP, #+4]
   \   000002DC   0x2800             CMP      R0,#+0
   \   000002DE   0xD165             BNE      ??printk_41
   \   000002E0   0x6830             LDR      R0,[R6, #+0]
   \   000002E2   0x2801             CMP      R0,#+1
   \   000002E4   0xD008             BEQ      ??printk_56
   \   000002E6   0x2802             CMP      R0,#+2
   \   000002E8   0xD109             BNE      ??printk_57
   \   000002EA   0x2030             MOVS     R0,#+48
   \   000002EC   0x68B1             LDR      R1,[R6, #+8]
   \   000002EE   0x7008             STRB     R0,[R1, #+0]
   \   000002F0   0x68B0             LDR      R0,[R6, #+8]
   \   000002F2   0x1C40             ADDS     R0,R0,#+1
   \   000002F4   0x60B0             STR      R0,[R6, #+8]
   \   000002F6   0xE002             B        ??printk_57
   \                     ??printk_56: (+1)
   \   000002F8   0x2030             MOVS     R0,#+48
   \   000002FA   0x6871             LDR      R1,[R6, #+4]
   \   000002FC   0x4788             BLX      R1
   \                     ??printk_57: (+1)
   \   000002FE   0x9800             LDR      R0,[SP, #+0]
   \   00000300   0x1C40             ADDS     R0,R0,#+1
   \   00000302   0x9000             STR      R0,[SP, #+0]
   \   00000304   0x6830             LDR      R0,[R6, #+0]
   \   00000306   0x2801             CMP      R0,#+1
   \   00000308   0xD008             BEQ      ??printk_58
   \   0000030A   0x2802             CMP      R0,#+2
   \   0000030C   0xD109             BNE      ??printk_59
   \   0000030E   0x2078             MOVS     R0,#+120
   \   00000310   0x68B1             LDR      R1,[R6, #+8]
   \   00000312   0x7008             STRB     R0,[R1, #+0]
   \   00000314   0x68B0             LDR      R0,[R6, #+8]
   \   00000316   0x1C40             ADDS     R0,R0,#+1
   \   00000318   0x60B0             STR      R0,[R6, #+8]
   \   0000031A   0xE002             B        ??printk_59
   \                     ??printk_58: (+1)
   \   0000031C   0x2078             MOVS     R0,#+120
   \   0000031E   0x6871             LDR      R1,[R6, #+4]
   \   00000320   0x4788             BLX      R1
   \                     ??printk_59: (+1)
   \   00000322   0x9800             LDR      R0,[SP, #+0]
   \   00000324   0x1C40             ADDS     R0,R0,#+1
   \   00000326   0x9000             STR      R0,[SP, #+0]
   \   00000328   0x1CA4             ADDS     R4,R4,#+2
   \   0000032A   0xE03F             B        ??printk_41
   \                     ??printk_28: (+1)
   \   0000032C   0x6828             LDR      R0,[R5, #+0]
   \   0000032E   0x1D2D             ADDS     R5,R5,#+4
   \   00000330   0x9003             STR      R0,[SP, #+12]
   \   00000332   0x2308             MOVS     R3,#+8
   \   00000334   0xE00D             B        ??printk_60
   \                     ??printk_24: (+1)
   \   00000336   0x6828             LDR      R0,[R5, #+0]
   \   00000338   0x1D2D             ADDS     R5,R5,#+4
   \   0000033A   0x9003             STR      R0,[SP, #+12]
   \   0000033C   0x2302             MOVS     R3,#+2
   \   0000033E   0xE008             B        ??printk_60
   \                     ??printk_29: (+1)
   \   00000340   0x6828             LDR      R0,[R5, #+0]
   \   00000342   0x1D2D             ADDS     R5,R5,#+4
   \   00000344   0x9003             STR      R0,[SP, #+12]
   \   00000346   0x2310             MOVS     R3,#+16
   \   00000348   0xE003             B        ??printk_60
   \                     ??printk_31: (+1)
   \   0000034A   0x6828             LDR      R0,[R5, #+0]
   \   0000034C   0x1D2D             ADDS     R5,R5,#+4
   \   0000034E   0x9003             STR      R0,[SP, #+12]
   \   00000350   0x230A             MOVS     R3,#+10
   \                     ??printk_60: (+1)
   \   00000352   0x2200             MOVS     R2,#+0
   \   00000354   0xA903             ADD      R1,SP,#+12
   \   00000356   0xA807             ADD      R0,SP,#+28
   \   00000358   0x.... 0x....      BL       printk_mknumstr
   \   0000035C   0x0004             MOVS     R4,R0
   \   0000035E   0xA807             ADD      R0,SP,#+28
   \   00000360   0x1900             ADDS     R0,R0,R4
   \   00000362   0x9005             STR      R0,[SP, #+20]
   \   00000364   0x0738             LSLS     R0,R7,#+28
   \   00000366   0xD519             BPL      ??printk_61
   \   00000368   0x9802             LDR      R0,[SP, #+8]
   \   0000036A   0x4284             CMP      R4,R0
   \   0000036C   0xDA14             BGE      ??printk_39
   \   0000036E   0x1B04             SUBS     R4,R0,R4
   \                     ??printk_62: (+1)
   \   00000370   0x6830             LDR      R0,[R6, #+0]
   \   00000372   0x2801             CMP      R0,#+1
   \   00000374   0xD008             BEQ      ??printk_63
   \   00000376   0x2802             CMP      R0,#+2
   \   00000378   0xD109             BNE      ??printk_64
   \   0000037A   0x2030             MOVS     R0,#+48
   \   0000037C   0x68B1             LDR      R1,[R6, #+8]
   \   0000037E   0x7008             STRB     R0,[R1, #+0]
   \   00000380   0x68B0             LDR      R0,[R6, #+8]
   \   00000382   0x1C40             ADDS     R0,R0,#+1
   \   00000384   0x60B0             STR      R0,[R6, #+8]
   \   00000386   0xE002             B        ??printk_64
   \                     ??printk_63: (+1)
   \   00000388   0x2030             MOVS     R0,#+48
   \   0000038A   0x6871             LDR      R1,[R6, #+4]
   \   0000038C   0x4788             BLX      R1
   \                     ??printk_64: (+1)
   \   0000038E   0x9800             LDR      R0,[SP, #+0]
   \   00000390   0x1C40             ADDS     R0,R0,#+1
   \   00000392   0x9000             STR      R0,[SP, #+0]
   \   00000394   0x1E64             SUBS     R4,R4,#+1
   \   00000396   0xD1EB             BNE      ??printk_62
   \                     ??printk_39: (+1)
   \   00000398   0x9C02             LDR      R4,[SP, #+8]
   \   0000039A   0xE007             B        ??printk_41
   \                     ??printk_61: (+1)
   \   0000039C   0x07F8             LSLS     R0,R7,#+31
   \   0000039E   0xD405             BMI      ??printk_41
   \   000003A0   0x0033             MOVS     R3,R6
   \   000003A2   0x466A             MOV      R2,SP
   \   000003A4   0x9902             LDR      R1,[SP, #+8]
   \   000003A6   0x0020             MOVS     R0,R4
   \   000003A8   0x.... 0x....      BL       printk_pad_space
   \                     ??printk_41: (+1)
   \   000003AC   0x9805             LDR      R0,[SP, #+20]
   \   000003AE   0x7800             LDRB     R0,[R0, #+0]
   \   000003B0   0x2800             CMP      R0,#+0
   \   000003B2   0xD02A             BEQ      ??printk_65
   \   000003B4   0x0032             MOVS     R2,R6
   \   000003B6   0x4669             MOV      R1,SP
   \   000003B8   0x.... 0x....      BL       printk_putc
   \   000003BC   0x9805             LDR      R0,[SP, #+20]
   \   000003BE   0x1E40             SUBS     R0,R0,#+1
   \   000003C0   0x9005             STR      R0,[SP, #+20]
   \   000003C2   0xE7F3             B        ??printk_41
   \                     ??printk_25: (+1)
   \   000003C4   0x6828             LDR      R0,[R5, #+0]
   \   000003C6   0x1D2D             ADDS     R5,R5,#+4
   \   000003C8   0x0032             MOVS     R2,R6
   \   000003CA   0x4669             MOV      R1,SP
   \   000003CC   0xB2C0             UXTB     R0,R0
   \   000003CE   0xE621             B        ??printk_2
   \                     ??printk_30: (+1)
   \   000003D0   0x6828             LDR      R0,[R5, #+0]
   \   000003D2   0x1D2D             ADDS     R5,R5,#+4
   \   000003D4   0x9001             STR      R0,[SP, #+4]
   \   000003D6   0x2800             CMP      R0,#+0
   \   000003D8   0xD100             BNE      .+4
   \   000003DA   0xE61D             B        ??printk_3
   \   000003DC   0x.... 0x....      BL       strlen
   \   000003E0   0x0004             MOVS     R4,R0
   \   000003E2   0x07F8             LSLS     R0,R7,#+31
   \   000003E4   0xD40D             BMI      ??printk_66
   \   000003E6   0x0033             MOVS     R3,R6
   \   000003E8   0x466A             MOV      R2,SP
   \   000003EA   0x9902             LDR      R1,[SP, #+8]
   \   000003EC   0x0020             MOVS     R0,R4
   \   000003EE   0x.... 0x....      BL       printk_pad_space
   \   000003F2   0xE006             B        ??printk_66
   \                     ??printk_67: (+1)
   \   000003F4   0x0032             MOVS     R2,R6
   \   000003F6   0x4669             MOV      R1,SP
   \   000003F8   0x.... 0x....      BL       printk_putc
   \   000003FC   0x9801             LDR      R0,[SP, #+4]
   \   000003FE   0x1C40             ADDS     R0,R0,#+1
   \   00000400   0x9001             STR      R0,[SP, #+4]
   \                     ??printk_66: (+1)
   \   00000402   0x9801             LDR      R0,[SP, #+4]
   \   00000404   0x7800             LDRB     R0,[R0, #+0]
   \   00000406   0x2800             CMP      R0,#+0
   \   00000408   0xD1F4             BNE      ??printk_67
   \                     ??printk_65: (+1)
   \   0000040A   0x07F8             LSLS     R0,R7,#+31
   \   0000040C   0xD400             BMI      .+4
   \   0000040E   0xE603             B        ??printk_3
   \   00000410   0x0033             MOVS     R3,R6
   \   00000412   0x466A             MOV      R2,SP
   \   00000414   0x9902             LDR      R1,[SP, #+8]
   \   00000416   0x0020             MOVS     R0,R4
   \   00000418   0x.... 0x....      BL       printk_pad_space
   \   0000041C   0xE5FC             B        ??printk_3
   \                     ??printk_27: (+1)
   \   0000041E   0x6828             LDR      R0,[R5, #+0]
   \   00000420   0x1D2D             ADDS     R5,R5,#+4
   \   00000422   0x9900             LDR      R1,[SP, #+0]
   \   00000424   0x6001             STR      R1,[R0, #+0]
   \   00000426   0xE5F7             B        ??printk_3
    559                  }
    560              }
    561              return count;
   \                     ??printk_4: (+1)
   \   00000428   0x9800             LDR      R0,[SP, #+0]
   \   0000042A   0xB011             ADD      SP,SP,#+68
   \   0000042C   0xBDF0             POP      {R4-R7,PC}       ;; return
    562          }
    563          
    564          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    565          int
    566          printf (const char *fmt, ...)
    567          {
   \                     printf: (+1)
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB500             PUSH     {LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
    568              va_list ap;
    569              int rvalue;
    570              PRINTK_INFO info;
    571          
    572          
    573              info.dest = DEST_CONSOLE;
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x9100             STR      R1,[SP, #+0]
    574              info.func = &out_char;
   \   0000000A   0x....             LDR      R1,??DataTable0
   \   0000000C   0x9101             STR      R1,[SP, #+4]
    575              /*
    576               * Initialize the pointer to the variable length argument list.
    577               */
    578              va_start(ap, fmt);
   \   0000000E   0xAA05             ADD      R2,SP,#+20
    579              rvalue = printk(&info, fmt, ap);
    580              /*
    581               * Cleanup the variable length argument list.
    582               */
    583              va_end(ap);
    584              return rvalue;
   \   00000010   0x0001             MOVS     R1,R0
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       printk
   \   00000018   0x9904             LDR      R1,[SP, #+16]
   \   0000001A   0xB008             ADD      SP,SP,#+32
   \   0000001C   0x4708             BX       R1               ;; return
    585          }
    586          
    587          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    588          int
    589          sprintf (char *s, const char *fmt, ...)
    590          {
   \                     sprintf: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x0002             MOVS     R2,R0
    591              va_list ap;
    592              int rvalue = 0;
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x2000             MOVS     R0,#+0
    593              PRINTK_INFO info;
    594          
    595              /*
    596               * Initialize the pointer to the variable length argument list.
    597               */
    598              if (s != 0)
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD008             BEQ      ??sprintf_0
    599              {
    600                  info.dest = DEST_STRING;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x9000             STR      R0,[SP, #+0]
    601                  info.loc = s;
   \   00000014   0x9202             STR      R2,[SP, #+8]
    602                  va_start(ap, fmt);
   \   00000016   0xAA06             ADD      R2,SP,#+24
    603                  rvalue = printk(&info, fmt, ap);
   \   00000018   0x4668             MOV      R0,SP
   \   0000001A   0x.... 0x....      BL       printk
    604                  *info.loc = '\0';
   \   0000001E   0x9902             LDR      R1,[SP, #+8]
   \   00000020   0x700C             STRB     R4,[R1, #+0]
    605                  va_end(ap);
    606              }
    607              return rvalue;
   \                     ??sprintf_0: (+1)
   \   00000022   0xB004             ADD      SP,SP,#+16
   \   00000024   0x9901             LDR      R1,[SP, #+4]
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0xB003             ADD      SP,SP,#+12
   \   0000002A   0x4708             BX       R1               ;; return
    608          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     out_char
    609          
    610          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   printf
        32   -> printk
      88   printk
        88   -- Indirect call
        88   -> printk_mknumstr
        88   -> printk_pad_space
        88   -> printk_pad_zero
        88   -> printk_putc
        88   -> strlen
      20   printk_mknumstr
        20 __aeabi_idiv
        20 __aeabi_uidiv
      24   printk_pad_space
        24   -- Indirect call
      24   printk_pad_zero
        24   -- Indirect call
       8   printk_putc
         8   -- Indirect call
      32   sprintf
        32   -> printk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      30  printf
    1070  printk
     112  printk_mknumstr
      54  printk_pad_space
      54  printk_pad_zero
      42  printk_putc
      44  sprintf

 
 1 410 bytes in section .text
 
 1 410 bytes of CODE memory

Errors: none
Warnings: none
