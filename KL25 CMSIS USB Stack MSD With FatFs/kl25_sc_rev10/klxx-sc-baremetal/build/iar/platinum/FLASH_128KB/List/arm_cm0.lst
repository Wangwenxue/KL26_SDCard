###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        30/Nov/2015  21:44:51
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\cpu\arm_cm0.c
#    Command line =  
#        "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\cpu\arm_cm0.c" -D IAR -D
#        FREEDOM -lCN "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD
#        With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -lB "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -o "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\"
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\projects\platinum\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\common\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\platforms\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\" -Oh
#    List file    =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\arm_cm0.lst
#    Object file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\arm_cm0.o
#
###############################################################################

D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\cpu\arm_cm0.c
      1          /*
      2           * File:		arm_cm0.c
      3           * Purpose:		Generic high-level routines for ARM Cortex M4 processors
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          
     10          /***********************************************************************/
     11          /*
     12           * Configures the ARM system control register for STOP (deep sleep) mode
     13           * and then executes the WFI instruction to enter the mode.
     14           *
     15           * Parameters:
     16           * none
     17           *
     18           * Note: Might want to change this later to allow for passing in a parameter
     19           *       to optionally set the sleep on exit bit.
     20           */
     21          

   \                                 In section .text, align 4, keep-with-next
     22          void stop (void)
     23          {
     24          	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
     25          	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
   \                     stop: (+1)
   \   00000000   0x....             LDR      R0,??DataTable9  ;; 0xe000ed10
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x2204             MOVS     R2,#+4
   \   00000006   0x430A             ORRS     R2,R2,R1
   \   00000008   0x6002             STR      R2,[R0, #+0]
     26          
     27          	/* WFI instruction will start entry into STOP mode */
     28          #ifndef KEIL
     29                  // If not using KEIL's uVision use the standard assembly command
     30          	asm("WFI");
   \   0000000A   0xBF30             WFI
     31          #else
     32                  // If using KEIL's uVision, use the CMSIS intrinsic
     33          	__wfi();
     34          #endif
     35          }
   \   0000000C   0x4770             BX       LR               ;; return
     36          /***********************************************************************/
     37          /*
     38           * Configures the ARM system control register for WAIT (sleep) mode
     39           * and then executes the WFI instruction to enter the mode.
     40           *
     41           * Parameters:
     42           * none
     43           *
     44           * Note: Might want to change this later to allow for passing in a parameter
     45           *       to optionally set the sleep on exit bit.
     46           */
     47          

   \                                 In section .text, align 4, keep-with-next
     48          void wait (void)
     49          {
     50          	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
     51          	 * of deep sleep.
     52          	 */
     53          	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
   \                     wait: (+1)
   \   00000000   0x....             LDR      R0,??DataTable9  ;; 0xe000ed10
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x2204             MOVS     R2,#+4
   \   00000006   0x4391             BICS     R1,R1,R2
   \   00000008   0x6001             STR      R1,[R0, #+0]
     54          
     55          	/* WFI instruction will start entry into WAIT mode */
     56          #ifndef KEIL
     57                  // If not using KEIL's uVision use the standard assembly command
     58          	asm("WFI");
   \   0000000A   0xBF30             WFI
     59          #else
     60                  // If using KEIL's uVision, use the CMSIS intrinsic
     61              __wfi();
     62          #endif
     63          }
   \   0000000C   0x4770             BX       LR               ;; return
     64          /***********************************************************************/
     65          /*
     66           * Change the value of the vector table offset register to the specified value.
     67           *
     68           * Parameters:
     69           * vtor     new value to write to the VTOR
     70           */
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void write_vtor (int vtor)
     73          {
     74                  /* Write the VTOR with the new value */
     75                  SCB_VTOR = vtor;	
   \                     write_vtor: (+1)
   \   00000000   0x....             LDR      R1,??DataTable9_1  ;; 0xe000ed08
   \   00000002   0x6008             STR      R0,[R1, #+0]
     76          }
   \   00000004   0x4770             BX       LR               ;; return
     77          /***********************************************************************/
     78          /*
     79           * Initialize the NVIC to enable the specified IRQ.
     80           * 
     81           * NOTE: The function only initializes the NVIC to enable a single IRQ. 
     82           * Interrupts will also need to be enabled in the ARM core. This can be 
     83           * done using the EnableInterrupts macro.
     84           *
     85           * Parameters:
     86           * irq    irq number to be enabled (the irq number NOT the vector number)
     87           */
     88          
     89          #ifndef CMSIS

   \                                 In section .text, align 4, keep-with-next
     90          void enable_irq (int irq)
     91          {   
   \                     enable_irq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     92              /* Make sure that the IRQ is an allowable number. Up to 32 is 
     93               * used.
     94               *
     95               * NOTE: If you are using the interrupt definitions from the header
     96               * file, you MUST SUBTRACT 16!!!
     97               */
     98              if (irq > 32)
   \   00000002   0x2821             CMP      R0,#+33
   \   00000004   0xDB04             BLT      ??enable_irq_0
     99                  printf("\nERR! Invalid IRQ value passed to enable irq function!\n");
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R0,?_0
   \   0000000A   0x.... 0x....      BL       printf
   \   0000000E   0xBD01             POP      {R0,PC}
    100              else
    101              {
    102                /* Set the ICPR and ISER registers accordingly */
    103                NVIC_ICPR |= 1 << (irq%32);
   \                     ??enable_irq_0: (+1)
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x1102             ASRS     R2,R0,#+4
   \   00000014   0x0ED2             LSRS     R2,R2,#+27
   \   00000016   0x1812             ADDS     R2,R2,R0
   \   00000018   0x1152             ASRS     R2,R2,#+5
   \   0000001A   0x0152             LSLS     R2,R2,#+5
   \   0000001C   0x1A80             SUBS     R0,R0,R2
   \   0000001E   0x4081             LSLS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable9_2  ;; 0xe000e280
   \   00000022   0x6802             LDR      R2,[R0, #+0]
   \   00000024   0x430A             ORRS     R2,R2,R1
   \   00000026   0x6002             STR      R2,[R0, #+0]
    104                NVIC_ISER |= 1 << (irq%32);
   \   00000028   0x....             LDR      R0,??DataTable9_3  ;; 0xe000e100
   \   0000002A   0x6802             LDR      R2,[R0, #+0]
   \   0000002C   0x4311             ORRS     R1,R1,R2
   \   0000002E   0x6001             STR      R1,[R0, #+0]
    105              }
    106          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
    107          /***********************************************************************/
    108          /*
    109           * Initialize the NVIC to disable the specified IRQ.
    110           * 
    111           * NOTE: The function only initializes the NVIC to disable a single IRQ. 
    112           * If you want to disable all interrupts, then use the DisableInterrupts
    113           * macro instead. 
    114           *
    115           * Parameters:
    116           * irq    irq number to be disabled (the irq number NOT the vector number)
    117           */
    118          

   \                                 In section .text, align 4, keep-with-next
    119          void disable_irq (int irq)
    120          {
   \                     disable_irq: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121              
    122              /* Make sure that the IRQ is an allowable number. Right now up to 32 is 
    123               * used.
    124               *
    125               * NOTE: If you are using the interrupt definitions from the header
    126               * file, you MUST SUBTRACT 16!!!
    127               */
    128              if (irq > 32)
   \   00000002   0x2821             CMP      R0,#+33
   \   00000004   0xDB04             BLT      ??disable_irq_0
    129                  printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R0,?_1
   \   0000000A   0x.... 0x....      BL       printf
   \   0000000E   0xBD01             POP      {R0,PC}
    130              else
    131                /* Set the ICER register accordingly */
    132                NVIC_ICER = 1 << (irq%32);
   \                     ??disable_irq_0: (+1)
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x1102             ASRS     R2,R0,#+4
   \   00000014   0x0ED2             LSRS     R2,R2,#+27
   \   00000016   0x1812             ADDS     R2,R2,R0
   \   00000018   0x1152             ASRS     R2,R2,#+5
   \   0000001A   0x0152             LSLS     R2,R2,#+5
   \   0000001C   0x1A80             SUBS     R0,R0,R2
   \   0000001E   0x4081             LSLS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable9_4  ;; 0xe000e180
   \   00000022   0x6001             STR      R1,[R0, #+0]
    133          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    134          /***********************************************************************/
    135          /*
    136           * Initialize the NVIC to set specified IRQ priority.
    137           * 
    138           * NOTE: The function only initializes the NVIC to set a single IRQ priority. 
    139           * Interrupts will also need to be enabled in the ARM core. This can be 
    140           * done using the EnableInterrupts macro.
    141           *
    142           * Parameters:
    143           * irq    irq number to be enabled (the irq number NOT the vector number)
    144           * prio   irq priority. 0-3 levels. 0 max priority
    145           */
    146          

   \                                 In section .text, align 4, keep-with-next
    147          void set_irq_priority (int irq, int prio)
    148          {   
   \                     set_irq_priority: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
    149              /*irq priority pointer*/
    150              uint8 *prio_reg;
    151              uint8 err = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    152              uint8 div = 0;
    153              
    154              /* Make sure that the IRQ is an allowable number. Right now up to 32 is 
    155               * used.
    156               *
    157               * NOTE: If you are using the interrupt definitions from the header
    158               * file, you MUST SUBTRACT 16!!!
    159               */
    160              if (irq > 32)
   \   00000008   0x2D21             CMP      R5,#+33
   \   0000000A   0xDB03             BLT      ??set_irq_priority_0
    161              {
    162                  printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
   \   0000000C   0x....             ADR.N    R0,?_2
   \   0000000E   0x.... 0x....      BL       printf
    163                  err = 1;
   \   00000012   0x2001             MOVS     R0,#+1
    164              }
    165          
    166              if (prio > 3)
   \                     ??set_irq_priority_0: (+1)
   \   00000014   0x2C04             CMP      R4,#+4
   \   00000016   0xDB03             BLT      ??set_irq_priority_1
    167              {
    168                  printf("\nERR! Invalid priority value passed to priority irq function!\n");
   \   00000018   0x....             ADR.N    R0,?_3
   \   0000001A   0x.... 0x....      BL       printf
    169                  err = 1;
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}
    170              }
    171              
    172              if (err != 1)
   \                     ??set_irq_priority_1: (+1)
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD108             BNE      ??set_irq_priority_2
    173              {
    174                  /* Determine which of the NVICIPx corresponds to the irq */
    175                  div = irq / 4;
    176                  prio_reg = (uint8 *)((uint32)&NVIC_IP(div));
    177                  /* Assign priority to IRQ */
    178                  *prio_reg = ( (prio&0x3) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
   \   00000024   0x....             LDR      R0,??DataTable9_5  ;; 0xe000e400
   \   00000026   0x1069             ASRS     R1,R5,#+1
   \   00000028   0x0F89             LSRS     R1,R1,#+30
   \   0000002A   0x1949             ADDS     R1,R1,R5
   \   0000002C   0x0589             LSLS     R1,R1,#+22
   \   0000002E   0x0E09             LSRS     R1,R1,#+24
   \   00000030   0x0089             LSLS     R1,R1,#+2
   \   00000032   0x01A2             LSLS     R2,R4,#+6
   \   00000034   0x5442             STRB     R2,[R0, R1]
    179              }
    180          }
   \                     ??set_irq_priority_2: (+1)
   \   00000036   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 65H, 6EH, 61H, 62H, 6CH, 65H
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000028   0x20 0x69          DC8 20H, 69H, 72H, 71H, 20H, 66H, 75H, 6EH
   \              0x72 0x71    
   \              0x20 0x66    
   \              0x75 0x6E    
   \   00000030   0x63 0x74          DC8 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x69 0x6F    
   \              0x6E 0x21    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 64H, 69H, 73H, 61H, 62H, 6CH
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \   00000028   0x65 0x20          DC8 65H, 20H, 69H, 72H, 71H, 20H, 66H, 75H
   \              0x69 0x72    
   \              0x71 0x20    
   \              0x66 0x75    
   \   00000030   0x6E 0x63          DC8 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 70H, 72H, 69H, 6FH, 72H, 69H
   \              0x70 0x72    
   \              0x69 0x6F    
   \              0x72 0x69    
   \   00000028   0x74 0x79          DC8 74H, 79H, 20H, 69H, 72H, 71H, 20H, 66H
   \              0x20 0x69    
   \              0x72 0x71    
   \              0x20 0x66    
   \   00000030   0x75 0x6E          DC8 75H, 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x21    
   \   00000038   0x0A 0x00          DC8 0AH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 70H, 72H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x72    
   \   00000010   0x69 0x6F          DC8 69H, 6FH, 72H, 69H, 74H, 79H, 20H, 76H
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x76    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 20H, 70H, 61H, 73H
   \              0x75 0x65    
   \              0x20 0x70    
   \              0x61 0x73    
   \   00000020   0x73 0x65          DC8 73H, 65H, 64H, 20H, 74H, 6FH, 20H, 70H
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x70    
   \   00000028   0x72 0x69          DC8 72H, 69H, 6FH, 72H, 69H, 74H, 79H, 20H
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x79 0x20    
   \   00000030   0x69 0x72          DC8 69H, 72H, 71H, 20H, 66H, 75H, 6EH, 63H
   \              0x71 0x20    
   \              0x66 0x75    
   \              0x6E 0x63    
   \   00000038   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0
    181          #endif
    182          /***********************************************************************/
    183          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   disable_irq
         8   -> printf
       8   enable_irq
         8   -> printf
      16   set_irq_priority
        16   -> printf
       0   stop
       0   wait
       0   write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
      56  ?_0
      60  ?_1
      60  ?_2
      64  ?_3
      38  disable_irq
      50  enable_irq
      56  set_irq_priority
      14  stop
      14  wait
       6  write_vtor

 
 442 bytes in section .text
 
 442 bytes of CODE memory

Errors: none
Warnings: none
