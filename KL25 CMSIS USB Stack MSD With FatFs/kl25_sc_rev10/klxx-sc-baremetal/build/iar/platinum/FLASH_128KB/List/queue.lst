###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        30/Nov/2015  21:44:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\common\queue.c
#    Command line =  
#        "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\common\queue.c" -D IAR -D
#        FREEDOM -lCN "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD
#        With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -lB "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -o "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\"
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\projects\platinum\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\common\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\platforms\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\" -Oh
#    List file    =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\queue.lst
#    Object file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\queue.o
#
###############################################################################

D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\common\queue.c
      1          /*
      2           * File:    queue.c
      3           * Purpose: Implement a first in, first out linked list
      4           *
      5           * Notes:   
      6           */
      7          
      8          #include "common.h"
      9          #include "queue.h"
     10          
     11          /********************************************************************/
     12          /* 
     13           * Initialize the specified queue to an empty state
     14           * 
     15           * Parameters:
     16           *  q   Pointer to queue structure
     17           */

   \                                 In section .text, align 2, keep-with-next
     18          void
     19          queue_init(QUEUE *q)
     20          {
     21              q->head = NULL;
   \                     queue_init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
     22          }
   \   00000004   0x4770             BX       LR               ;; return
     23          /********************************************************************/
     24          /* 
     25           * Check for an empty queue
     26           *
     27           * Parameters:
     28           *  q       Pointer to queue structure
     29           * 
     30           * Return Value:
     31           *  1 if Queue is empty
     32           *  0 otherwise
     33           */

   \                                 In section .text, align 2, keep-with-next
     34          int
     35          queue_isempty(QUEUE *q)
     36          {
     37              return (q->head == NULL);
   \                     queue_isempty: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD101             BNE      ??queue_isempty_0
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4770             BX       LR
   \                     ??queue_isempty_0: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x4770             BX       LR               ;; return
     38          }
     39          /********************************************************************/
     40          /* 
     41           * Add an item to the end of the queue 
     42           *
     43           * Parameters:
     44           *  q       Pointer to queue structure
     45           *  node    New node to add to the queue
     46           */

   \                                 In section .text, align 2, keep-with-next
     47          void
     48          queue_add(QUEUE *q, QNODE *node)
     49          {
     50              if (queue_isempty(q))
   \                     queue_add: (+1)
   \   00000000   0x6802             LDR      R2,[R0, #+0]
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD102             BNE      ??queue_add_0
     51              {
     52                  q->head = q->tail = node;
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x6002             STR      R2,[R0, #+0]
   \   0000000A   0xE002             B        ??queue_add_1
     53              }
     54              else
     55              {
     56                  q->tail->next = node;
   \                     ??queue_add_0: (+1)
   \   0000000C   0x6842             LDR      R2,[R0, #+4]
   \   0000000E   0x6011             STR      R1,[R2, #+0]
     57                  q->tail = node;
   \   00000010   0x000A             MOVS     R2,R1
   \                     ??queue_add_1: (+1)
   \   00000012   0x6042             STR      R2,[R0, #+4]
     58              }
     59              
     60              node->next = NULL;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x6008             STR      R0,[R1, #+0]
     61          }
   \   00000018   0x4770             BX       LR               ;; return
     62          
     63          /********************************************************************/
     64          /* 
     65           * Remove and return first (oldest) entry from the specified queue 
     66           *
     67           * Parameters:
     68           *  q       Pointer to queue structure
     69           *
     70           * Return Value:
     71           *  Node at head of queue - NULL if queue is empty
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          QNODE*
     74          queue_remove(QUEUE *q)
     75          {
   \                     queue_remove: (+1)
   \   00000000   0x0001             MOVS     R1,R0
     76              QNODE *oldest;
     77              
     78              if (queue_isempty(q))
   \   00000002   0x6808             LDR      R0,[R1, #+0]
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD001             BEQ      ??queue_remove_0
     79                  return NULL;
     80              
     81              oldest = q->head;
     82              q->head = oldest->next;
   \   00000008   0x6802             LDR      R2,[R0, #+0]
   \   0000000A   0x600A             STR      R2,[R1, #+0]
     83              return oldest;
   \                     ??queue_remove_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
     84          }
     85          /********************************************************************/
     86          /* 
     87           * Peek into the queue and return pointer to first (oldest) entry.
     88           * The queue is not modified
     89           *
     90           * Parameters:
     91           *  q       Pointer to queue structure
     92           *
     93           * Return Value:
     94           *  Node at head of queue - NULL if queue is empty
     95           */

   \                                 In section .text, align 2, keep-with-next
     96          QNODE*
     97          queue_peek(QUEUE *q)
     98          {
     99              return q->head;
   \                     queue_peek: (+1)
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4770             BX       LR               ;; return
    100          }
    101          /********************************************************************/
    102          /* 
    103           * Move entire contents of one queue to the other
    104           *
    105           * Parameters:
    106           *  src     Pointer to source queue
    107           *  dst     Pointer to destination queue
    108           */

   \                                 In section .text, align 2, keep-with-next
    109          void
    110          queue_move(QUEUE *dst, QUEUE *src)
    111          {
    112              if (queue_isempty(src))
   \                     queue_move: (+1)
   \   00000000   0x680A             LDR      R2,[R1, #+0]
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD00A             BEQ      ??queue_move_0
    113                  return;
    114              
    115              if (queue_isempty(dst))
   \   00000006   0x6803             LDR      R3,[R0, #+0]
   \   00000008   0x2B00             CMP      R3,#+0
   \   0000000A   0xD101             BNE      ??queue_move_1
    116                  dst->head = src->head;
   \   0000000C   0x6002             STR      R2,[R0, #+0]
   \   0000000E   0xE001             B        ??queue_move_2
    117              else
    118                  dst->tail->next = src->head;
   \                     ??queue_move_1: (+1)
   \   00000010   0x6843             LDR      R3,[R0, #+4]
   \   00000012   0x601A             STR      R2,[R3, #+0]
    119          
    120              dst->tail = src->tail;
   \                     ??queue_move_2: (+1)
   \   00000014   0x684A             LDR      R2,[R1, #+4]
   \   00000016   0x6042             STR      R2,[R0, #+4]
    121              src->head = NULL;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    122              return;
   \                     ??queue_move_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
    123          }
    124          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   queue_add
       0   queue_init
       0   queue_isempty
       0   queue_move
       0   queue_peek
       0   queue_remove


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      26  queue_add
       6  queue_init
      14  queue_isempty
      30  queue_move
       4  queue_peek
      14  queue_remove

 
 94 bytes in section .text
 
 94 bytes of CODE memory

Errors: none
Warnings: none
