###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        30/Nov/2015  21:44:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\rtc\rtc.c
#    Command line =  
#        "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\rtc\rtc.c" -D IAR -D
#        FREEDOM -lCN "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD
#        With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -lB "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\"
#        -o "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\"
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\projects\platinum\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\common\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\..\..\src\platforms\"
#        -I "D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\..\" -Oh
#    List file    =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\List\rtc.lst
#    Object file  =  
#        D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\platinum\FLASH_128KB\Obj\rtc.o
#
###############################################################################

D:\My Project\ZhiyunKangkai\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\rtc\rtc.c
      1          /*
      2           * File:        rtc.c
      3           * Purpose:     Provide common RTC routines
      4           *
      5           * Notes:       
      6           *              
      7           */
      8          
      9          
     10          #include "common.h"
     11          #include "rtc.h"
     12          
     13          #ifndef CMSIS
     14          #include "arm_cm0.h"
     15          #endif
     16          
     17          /********************************************************************/
     18          /*
     19           * Initialize the RTC
     20           *
     21           *
     22           * Parameters:
     23           *  seconds         Start value of seconds register
     24           *  alarm           Time in seconds of first alarm. Set to 0xFFFFFFFF to effectively disable alarm
     25           *  c_interval      Interval at which to apply time compensation can range from 1 second (0x0) to 256 (0xFF)
     26           *  c_value         Compensation value ranges from -127 32kHz cycles to +128 32 kHz cycles
     27           *                  80h Time prescaler register overflows every 32896 clock cycles.
     28           *                  FFh Time prescaler register overflows every 32769 clock cycles.
     29           *                  00h Time prescaler register overflows every 32768 clock cycles.
     30           *                  01h Time prescaler register overflows every 32767 clock cycles.
     31           *                  7Fh Time prescaler register overflows every 32641 clock cycles.
     32           *  interrupt       TRUE or FALSE
     33           */
     34          

   \                                 In section .text, align 4, keep-with-next
     35          void rtc_init(uint32 seconds, uint32 alarm, uint8 c_interval, uint8 c_value, uint8 interrupt) 
     36          {
   \                     rtc_init: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0x0006             MOVS     R6,R0
   \   00000004   0x000C             MOVS     R4,R1
     37            int i;
     38            
     39            /*enable the clock to SRTC module register space*/
     40            SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
   \   00000006   0x....             LDR      R0,??DataTable16  ;; 0x4004803c
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x2280             MOVS     R2,#+128
   \   0000000C   0x0592             LSLS     R2,R2,#+22       ;; #+536870912
   \   0000000E   0x430A             ORRS     R2,R2,R1
   \   00000010   0x6002             STR      R2,[R0, #+0]
     41            
     42            /*Only VBAT_POR has an effect on the SRTC, RESET to the part does not, so you must manually reset the SRTC to make sure everything is in a known state*/
     43            /*clear the software reset bit*/
     44              printf("Generating SoftWare reset to SRTC\n");
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R0,?_0
   \   00000016   0x.... 0x....      BL       printf
   \   0000001A   0x9F08             LDR      R7,[SP, #+32]
     45          #ifdef CMSIS
     46              NVIC_DisableIRQ((IRQn_Type)interrupt);
     47              NVIC_DisableIRQ((IRQn_Type)(interrupt+1));
     48          #else
     49              disable_irq(interrupt);
   \   0000001C   0x0038             MOVS     R0,R7
   \   0000001E   0x.... 0x....      BL       disable_irq
     50              disable_irq(interrupt+1);
   \   00000022   0x1C78             ADDS     R0,R7,#+1
   \   00000024   0x.... 0x....      BL       disable_irq
     51          #endif
     52              RTC_CR  = RTC_CR_SWR_MASK;
   \   00000028   0x....             LDR      R5,??DataTable16_1  ;; 0x4003d000
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x6128             STR      R0,[R5, #+16]
     53              RTC_CR  &= ~RTC_CR_SWR_MASK;  
   \   0000002E   0x6929             LDR      R1,[R5, #+16]
   \   00000030   0x4381             BICS     R1,R1,R0
   \   00000032   0x6129             STR      R1,[R5, #+16]
     54            
     55              if (RTC_SR & RTC_SR_TIF_MASK){
   \   00000034   0x6969             LDR      R1,[R5, #+20]
   \   00000036   0x4008             ANDS     R0,R0,R1
   \   00000038   0xD005             BEQ      ??rtc_init_0
     56                  RTC_TSR = 0x00000000;   //  this action clears the TIF
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x6028             STR      R0,[R5, #+0]
     57                  printf("RTC Invalid flag was set - Write to TSR done to clears RTC_SR =  %#02X \n",  (RTC_SR) )  ;
   \   0000003E   0x6969             LDR      R1,[R5, #+20]
   \   00000040   0x....             ADR.N    R0,?_1
   \   00000042   0x.... 0x....      BL       printf
     58              }
     59            /*Set time compensation parameters*/
     60            RTC_TCR = RTC_TCR_CIR(c_interval) | RTC_TCR_TCR(c_value);
   \                     ??rtc_init_0: (+1)
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x7900             LDRB     R0,[R0, #+4]
   \   0000004A   0x0200             LSLS     R0,R0,#+8
   \   0000004C   0x4669             MOV      R1,SP
   \   0000004E   0x7A09             LDRB     R1,[R1, #+8]
   \   00000050   0x4301             ORRS     R1,R1,R0
   \   00000052   0x60E9             STR      R1,[R5, #+12]
     61            
     62            /*Enable the counter*/
     63            if (seconds >0) {
   \   00000054   0x2E00             CMP      R6,#+0
   \   00000056   0xD011             BEQ      ??rtc_init_1
     64               /*Enable the interrupt*/
     65               if(interrupt >1){
   \   00000058   0x2F02             CMP      R7,#+2
   \   0000005A   0xDB02             BLT      ??rtc_init_2
     66          #ifdef CMSIS
     67                   NVIC_EnableIRQ((IRQn_Type)interrupt);
     68          #else
     69                  enable_irq(interrupt);
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       enable_irq
     70          #endif
     71               }
     72               /*Enable the oscillator*/
     73              RTC_CR |= RTC_CR_OSCE_MASK;
   \                     ??rtc_init_2: (+1)
   \   00000062   0x6928             LDR      R0,[R5, #+16]
   \   00000064   0x0DA9             LSRS     R1,R5,#+22
   \   00000066   0x4301             ORRS     R1,R1,R0
   \   00000068   0x6129             STR      R1,[R5, #+16]
     74            
     75              /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
     76              for(i=0;i<0x600000;i++);
     77           
     78              RTC_IER |= RTC_IER_TSIE_MASK;
   \   0000006A   0x2010             MOVS     R0,#+16
   \   0000006C   0x69E9             LDR      R1,[R5, #+28]
   \   0000006E   0x4301             ORRS     R1,R1,R0
   \   00000070   0x61E9             STR      R1,[R5, #+28]
     79              RTC_SR |= RTC_SR_TCE_MASK;
   \   00000072   0x6969             LDR      R1,[R5, #+20]
   \   00000074   0x4308             ORRS     R0,R0,R1
   \   00000076   0x6168             STR      R0,[R5, #+20]
     80              /*Configure the timer seconds and alarm registers*/
     81              RTC_TSR = seconds;
   \   00000078   0x602E             STR      R6,[R5, #+0]
   \   0000007A   0xE003             B        ??rtc_init_3
     82          
     83            } else {
     84              RTC_IER &= ~RTC_IER_TSIE_MASK;
   \                     ??rtc_init_1: (+1)
   \   0000007C   0x69E8             LDR      R0,[R5, #+28]
   \   0000007E   0x2110             MOVS     R1,#+16
   \   00000080   0x4388             BICS     R0,R0,R1
   \   00000082   0x61E8             STR      R0,[R5, #+28]
     85            }
     86            if (alarm >0) {
   \                     ??rtc_init_3: (+1)
   \   00000084   0x2C00             CMP      R4,#+0
   \   00000086   0x69E8             LDR      R0,[R5, #+28]
   \   00000088   0xD011             BEQ      ??rtc_init_4
     87              RTC_IER |= RTC_IER_TAIE_MASK;
   \   0000008A   0x2104             MOVS     R1,#+4
   \   0000008C   0x4301             ORRS     R1,R1,R0
   \   0000008E   0x61E9             STR      R1,[R5, #+28]
     88              RTC_SR |= RTC_SR_TCE_MASK;
   \   00000090   0x6968             LDR      R0,[R5, #+20]
   \   00000092   0x2110             MOVS     R1,#+16
   \   00000094   0x4301             ORRS     R1,R1,R0
   \   00000096   0x6169             STR      R1,[R5, #+20]
     89              /*Configure the timer seconds and alarm registers*/
     90              RTC_TAR = alarm;
   \   00000098   0x60AC             STR      R4,[R5, #+8]
     91               /*Enable the interrupt*/
     92               if(interrupt >1){
   \   0000009A   0x2F02             CMP      R7,#+2
   \   0000009C   0xDB02             BLT      ??rtc_init_5
     93          #ifdef CMSIS
     94                   NVIC_EnableIRQ((IRQn_Type)interrupt);
     95          #else
     96                  enable_irq(interrupt);
   \   0000009E   0x0038             MOVS     R0,R7
   \   000000A0   0x.... 0x....      BL       enable_irq
     97          #endif
     98               }
     99               /*Enable the oscillator*/
    100              RTC_CR |= RTC_CR_OSCE_MASK;
   \                     ??rtc_init_5: (+1)
   \   000000A4   0x6928             LDR      R0,[R5, #+16]
   \   000000A6   0x0DA9             LSRS     R1,R5,#+22
   \   000000A8   0x4301             ORRS     R1,R1,R0
   \   000000AA   0x6129             STR      R1,[R5, #+16]
    101            
    102              /*Wait to all the 32 kHz to stabilize, refer to the crystal startup time in the crystal datasheet*/
    103              for(i=0;i<0x600000;i++);
   \   000000AC   0xE002             B        ??rtc_init_6
    104            } else {
    105              RTC_IER &= ~RTC_IER_TAIE_MASK;
   \                     ??rtc_init_4: (+1)
   \   000000AE   0x2104             MOVS     R1,#+4
   \   000000B0   0x4388             BICS     R0,R0,R1
   \   000000B2   0x61E8             STR      R0,[R5, #+28]
    106            }
    107            rtc_reg_report();
   \                     ??rtc_init_6: (+1)
   \   000000B4   0x.... 0x....      BL       rtc_reg_report
    108          }
   \   000000B8   0xB003             ADD      SP,SP,#+12
   \   000000BA   0xBDF0             POP      {R4-R7,PC}       ;; return
    109          

   \                                 In section .text, align 4, keep-with-next
    110          void rtc_reg_report (void) {
   \                     rtc_reg_report: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    111             printf("RTC_TSR    = 0x%02X,    ",    (RTC_TSR)) ;
   \   00000002   0x....             LDR      R4,??DataTable16_1  ;; 0x4003d000
   \   00000004   0x6821             LDR      R1,[R4, #+0]
   \   00000006   0xBF00             Nop      
   \   00000008   0x....             ADR.N    R0,?_2
   \   0000000A   0x.... 0x....      BL       printf
    112            printf("RTC_TPR    = 0x%02X\n",       (RTC_TPR)) ;
   \   0000000E   0x6861             LDR      R1,[R4, #+4]
   \   00000010   0x....             ADR.N    R0,?_3
   \   00000012   0x.... 0x....      BL       printf
    113            printf("RTC_TAR    = 0x%02X,    ",    (RTC_TAR)) ;
   \   00000016   0x68A1             LDR      R1,[R4, #+8]
   \   00000018   0x....             ADR.N    R0,?_4
   \   0000001A   0x.... 0x....      BL       printf
    114            printf("RTC_TCR    = 0x%02X\n",       (RTC_TCR)) ;
   \   0000001E   0x68E1             LDR      R1,[R4, #+12]
   \   00000020   0x....             ADR.N    R0,?_5
   \   00000022   0x.... 0x....      BL       printf
    115            printf("RTC_CR     = 0x%02X,    ",    (RTC_CR)) ;
   \   00000026   0x6921             LDR      R1,[R4, #+16]
   \   00000028   0x....             ADR.N    R0,?_6
   \   0000002A   0x.... 0x....      BL       printf
    116            printf("RTC_SR     = 0x%02X\n",       (RTC_SR)) ;
   \   0000002E   0x6961             LDR      R1,[R4, #+20]
   \   00000030   0x....             ADR.N    R0,?_7
   \   00000032   0x.... 0x....      BL       printf
    117            printf("RTC_LR     = 0x%02X,    ",    (RTC_LR)) ;
   \   00000036   0x69A1             LDR      R1,[R4, #+24]
   \   00000038   0x....             ADR.N    R0,?_8
   \   0000003A   0x.... 0x....      BL       printf
    118            printf("RTC_IER    = 0x%02X\n",       (RTC_IER)) ;
   \   0000003E   0x69E1             LDR      R1,[R4, #+28]
   \   00000040   0x....             ADR.N    R0,?_9
   \   00000042   0x.... 0x....      BL       printf
    119          }
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
    120          

   \                                 In section .text, align 4, keep-with-next
    121          void rtc_isr(void) 
    122          {
   \                     rtc_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    123             GPIOB_PSOR = 0x00080000;           // set Port B 19 indicate wakeup
   \   00000002   0x2080             MOVS     R0,#+128
   \   00000004   0x0300             LSLS     R0,R0,#+12       ;; #+524288
   \   00000006   0x....             LDR      R1,??DataTable16_2  ;; 0x400ff044
   \   00000008   0x6008             STR      R0,[R1, #+0]
    124             
    125             if((RTC_SR & RTC_SR_TIF_MASK)== 0x01)
   \   0000000A   0x....             LDR      R4,??DataTable16_1  ;; 0x4003d000
   \   0000000C   0x6960             LDR      R0,[R4, #+20]
   \   0000000E   0x07C0             LSLS     R0,R0,#+31
   \   00000010   0xD509             BPL      ??rtc_isr_0
    126               {
    127                 printf("SRTC time invalid interrupt entered...\r\n");
   \   00000012   0xBF00             Nop      
   \   00000014   0x....             ADR.N    R0,?_10
   \   00000016   0x.... 0x....      BL       printf
    128             	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
   \   0000001A   0x6960             LDR      R0,[R4, #+20]
   \   0000001C   0x0740             LSLS     R0,R0,#+29
   \   0000001E   0x0F40             LSRS     R0,R0,#+29
   \   00000020   0x6160             STR      R0,[R4, #+20]
    129             	   RTC_TSR = 0x00000000;  //clear TIF 
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x6020             STR      R0,[R4, #+0]
    130          
    131          
    132               }	
    133             if((RTC_SR & RTC_SR_TOF_MASK) == 0x02)
   \                     ??rtc_isr_0: (+1)
   \   00000026   0x6960             LDR      R0,[R4, #+20]
   \   00000028   0x0780             LSLS     R0,R0,#+30
   \   0000002A   0xD508             BPL      ??rtc_isr_1
    134             {
    135             	   printf("SRTC time overflow interrupt entered...\r\n");
   \   0000002C   0x....             ADR.N    R0,?_11
   \   0000002E   0x.... 0x....      BL       printf
    136             	   RTC_SR &= 0x07;  //clear TCE, or RTC_TSR can  not be written
   \   00000032   0x6960             LDR      R0,[R4, #+20]
   \   00000034   0x0740             LSLS     R0,R0,#+29
   \   00000036   0x0F40             LSRS     R0,R0,#+29
   \   00000038   0x6160             STR      R0,[R4, #+20]
    137             	   RTC_TSR = 0x00000000;  //clear TOF
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x6020             STR      R0,[R4, #+0]
    138             }	 	
    139             if((RTC_SR & RTC_SR_TAF_MASK) == 0x04)
   \                     ??rtc_isr_1: (+1)
   \   0000003E   0x6960             LDR      R0,[R4, #+20]
   \   00000040   0x0740             LSLS     R0,R0,#+29
   \   00000042   0xD509             BPL      ??rtc_isr_2
    140             {
    141             	   printf("SRTC alarm interrupt entered...\r\n");
   \   00000044   0x....             ADR.N    R0,?_12
   \   00000046   0x.... 0x....      BL       printf
    142                     printf("Time Seconds Register value is: %i\n", RTC_TSR);
   \   0000004A   0x6821             LDR      R1,[R4, #+0]
   \   0000004C   0x....             ADR.N    R0,?_13
   \   0000004E   0x.... 0x....      BL       printf
    143             	   RTC_TAR += 11;// Write new alarm value, to generate an alarm every second add 1
   \   00000052   0x68A0             LDR      R0,[R4, #+8]
   \   00000054   0x300B             ADDS     R0,R0,#+11
   \   00000056   0x60A0             STR      R0,[R4, #+8]
    144             }	
    145              return;
   \                     ??rtc_isr_2: (+1)
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
    146          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x4003D000         DC32     0x4003d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0x400FF044         DC32     0x400ff044

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x47 0x65          DC8 "Generating SoftWare reset to SRTC\012"
   \              0x6E 0x65    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x53    
   \              0x6F 0x66    
   \              0x74 0x57    
   \              0x61 0x72    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x74 0x6F    
   \              0x20 0x53    
   \              0x52 0x54    
   \              0x43 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x52 0x54          DC8 52H, 54H, 43H, 20H, 49H, 6EH, 76H, 61H
   \              0x43 0x20    
   \              0x49 0x6E    
   \              0x76 0x61    
   \   00000008   0x6C 0x69          DC8 6CH, 69H, 64H, 20H, 66H, 6CH, 61H, 67H
   \              0x64 0x20    
   \              0x66 0x6C    
   \              0x61 0x67    
   \   00000010   0x20 0x77          DC8 20H, 77H, 61H, 73H, 20H, 73H, 65H, 74H
   \              0x61 0x73    
   \              0x20 0x73    
   \              0x65 0x74    
   \   00000018   0x20 0x2D          DC8 20H, 2DH, 20H, 57H, 72H, 69H, 74H, 65H
   \              0x20 0x57    
   \              0x72 0x69    
   \              0x74 0x65    
   \   00000020   0x20 0x74          DC8 20H, 74H, 6FH, 20H, 54H, 53H, 52H, 20H
   \              0x6F 0x20    
   \              0x54 0x53    
   \              0x52 0x20    
   \   00000028   0x64 0x6F          DC8 64H, 6FH, 6EH, 65H, 20H, 74H, 6FH, 20H
   \              0x6E 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000030   0x63 0x6C          DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 52H
   \              0x65 0x61    
   \              0x72 0x73    
   \              0x20 0x52    
   \   00000038   0x54 0x43          DC8 54H, 43H, 5FH, 53H, 52H, 20H, 3DH, 20H
   \              0x5F 0x53    
   \              0x52 0x20    
   \              0x3D 0x20    
   \   00000040   0x20 0x25          DC8 20H, 25H, 23H, 30H, 32H, 58H, 20H, 0AH
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0A    
   \   00000048   0x00               DC8 0
   \   00000049   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x52 0x54          DC8 "RTC_TSR    = 0x%02X,    "
   \              0x43 0x5F    
   \              0x54 0x53    
   \              0x52 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x2C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x52 0x54          DC8 "RTC_TPR    = 0x%02X\012"
   \              0x43 0x5F    
   \              0x54 0x50    
   \              0x52 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x52 0x54          DC8 "RTC_TAR    = 0x%02X,    "
   \              0x43 0x5F    
   \              0x54 0x41    
   \              0x52 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x2C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x52 0x54          DC8 "RTC_TCR    = 0x%02X\012"
   \              0x43 0x5F    
   \              0x54 0x43    
   \              0x52 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x52 0x54          DC8 "RTC_CR     = 0x%02X,    "
   \              0x43 0x5F    
   \              0x43 0x52    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x2C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x52 0x54          DC8 "RTC_SR     = 0x%02X\012"
   \              0x43 0x5F    
   \              0x53 0x52    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x52 0x54          DC8 "RTC_LR     = 0x%02X,    "
   \              0x43 0x5F    
   \              0x4C 0x52    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x2C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x52 0x54          DC8 "RTC_IER    = 0x%02X\012"
   \              0x43 0x5F    
   \              0x49 0x45    
   \              0x52 0x20    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x58 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x53 0x52          DC8 "SRTC time invalid interrupt entered...\015\012"
   \              0x54 0x43    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x72    
   \              0x75 0x70    
   \              0x74 0x20    
   \              0x65 0x6E    
   \              0x74 0x65    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x53 0x52          DC8 "SRTC time overflow interrupt entered...\015\012"
   \              0x54 0x43    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x66 0x6C    
   \              0x6F 0x77    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x70 0x74    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x53 0x52          DC8 "SRTC alarm interrupt entered...\015\012"
   \              0x54 0x43    
   \              0x20 0x61    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x20 0x69    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x72 0x75    
   \              0x70 0x74    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x54 0x69          DC8 "Time Seconds Register value is: %i\012"
   \              0x6D 0x65    
   \              0x20 0x53    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x64 0x73    
   \              0x20 0x52    
   \              0x65 0x67    
   \              0x69 0x73    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x3A 0x20    
   \              0x25 0x69    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   rtc_init
        32   -> disable_irq
        32   -> enable_irq
        32   -> printf
        32   -> rtc_reg_report
       8   rtc_isr
         8   -> printf
       8   rtc_reg_report
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_2
      36  ?_0
      76  ?_1
      44  ?_10
      44  ?_11
      36  ?_12
      36  ?_13
      28  ?_2
      24  ?_3
      28  ?_4
      24  ?_5
      28  ?_6
      24  ?_7
      28  ?_8
      24  ?_9
     188  rtc_init
      90  rtc_isr
      72  rtc_reg_report

 
 842 bytes in section .text
 
 842 bytes of CODE memory

Errors: none
Warnings: none
