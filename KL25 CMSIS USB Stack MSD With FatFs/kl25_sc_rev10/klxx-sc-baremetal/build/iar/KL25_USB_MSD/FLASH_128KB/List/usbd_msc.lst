###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        18/Feb/2016  22:53:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\src\usbd_msc.c
#    Command line =  
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\src\usbd_msc.c" -D IAR -D FREEDOM -D SD_DISK_ENABLE -lCN
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -lB "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -o "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\common\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\i2c\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\platforms\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\" -I
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\inc\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack
#        MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\Porting use\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB
#        Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\SPI_SDCard\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\fsl_sd_disk\"
#        -Ol
#    List file    =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\usbd_msc.lst
#    Object file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\usbd_msc.o
#
###############################################################################

D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\projects\KL25_USB_MSD\CMSIS USB Stack\src\usbd_msc.c
      1          /* CMSIS-DAP Interface Firmware
      2           * Copyright (c) 2009-2013 ARM Limited
      3           *
      4           * Licensed under the Apache License, Version 2.0 (the "License");
      5           * you may not use this file except in compliance with the License.
      6           * You may obtain a copy of the License at
      7           *
      8           *     http://www.apache.org/licenses/LICENSE-2.0
      9           *
     10           * Unless required by applicable law or agreed to in writing, software
     11           * distributed under the License is distributed on an "AS IS" BASIS,
     12           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     13           * See the License for the specific language governing permissions and
     14           * limitations under the License.
     15           */
     16          //#include <RTL.h>
     17          #include <rl_usb.h>
     18          #include <string.h>
     19          #include "usb_for_lib.h"
     20          

   \                                 In section .bss, align 4
     21          BOOL        USBD_MSC_MediaReady   = __FALSE;
   \                     USBD_MSC_MediaReady:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          BOOL        USBD_MSC_ReadOnly     = __FALSE;
   \                     USBD_MSC_ReadOnly:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          U32         USBD_MSC_MemorySize;
   \                     USBD_MSC_MemorySize:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          U32         USBD_MSC_BlockSize;
   \                     USBD_MSC_BlockSize:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          U32         USBD_MSC_BlockGroup;
   \                     USBD_MSC_BlockGroup:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          U32         USBD_MSC_BlockCount;
   \                     USBD_MSC_BlockCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          U8         *USBD_MSC_BlockBuf;
   \                     USBD_MSC_BlockBuf:
   \   00000000                      DS8 4
     28          

   \                                 In section .bss, align 4
     29          MSC_CBW     USBD_MSC_CBW;                  /* Command Block Wrapper */
   \                     USBD_MSC_CBW:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     30          MSC_CSW     USBD_MSC_CSW;                  /* Command Status Wrapper */
   \                     USBD_MSC_CSW:
   \   00000000                      DS8 16
     31          

   \                                 In section .bss, align 4
     32          BOOL        USBD_MSC_MediaReadyEx = __FALSE; /* Previous state of Media ready */
   \                     USBD_MSC_MediaReadyEx:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     33          BOOL        MemOK;                         /* Memory OK */
   \                     MemOK:
   \   00000000                      DS8 4
     34          

   \                                 In section .bss, align 4
     35          U32         Block;                         /* R/W Block  */
   \                     Block:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     36          U32         Offset;                        /* R/W Offset */
   \                     Offset:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     37          U32         Length;                        /* R/W Length */
   \                     Length:
   \   00000000                      DS8 4
     38          

   \                                 In section .bss, align 1
     39          U8          BulkStage;                     /* Bulk Stage */
   \                     BulkStage:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     40          U32         BulkLen;                       /* Bulk In/Out Length */
   \                     BulkLen:
   \   00000000                      DS8 4
     41          
     42          
     43          /* Dummy Weak Functions that need to be provided by user */

   \                                 In section .text, align 2, keep-with-next
     44          __weak void usbd_msc_init       ()                                      {};
   \                     usbd_msc_init: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     45          __weak void usbd_msc_read_sect  (U32 block, U8 *buf, U32 num_of_blocks) {};
   \                     usbd_msc_read_sect: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     46          __weak void usbd_msc_write_sect (U32 block, U8 *buf, U32 num_of_blocks) {};
   \                     usbd_msc_write_sect: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
     47          __weak void usbd_msc_start_stop (BOOL start)                            {};
   \                     usbd_msc_start_stop: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     48          
     49          
     50          /*
     51           *  Set Stall for USB Device MSC Endpoint
     52           *    Parameters:      EPNum: USB Device Endpoint Number
     53           *                       EPNum.0..3: Address
     54           *                       EPNum.7:    Dir
     55           *    Return Value:    None
     56           */
     57          

   \                                 In section .text, align 2, keep-with-next
     58          void USBD_MSC_SetStallEP (U32 EPNum) {     /* set EP halt status according stall status */
   \                     USBD_MSC_SetStallEP: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     59            USBD_SetStallEP(EPNum);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       USBD_SetStallEP
     60            USBD_EndPointHalt  |=  (EPNum & 0x80) ? ((1 << 16) << (EPNum & 0x0F)) : (1 << EPNum);
   \   0000000A   0x0620             LSLS     R0,R4,#+24
   \   0000000C   0xD505             BPL      ??USBD_MSC_SetStallEP_0
   \   0000000E   0x2080             MOVS     R0,#+128
   \   00000010   0x0240             LSLS     R0,R0,#+9        ;; #+65536
   \   00000012   0x0721             LSLS     R1,R4,#+28       ;; ZeroExtS R1,R4,#+28,#+28
   \   00000014   0x0F09             LSRS     R1,R1,#+28
   \   00000016   0x4088             LSLS     R0,R0,R1
   \   00000018   0xE001             B        ??USBD_MSC_SetStallEP_1
   \                     ??USBD_MSC_SetStallEP_0: (+1)
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x40A0             LSLS     R0,R0,R4
   \                     ??USBD_MSC_SetStallEP_1: (+1)
   \   0000001E   0x....             LDR      R1,??DataTable5
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x4308             ORRS     R0,R0,R1
   \   00000024   0x....             LDR      R1,??DataTable5
   \   00000026   0x6008             STR      R0,[R1, #+0]
     61          }
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
     62          
     63          
     64          /*
     65           *  Clear Stall for USB Device MSC Endpoint
     66           *    Parameters:      EPNum: USB Device Endpoint Number
     67           *                       EPNum.0..3: Address
     68           *                       EPNum.7:    Dir
     69           *    Return Value:    None
     70           */
     71          

   \                                 In section .text, align 2, keep-with-next
     72          void USBD_MSC_ClrStallEP (U32 EPNum) {     /* clear EP halt status according stall status */
   \                     USBD_MSC_ClrStallEP: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     73            U32 n,m;
     74          
     75            n = USBD_SetupPacket.wIndexL & 0x8F;
   \   00000002   0x....             LDR      R0,??DataTable5_1
   \   00000004   0x7901             LDRB     R1,[R0, #+4]
   \   00000006   0x208F             MOVS     R0,#+143
   \   00000008   0x4008             ANDS     R0,R0,R1
     76            m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
   \   0000000A   0x0601             LSLS     R1,R0,#+24
   \   0000000C   0xD506             BPL      ??USBD_MSC_ClrStallEP_0
   \   0000000E   0x2180             MOVS     R1,#+128
   \   00000010   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   00000012   0x0002             MOVS     R2,R0
   \   00000014   0x0712             LSLS     R2,R2,#+28       ;; ZeroExtS R2,R2,#+28,#+28
   \   00000016   0x0F12             LSRS     R2,R2,#+28
   \   00000018   0x4091             LSLS     R1,R1,R2
   \   0000001A   0xE001             B        ??USBD_MSC_ClrStallEP_1
   \                     ??USBD_MSC_ClrStallEP_0: (+1)
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x4081             LSLS     R1,R1,R0
     77            if ((n == (usbd_msc_ep_bulkin | 0x80)) && ((USBD_EndPointHalt & m) != 0)) {
   \                     ??USBD_MSC_ClrStallEP_1: (+1)
   \   00000020   0x....             LDR      R2,??DataTable5_2
   \   00000022   0x7812             LDRB     R2,[R2, #+0]
   \   00000024   0x2380             MOVS     R3,#+128
   \   00000026   0x4313             ORRS     R3,R3,R2
   \   00000028   0x4298             CMP      R0,R3
   \   0000002A   0xD111             BNE      ??USBD_MSC_ClrStallEP_2
   \   0000002C   0x....             LDR      R0,??DataTable5
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x4001             ANDS     R1,R1,R0
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xD00C             BEQ      ??USBD_MSC_ClrStallEP_2
     78              /* Compliance Test: rewrite CSW after unstall */
     79              if (USBD_MSC_CSW.dSignature == MSC_CSW_Signature) {
   \   00000036   0x....             LDR      R0,??DataTable5_3
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x....             LDR      R1,??DataTable5_4  ;; 0x53425355
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD107             BNE      ??USBD_MSC_ClrStallEP_2
     80                USBD_WriteEP((usbd_msc_ep_bulkin | 0x80), (U8 *)&USBD_MSC_CSW, sizeof(USBD_MSC_CSW));
   \   00000040   0x220D             MOVS     R2,#+13
   \   00000042   0x....             LDR      R1,??DataTable5_3
   \   00000044   0x....             LDR      R0,??DataTable5_2
   \   00000046   0x7803             LDRB     R3,[R0, #+0]
   \   00000048   0x2080             MOVS     R0,#+128
   \   0000004A   0x4318             ORRS     R0,R0,R3
   \   0000004C   0x.... 0x....      BL       USBD_WriteEP
     81              }
     82            }
     83          }
   \                     ??USBD_MSC_ClrStallEP_2: (+1)
   \   00000050   0xBD01             POP      {R0,PC}          ;; return
     84          
     85          
     86          /*
     87           *  USB Device MSC Mass Storage Reset Request Callback
     88           *   Called automatically on USB Device Mass Storage Reset Request
     89           *    Parameters:      None
     90           *    Return Value:    TRUE - Success, FALSE - Error
     91           */
     92          

   \                                 In section .text, align 2, keep-with-next
     93          BOOL USBD_MSC_Reset (void) {
     94          
     95            USBD_EndPointStall = 0x00000000;         /* EP must stay stalled */
   \                     USBD_MSC_Reset: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable5_5
   \   00000004   0x6008             STR      R0,[R1, #+0]
     96            USBD_MSC_CSW.dSignature = 0;             /* invalid signature */
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR      R1,??DataTable5_3
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     97          
     98            BulkStage = MSC_BS_CBW;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x....             LDR      R1,??DataTable6
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     99          
    100            return (__TRUE);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x4770             BX       LR               ;; return
    101          }
    102          
    103          
    104          /*
    105           *  USB Device MSC Get Max LUN Request Callback
    106           *   Called automatically on USB Device Get Max LUN Request
    107           *    Parameters:      None
    108           *    Return Value:    TRUE - Success, FALSE - Error
    109           */
    110          

   \                                 In section .text, align 2, keep-with-next
    111          BOOL USBD_MSC_GetMaxLUN (void) {
    112          
    113            USBD_EP0Buf[0] = 0;                      /* one LUN associated with this device */
   \                     USBD_MSC_GetMaxLUN: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR      R1,??DataTable6_1
   \   00000004   0x7008             STRB     R0,[R1, #+0]
    114            return (__TRUE);
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x4770             BX       LR               ;; return
    115          }
    116          
    117          
    118          /*
    119           *  USB Device Check Media Ready
    120           *    Parameters:      None
    121           *    Return Value:    TRUE - Success, FALSE - Error
    122           */
    123          

   \                                 In section .text, align 2, keep-with-next
    124          BOOL USBD_MSC_CheckMedia (void) {
   \                     USBD_MSC_CheckMedia: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    125          
    126            USBD_MSC_MediaReadyEx = USBD_MSC_MediaReady;
   \   00000002   0x....             LDR      R0,??DataTable5_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable5_7
   \   00000008   0x6008             STR      R0,[R1, #+0]
    127            if (!USBD_MSC_MediaReady) {
   \   0000000A   0x....             LDR      R0,??DataTable5_6
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD119             BNE      ??USBD_MSC_CheckMedia_0
    128              if (USBD_MSC_CBW.dDataLength) {
   \   00000012   0x....             LDR      R0,??DataTable5_8
   \   00000014   0x6880             LDR      R0,[R0, #+8]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD00E             BEQ      ??USBD_MSC_CheckMedia_1
    129                if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {
   \   0000001A   0x....             LDR      R0,??DataTable5_8
   \   0000001C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000001E   0x0600             LSLS     R0,R0,#+24
   \   00000020   0xD506             BPL      ??USBD_MSC_CheckMedia_2
    130                  USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \   00000022   0x....             LDR      R0,??DataTable5_2
   \   00000024   0x7801             LDRB     R1,[R0, #+0]
   \   00000026   0x2080             MOVS     R0,#+128
   \   00000028   0x4308             ORRS     R0,R0,R1
   \   0000002A   0x.... 0x....      BL       USBD_MSC_SetStallEP
   \   0000002E   0xE003             B        ??USBD_MSC_CheckMedia_1
    131                } else {
    132                  USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \                     ??USBD_MSC_CheckMedia_2: (+1)
   \   00000030   0x....             LDR      R0,??DataTable5_9
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       USBD_MSC_SetStallEP
    133                }
    134              }
    135              USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \                     ??USBD_MSC_CheckMedia_1: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x....             LDR      R1,??DataTable5_3
   \   0000003C   0x7308             STRB     R0,[R1, #+12]
    136              USBD_MSC_SetCSW();
   \   0000003E   0x.... 0x....      BL       USBD_MSC_SetCSW
    137              return (__FALSE);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xE000             B        ??USBD_MSC_CheckMedia_3
    138            }
    139            return (__TRUE);
   \                     ??USBD_MSC_CheckMedia_0: (+1)
   \   00000046   0x2001             MOVS     R0,#+1
   \                     ??USBD_MSC_CheckMedia_3: (+1)
   \   00000048   0xBD02             POP      {R1,PC}          ;; return
    140          }
    141          
    142          
    143          /*
    144           *  USB Device MSC Memory Read Callback
    145           *   Called automatically on USB Device Memory Read Event
    146           *    Parameters:      None
    147           *    Return Value:    None
    148           */
    149          

   \                                 In section .text, align 2, keep-with-next
    150          void USBD_MSC_MemoryRead (void) {
   \                     USBD_MSC_MemoryRead: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    151            U32 n, m;
    152          
    153            if (Block >= USBD_MSC_BlockCount) {
   \   00000002   0x....             LDR      R0,??DataTable6_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable6_3
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD30C             BCC      ??USBD_MSC_MemoryRead_0
    154              n = 0;
   \   0000000E   0x2400             MOVS     R4,#+0
    155              USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \   00000010   0x....             LDR      R0,??DataTable5_2
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0x2080             MOVS     R0,#+128
   \   00000016   0x4308             ORRS     R0,R0,R1
   \   00000018   0x.... 0x....      BL       USBD_MSC_SetStallEP
    156              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR      R1,??DataTable5_3
   \   00000020   0x7308             STRB     R0,[R1, #+12]
    157              USBD_MSC_SetCSW();
   \   00000022   0x.... 0x....      BL       USBD_MSC_SetCSW
   \   00000026   0xE012             B        ??USBD_MSC_MemoryRead_1
    158            } else {
    159              if (Length > usbd_msc_maxpacketsize[USBD_HighSpeed]) {
   \                     ??USBD_MSC_MemoryRead_0: (+1)
   \   00000028   0x....             LDR      R0,??DataTable6_4
   \   0000002A   0x....             LDR      R1,??DataTable6_5
   \   0000002C   0x7809             LDRB     R1,[R1, #+0]
   \   0000002E   0x2202             MOVS     R2,#+2
   \   00000030   0x4351             MULS     R1,R2,R1
   \   00000032   0x5A40             LDRH     R0,[R0, R1]
   \   00000034   0x....             LDR      R1,??DataTable6_6
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD206             BCS      ??USBD_MSC_MemoryRead_2
    160                n = usbd_msc_maxpacketsize[USBD_HighSpeed];
   \   0000003C   0x....             LDR      R0,??DataTable6_4
   \   0000003E   0x....             LDR      R1,??DataTable6_5
   \   00000040   0x7809             LDRB     R1,[R1, #+0]
   \   00000042   0x2202             MOVS     R2,#+2
   \   00000044   0x4351             MULS     R1,R2,R1
   \   00000046   0x5A44             LDRH     R4,[R0, R1]
   \   00000048   0xE001             B        ??USBD_MSC_MemoryRead_1
    161              } else {
    162                n = Length;
   \                     ??USBD_MSC_MemoryRead_2: (+1)
   \   0000004A   0x....             LDR      R0,??DataTable6_6
   \   0000004C   0x6804             LDR      R4,[R0, #+0]
    163              }
    164            }
    165          
    166            if (!USBD_MSC_CheckMedia()) {
   \                     ??USBD_MSC_MemoryRead_1: (+1)
   \   0000004E   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD100             BNE      ??USBD_MSC_MemoryRead_3
    167              n = 0;
   \   00000056   0x2400             MOVS     R4,#+0
    168            }
    169          
    170            if ((Offset == 0) && (n != 0)) {
   \                     ??USBD_MSC_MemoryRead_3: (+1)
   \   00000058   0x....             LDR      R0,??DataTable6_7
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD118             BNE      ??USBD_MSC_MemoryRead_4
   \   00000060   0x2C00             CMP      R4,#+0
   \   00000062   0xD016             BEQ      ??USBD_MSC_MemoryRead_4
    171              m = (Length + (USBD_MSC_BlockSize-1)) / USBD_MSC_BlockSize;
   \   00000064   0x....             LDR      R0,??DataTable6_6
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x....             LDR      R1,??DataTable6_8
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0x1840             ADDS     R0,R0,R1
   \   0000006E   0x1E40             SUBS     R0,R0,#+1
   \   00000070   0x....             LDR      R1,??DataTable6_8
   \   00000072   0x6809             LDR      R1,[R1, #+0]
   \   00000074   0x.... 0x....      BL       __aeabi_uidiv
    172              if (m > USBD_MSC_BlockGroup) {
   \   00000078   0x....             LDR      R1,??DataTable6_9
   \   0000007A   0x6809             LDR      R1,[R1, #+0]
   \   0000007C   0x4281             CMP      R1,R0
   \   0000007E   0xD201             BCS      ??USBD_MSC_MemoryRead_5
    173                m = USBD_MSC_BlockGroup;
   \   00000080   0x....             LDR      R0,??DataTable6_9
   \   00000082   0x6800             LDR      R0,[R0, #+0]
    174              }
    175              usbd_msc_read_sect(Block, USBD_MSC_BlockBuf, m);
   \                     ??USBD_MSC_MemoryRead_5: (+1)
   \   00000084   0x0002             MOVS     R2,R0
   \   00000086   0x....             LDR      R0,??DataTable6_10
   \   00000088   0x6801             LDR      R1,[R0, #+0]
   \   0000008A   0x....             LDR      R0,??DataTable6_2
   \   0000008C   0x6800             LDR      R0,[R0, #+0]
   \   0000008E   0x.... 0x....      BL       usbd_msc_read_sect
    176            }
    177          
    178            if (n) {
   \                     ??USBD_MSC_MemoryRead_4: (+1)
   \   00000092   0x2C00             CMP      R4,#+0
   \   00000094   0xD015             BEQ      ??USBD_MSC_MemoryRead_6
    179              USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, &USBD_MSC_BlockBuf[Offset], n);
   \   00000096   0x0022             MOVS     R2,R4
   \   00000098   0x....             LDR      R0,??DataTable6_10
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x....             LDR      R1,??DataTable6_7
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0x1841             ADDS     R1,R0,R1
   \   000000A2   0x....             LDR      R0,??DataTable5_2
   \   000000A4   0x7803             LDRB     R3,[R0, #+0]
   \   000000A6   0x2080             MOVS     R0,#+128
   \   000000A8   0x4318             ORRS     R0,R0,R3
   \   000000AA   0x.... 0x....      BL       USBD_WriteEP
    180              Offset += n;
   \   000000AE   0x....             LDR      R0,??DataTable6_7
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x1900             ADDS     R0,R0,R4
   \   000000B4   0x....             LDR      R1,??DataTable6_7
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    181              Length -= n;
   \   000000B8   0x....             LDR      R0,??DataTable6_6
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x1B00             SUBS     R0,R0,R4
   \   000000BE   0x....             LDR      R1,??DataTable6_6
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    182            }
    183          
    184            if (Offset == USBD_MSC_BlockGroup*USBD_MSC_BlockSize) {
   \                     ??USBD_MSC_MemoryRead_6: (+1)
   \   000000C2   0x....             LDR      R0,??DataTable6_7
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x....             LDR      R1,??DataTable6_9
   \   000000C8   0x6809             LDR      R1,[R1, #+0]
   \   000000CA   0x....             LDR      R2,??DataTable6_8
   \   000000CC   0x6812             LDR      R2,[R2, #+0]
   \   000000CE   0x4351             MULS     R1,R2,R1
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xD109             BNE      ??USBD_MSC_MemoryRead_7
    185              Offset = 0;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0x....             LDR      R1,??DataTable6_7
   \   000000D8   0x6008             STR      R0,[R1, #+0]
    186              Block += USBD_MSC_BlockGroup;
   \   000000DA   0x....             LDR      R0,??DataTable6_2
   \   000000DC   0x6800             LDR      R0,[R0, #+0]
   \   000000DE   0x....             LDR      R1,??DataTable6_9
   \   000000E0   0x6809             LDR      R1,[R1, #+0]
   \   000000E2   0x1840             ADDS     R0,R0,R1
   \   000000E4   0x....             LDR      R1,??DataTable6_2
   \   000000E6   0x6008             STR      R0,[R1, #+0]
    187            }
    188          
    189            USBD_MSC_CSW.dDataResidue -= n;
   \                     ??USBD_MSC_MemoryRead_7: (+1)
   \   000000E8   0x....             LDR      R0,??DataTable5_3
   \   000000EA   0x6880             LDR      R0,[R0, #+8]
   \   000000EC   0x1B00             SUBS     R0,R0,R4
   \   000000EE   0x....             LDR      R1,??DataTable5_3
   \   000000F0   0x6088             STR      R0,[R1, #+8]
    190          
    191            if (!n) return;
   \   000000F2   0x2C00             CMP      R4,#+0
   \   000000F4   0xD00D             BEQ      ??USBD_MSC_MemoryRead_8
    192          
    193            if (Length == 0) {
   \                     ??USBD_MSC_MemoryRead_9: (+1)
   \   000000F6   0x....             LDR      R0,??DataTable6_6
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x2800             CMP      R0,#+0
   \   000000FC   0xD102             BNE      ??USBD_MSC_MemoryRead_10
    194              BulkStage = MSC_BS_DATA_IN_LAST;
   \   000000FE   0x2003             MOVS     R0,#+3
   \   00000100   0x....             LDR      R1,??DataTable6
   \   00000102   0x7008             STRB     R0,[R1, #+0]
    195            }
    196          
    197            if (BulkStage != MSC_BS_DATA_IN) {
   \                     ??USBD_MSC_MemoryRead_10: (+1)
   \   00000104   0x....             LDR      R0,??DataTable6
   \   00000106   0x7800             LDRB     R0,[R0, #+0]
   \   00000108   0x2802             CMP      R0,#+2
   \   0000010A   0xD002             BEQ      ??USBD_MSC_MemoryRead_11
    198              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x....             LDR      R1,??DataTable5_3
   \   00000110   0x7308             STRB     R0,[R1, #+12]
    199            }
    200          }
   \                     ??USBD_MSC_MemoryRead_11: (+1)
   \                     ??USBD_MSC_MemoryRead_8: (+1)
   \   00000112   0xBD10             POP      {R4,PC}          ;; return
    201          
    202          
    203          /*
    204           *  USB Device MSC Memory Write Callback
    205           *   Called automatically on USB Device Memory Write Event
    206           *    Parameters:      None
    207           *    Return Value:    None
    208           */
    209          

   \                                 In section .text, align 2, keep-with-next
    210          void USBD_MSC_MemoryWrite (void) {
   \                     USBD_MSC_MemoryWrite: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    211            U32 n;
    212          
    213            if (Block >= USBD_MSC_BlockCount) {
   \   00000002   0x....             LDR      R0,??DataTable6_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable6_3
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD30B             BCC      ??USBD_MSC_MemoryWrite_0
    214              BulkLen = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable7
   \   00000012   0x6008             STR      R0,[R1, #+0]
    215              USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \   00000014   0x....             LDR      R0,??DataTable7_1
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       USBD_MSC_SetStallEP
    216              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR      R1,??DataTable7_2
   \   00000020   0x7308             STRB     R0,[R1, #+12]
    217              USBD_MSC_SetCSW();
   \   00000022   0x.... 0x....      BL       USBD_MSC_SetCSW
    218            }
    219          
    220            if (!USBD_MSC_CheckMedia()) {
   \                     ??USBD_MSC_MemoryWrite_0: (+1)
   \   00000026   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD102             BNE      ??USBD_MSC_MemoryWrite_1
    221              BulkLen = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable7
   \   00000032   0x6008             STR      R0,[R1, #+0]
    222            }
    223          
    224            for (n = 0; n < BulkLen; n++) {
   \                     ??USBD_MSC_MemoryWrite_1: (+1)
   \   00000034   0x2400             MOVS     R4,#+0
   \   00000036   0xE008             B        ??USBD_MSC_MemoryWrite_2
    225              USBD_MSC_BlockBuf[Offset + n] = USBD_MSC_BulkBuf[n];
   \                     ??USBD_MSC_MemoryWrite_3: (+1)
   \   00000038   0x....             LDR      R0,??DataTable7_3
   \   0000003A   0x5D00             LDRB     R0,[R0, R4]
   \   0000003C   0x....             LDR      R1,??DataTable6_10
   \   0000003E   0x6809             LDR      R1,[R1, #+0]
   \   00000040   0x....             LDR      R2,??DataTable6_7
   \   00000042   0x6812             LDR      R2,[R2, #+0]
   \   00000044   0x1912             ADDS     R2,R2,R4
   \   00000046   0x5488             STRB     R0,[R1, R2]
    226            }
   \   00000048   0x1C64             ADDS     R4,R4,#+1
   \                     ??USBD_MSC_MemoryWrite_2: (+1)
   \   0000004A   0x....             LDR      R0,??DataTable7
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x4284             CMP      R4,R0
   \   00000050   0xD3F2             BCC      ??USBD_MSC_MemoryWrite_3
    227          
    228            Offset += BulkLen;
   \   00000052   0x....             LDR      R0,??DataTable6_7
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x....             LDR      R1,??DataTable7
   \   00000058   0x6809             LDR      R1,[R1, #+0]
   \   0000005A   0x1840             ADDS     R0,R0,R1
   \   0000005C   0x....             LDR      R1,??DataTable6_7
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    229            Length -= BulkLen;
   \   00000060   0x....             LDR      R0,??DataTable6_6
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x....             LDR      R1,??DataTable7
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x1A40             SUBS     R0,R0,R1
   \   0000006A   0x....             LDR      R1,??DataTable6_6
   \   0000006C   0x6008             STR      R0,[R1, #+0]
    230          
    231            if (BulkLen) {
   \   0000006E   0x....             LDR      R0,??DataTable7
   \   00000070   0x6800             LDR      R0,[R0, #+0]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD043             BEQ      ??USBD_MSC_MemoryWrite_4
    232              if ((Length == 0) && (Offset != 0)) {
   \   00000076   0x....             LDR      R0,??DataTable6_6
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD124             BNE      ??USBD_MSC_MemoryWrite_5
   \   0000007E   0x....             LDR      R0,??DataTable6_7
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD020             BEQ      ??USBD_MSC_MemoryWrite_5
    233                n = (Offset + (USBD_MSC_BlockSize-1)) / USBD_MSC_BlockSize;
   \   00000086   0x....             LDR      R0,??DataTable6_7
   \   00000088   0x6800             LDR      R0,[R0, #+0]
   \   0000008A   0x....             LDR      R1,??DataTable6_8
   \   0000008C   0x6809             LDR      R1,[R1, #+0]
   \   0000008E   0x1840             ADDS     R0,R0,R1
   \   00000090   0x1E40             SUBS     R0,R0,#+1
   \   00000092   0x....             LDR      R1,??DataTable6_8
   \   00000094   0x6809             LDR      R1,[R1, #+0]
   \   00000096   0x.... 0x....      BL       __aeabi_uidiv
   \   0000009A   0x0004             MOVS     R4,R0
    234                if (n > USBD_MSC_BlockGroup) {
   \   0000009C   0x....             LDR      R0,??DataTable6_9
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x42A0             CMP      R0,R4
   \   000000A2   0xD201             BCS      ??USBD_MSC_MemoryWrite_6
    235                  n = USBD_MSC_BlockGroup;
   \   000000A4   0x....             LDR      R0,??DataTable6_9
   \   000000A6   0x6804             LDR      R4,[R0, #+0]
    236                }
    237                usbd_msc_write_sect(Block, USBD_MSC_BlockBuf, n);
   \                     ??USBD_MSC_MemoryWrite_6: (+1)
   \   000000A8   0x0022             MOVS     R2,R4
   \   000000AA   0x....             LDR      R0,??DataTable6_10
   \   000000AC   0x6801             LDR      R1,[R0, #+0]
   \   000000AE   0x....             LDR      R0,??DataTable6_2
   \   000000B0   0x6800             LDR      R0,[R0, #+0]
   \   000000B2   0x.... 0x....      BL       usbd_msc_write_sect
    238                Offset = 0;
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x....             LDR      R1,??DataTable6_7
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    239                Block += n;
   \   000000BC   0x....             LDR      R0,??DataTable6_2
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x1900             ADDS     R0,R0,R4
   \   000000C2   0x....             LDR      R1,??DataTable6_2
   \   000000C4   0x6008             STR      R0,[R1, #+0]
   \   000000C6   0xE01A             B        ??USBD_MSC_MemoryWrite_4
    240              } else if (Offset == USBD_MSC_BlockGroup*USBD_MSC_BlockSize) {
   \                     ??USBD_MSC_MemoryWrite_5: (+1)
   \   000000C8   0x....             LDR      R0,??DataTable6_7
   \   000000CA   0x6800             LDR      R0,[R0, #+0]
   \   000000CC   0x....             LDR      R1,??DataTable6_9
   \   000000CE   0x6809             LDR      R1,[R1, #+0]
   \   000000D0   0x....             LDR      R2,??DataTable6_8
   \   000000D2   0x6812             LDR      R2,[R2, #+0]
   \   000000D4   0x4351             MULS     R1,R2,R1
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xD111             BNE      ??USBD_MSC_MemoryWrite_4
    241                usbd_msc_write_sect(Block, USBD_MSC_BlockBuf, USBD_MSC_BlockGroup);
   \   000000DA   0x....             LDR      R0,??DataTable6_9
   \   000000DC   0x6802             LDR      R2,[R0, #+0]
   \   000000DE   0x....             LDR      R0,??DataTable6_10
   \   000000E0   0x6801             LDR      R1,[R0, #+0]
   \   000000E2   0x....             LDR      R0,??DataTable6_2
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x.... 0x....      BL       usbd_msc_write_sect
    242                Offset = 0;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x....             LDR      R1,??DataTable6_7
   \   000000EE   0x6008             STR      R0,[R1, #+0]
    243                Block += USBD_MSC_BlockGroup;
   \   000000F0   0x....             LDR      R0,??DataTable6_2
   \   000000F2   0x6800             LDR      R0,[R0, #+0]
   \   000000F4   0x....             LDR      R1,??DataTable6_9
   \   000000F6   0x6809             LDR      R1,[R1, #+0]
   \   000000F8   0x1840             ADDS     R0,R0,R1
   \   000000FA   0x....             LDR      R1,??DataTable6_2
   \   000000FC   0x6008             STR      R0,[R1, #+0]
    244              }
    245            }
    246          
    247            USBD_MSC_CSW.dDataResidue -= BulkLen;
   \                     ??USBD_MSC_MemoryWrite_4: (+1)
   \   000000FE   0x....             LDR      R0,??DataTable7_2
   \   00000100   0x6880             LDR      R0,[R0, #+8]
   \   00000102   0x....             LDR      R1,??DataTable7
   \   00000104   0x6809             LDR      R1,[R1, #+0]
   \   00000106   0x1A40             SUBS     R0,R0,R1
   \   00000108   0x....             LDR      R1,??DataTable7_2
   \   0000010A   0x6088             STR      R0,[R1, #+8]
    248          
    249            if (!BulkLen) return;
   \   0000010C   0x....             LDR      R0,??DataTable7
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xD00C             BEQ      ??USBD_MSC_MemoryWrite_7
    250          
    251            if ((Length == 0) || (BulkStage == MSC_BS_CSW)) {
   \                     ??USBD_MSC_MemoryWrite_8: (+1)
   \   00000114   0x....             LDR      R0,??DataTable6_6
   \   00000116   0x6800             LDR      R0,[R0, #+0]
   \   00000118   0x2800             CMP      R0,#+0
   \   0000011A   0xD003             BEQ      ??USBD_MSC_MemoryWrite_9
   \   0000011C   0x....             LDR      R0,??DataTable6
   \   0000011E   0x7800             LDRB     R0,[R0, #+0]
   \   00000120   0x2805             CMP      R0,#+5
   \   00000122   0xD104             BNE      ??USBD_MSC_MemoryWrite_10
    252              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \                     ??USBD_MSC_MemoryWrite_9: (+1)
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x....             LDR      R1,??DataTable7_2
   \   00000128   0x7308             STRB     R0,[R1, #+12]
    253              USBD_MSC_SetCSW();
   \   0000012A   0x.... 0x....      BL       USBD_MSC_SetCSW
    254            }
    255          }
   \                     ??USBD_MSC_MemoryWrite_10: (+1)
   \                     ??USBD_MSC_MemoryWrite_7: (+1)
   \   0000012E   0xBD10             POP      {R4,PC}          ;; return
    256          
    257          
    258          /*
    259           *  USB Device MSC Memory Verify Callback
    260           *   Called automatically on USB Device Memory Verify Event
    261           *    Parameters:      None
    262           *    Return Value:    None
    263           */
    264          

   \                                 In section .text, align 2, keep-with-next
    265          void USBD_MSC_MemoryVerify (void) {
   \                     USBD_MSC_MemoryVerify: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    266            U32 n;
    267          
    268            if (Block >= USBD_MSC_BlockCount) {
   \   00000002   0x....             LDR      R0,??DataTable9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable9_1
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD30B             BCC      ??USBD_MSC_MemoryVerify_0
    269              BulkLen = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable7
   \   00000012   0x6008             STR      R0,[R1, #+0]
    270              USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \   00000014   0x....             LDR      R0,??DataTable7_1
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       USBD_MSC_SetStallEP
    271              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x....             LDR      R1,??DataTable7_2
   \   00000020   0x7308             STRB     R0,[R1, #+12]
    272              USBD_MSC_SetCSW();
   \   00000022   0x.... 0x....      BL       USBD_MSC_SetCSW
    273            }
    274          
    275            if (!USBD_MSC_CheckMedia()) {
   \                     ??USBD_MSC_MemoryVerify_0: (+1)
   \   00000026   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD102             BNE      ??USBD_MSC_MemoryVerify_1
    276              BulkLen = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable7
   \   00000032   0x6008             STR      R0,[R1, #+0]
    277            }
    278          
    279            if (BulkLen) {
   \                     ??USBD_MSC_MemoryVerify_1: (+1)
   \   00000034   0x....             LDR      R0,??DataTable7
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD032             BEQ      ??USBD_MSC_MemoryVerify_2
    280              if ((Offset == 0) && (BulkLen != 0)) {
   \   0000003C   0x....             LDR      R0,??DataTable10
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD11A             BNE      ??USBD_MSC_MemoryVerify_3
   \   00000044   0x....             LDR      R0,??DataTable7
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD016             BEQ      ??USBD_MSC_MemoryVerify_3
    281                n = (Length + (USBD_MSC_BlockSize-1)) / USBD_MSC_BlockSize;
   \   0000004C   0x....             LDR      R0,??DataTable10_1
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x....             LDR      R1,??DataTable10_2
   \   00000052   0x6809             LDR      R1,[R1, #+0]
   \   00000054   0x1840             ADDS     R0,R0,R1
   \   00000056   0x1E40             SUBS     R0,R0,#+1
   \   00000058   0x....             LDR      R1,??DataTable10_2
   \   0000005A   0x6809             LDR      R1,[R1, #+0]
   \   0000005C   0x.... 0x....      BL       __aeabi_uidiv
    282                if (n > USBD_MSC_BlockGroup) {
   \   00000060   0x....             LDR      R1,??DataTable10_3
   \   00000062   0x6809             LDR      R1,[R1, #+0]
   \   00000064   0x4281             CMP      R1,R0
   \   00000066   0xD201             BCS      ??USBD_MSC_MemoryVerify_4
    283                  n = USBD_MSC_BlockGroup;
   \   00000068   0x....             LDR      R0,??DataTable10_3
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
    284                }
    285                usbd_msc_read_sect(Block, USBD_MSC_BlockBuf, n);
   \                     ??USBD_MSC_MemoryVerify_4: (+1)
   \   0000006C   0x0002             MOVS     R2,R0
   \   0000006E   0x....             LDR      R0,??DataTable10_4
   \   00000070   0x6801             LDR      R1,[R0, #+0]
   \   00000072   0x....             LDR      R0,??DataTable9
   \   00000074   0x6800             LDR      R0,[R0, #+0]
   \   00000076   0x.... 0x....      BL       usbd_msc_read_sect
    286              }
    287          
    288              for (n = 0; n < BulkLen; n++) {
   \                     ??USBD_MSC_MemoryVerify_3: (+1)
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xE000             B        ??USBD_MSC_MemoryVerify_5
   \                     ??USBD_MSC_MemoryVerify_6: (+1)
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \                     ??USBD_MSC_MemoryVerify_5: (+1)
   \   00000080   0x....             LDR      R1,??DataTable7
   \   00000082   0x6809             LDR      R1,[R1, #+0]
   \   00000084   0x4288             CMP      R0,R1
   \   00000086   0xD20C             BCS      ??USBD_MSC_MemoryVerify_2
    289                if (USBD_MSC_BlockBuf[Offset + n] != USBD_MSC_BulkBuf[n]) {
   \   00000088   0x....             LDR      R1,??DataTable10_4
   \   0000008A   0x6809             LDR      R1,[R1, #+0]
   \   0000008C   0x....             LDR      R2,??DataTable10
   \   0000008E   0x6812             LDR      R2,[R2, #+0]
   \   00000090   0x1812             ADDS     R2,R2,R0
   \   00000092   0x5C89             LDRB     R1,[R1, R2]
   \   00000094   0x....             LDR      R2,??DataTable7_3
   \   00000096   0x5C12             LDRB     R2,[R2, R0]
   \   00000098   0x4291             CMP      R1,R2
   \   0000009A   0xD0F0             BEQ      ??USBD_MSC_MemoryVerify_6
    290                  MemOK = __FALSE;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x....             LDR      R1,??DataTable11
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    291                  break;
    292                }
    293              }
    294            }
    295          
    296            Offset += BulkLen;
   \                     ??USBD_MSC_MemoryVerify_2: (+1)
   \   000000A2   0x....             LDR      R0,??DataTable10
   \   000000A4   0x6800             LDR      R0,[R0, #+0]
   \   000000A6   0x....             LDR      R1,??DataTable7
   \   000000A8   0x6809             LDR      R1,[R1, #+0]
   \   000000AA   0x1840             ADDS     R0,R0,R1
   \   000000AC   0x....             LDR      R1,??DataTable10
   \   000000AE   0x6008             STR      R0,[R1, #+0]
    297            Length -= BulkLen;
   \   000000B0   0x....             LDR      R0,??DataTable10_1
   \   000000B2   0x6800             LDR      R0,[R0, #+0]
   \   000000B4   0x....             LDR      R1,??DataTable7
   \   000000B6   0x6809             LDR      R1,[R1, #+0]
   \   000000B8   0x1A40             SUBS     R0,R0,R1
   \   000000BA   0x....             LDR      R1,??DataTable10_1
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    298          
    299            if (Offset == USBD_MSC_BlockGroup*USBD_MSC_BlockSize) {
   \   000000BE   0x....             LDR      R0,??DataTable10
   \   000000C0   0x6800             LDR      R0,[R0, #+0]
   \   000000C2   0x....             LDR      R1,??DataTable10_3
   \   000000C4   0x6809             LDR      R1,[R1, #+0]
   \   000000C6   0x....             LDR      R2,??DataTable10_2
   \   000000C8   0x6812             LDR      R2,[R2, #+0]
   \   000000CA   0x4351             MULS     R1,R2,R1
   \   000000CC   0x4288             CMP      R0,R1
   \   000000CE   0xD109             BNE      ??USBD_MSC_MemoryVerify_7
    300              Offset = 0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x....             LDR      R1,??DataTable10
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    301              Block += USBD_MSC_BlockGroup;
   \   000000D6   0x....             LDR      R0,??DataTable9
   \   000000D8   0x6800             LDR      R0,[R0, #+0]
   \   000000DA   0x....             LDR      R1,??DataTable10_3
   \   000000DC   0x6809             LDR      R1,[R1, #+0]
   \   000000DE   0x1840             ADDS     R0,R0,R1
   \   000000E0   0x....             LDR      R1,??DataTable9
   \   000000E2   0x6008             STR      R0,[R1, #+0]
    302            }
    303          
    304            USBD_MSC_CSW.dDataResidue -= BulkLen;
   \                     ??USBD_MSC_MemoryVerify_7: (+1)
   \   000000E4   0x....             LDR      R0,??DataTable7_2
   \   000000E6   0x6880             LDR      R0,[R0, #+8]
   \   000000E8   0x....             LDR      R1,??DataTable7
   \   000000EA   0x6809             LDR      R1,[R1, #+0]
   \   000000EC   0x1A40             SUBS     R0,R0,R1
   \   000000EE   0x....             LDR      R1,??DataTable7_2
   \   000000F0   0x6088             STR      R0,[R1, #+8]
    305          
    306            if (!BulkLen) return;
   \   000000F2   0x....             LDR      R0,??DataTable7
   \   000000F4   0x6800             LDR      R0,[R0, #+0]
   \   000000F6   0x2800             CMP      R0,#+0
   \   000000F8   0xD014             BEQ      ??USBD_MSC_MemoryVerify_8
    307          
    308            if ((Length == 0) || (BulkStage == MSC_BS_CSW)) {
   \                     ??USBD_MSC_MemoryVerify_9: (+1)
   \   000000FA   0x....             LDR      R0,??DataTable10_1
   \   000000FC   0x6800             LDR      R0,[R0, #+0]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD003             BEQ      ??USBD_MSC_MemoryVerify_10
   \   00000102   0x....             LDR      R0,??DataTable11_1
   \   00000104   0x7800             LDRB     R0,[R0, #+0]
   \   00000106   0x2805             CMP      R0,#+5
   \   00000108   0xD10C             BNE      ??USBD_MSC_MemoryVerify_11
    309              USBD_MSC_CSW.bStatus = (MemOK) ? CSW_CMD_PASSED : CSW_CMD_FAILED;
   \                     ??USBD_MSC_MemoryVerify_10: (+1)
   \   0000010A   0x....             LDR      R0,??DataTable11
   \   0000010C   0x6800             LDR      R0,[R0, #+0]
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD003             BEQ      ??USBD_MSC_MemoryVerify_12
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x....             LDR      R1,??DataTable7_2
   \   00000116   0x7308             STRB     R0,[R1, #+12]
   \   00000118   0xE002             B        ??USBD_MSC_MemoryVerify_13
   \                     ??USBD_MSC_MemoryVerify_12: (+1)
   \   0000011A   0x2001             MOVS     R0,#+1
   \   0000011C   0x....             LDR      R1,??DataTable7_2
   \   0000011E   0x7308             STRB     R0,[R1, #+12]
    310              USBD_MSC_SetCSW();
   \                     ??USBD_MSC_MemoryVerify_13: (+1)
   \   00000120   0x.... 0x....      BL       USBD_MSC_SetCSW
    311            }
    312          }
   \                     ??USBD_MSC_MemoryVerify_11: (+1)
   \                     ??USBD_MSC_MemoryVerify_8: (+1)
   \   00000124   0xBD01             POP      {R0,PC}          ;; return
    313          
    314          
    315          /*
    316           *  USB Device MSC SCSI Read/Write Setup Callback
    317           *    Parameters:      None
    318           *    Return Value:    TRUE - Success, FALSE - Error
    319           */
    320          

   \                                 In section .text, align 2, keep-with-next
    321          BOOL USBD_MSC_RWSetup (void) {
   \                     USBD_MSC_RWSetup: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    322            U32 n;
    323          
    324            /* Logical Block Address of First Block */
    325            n = (USBD_MSC_CBW.CB[2] << 24) |
    326                (USBD_MSC_CBW.CB[3] << 16) |
    327                (USBD_MSC_CBW.CB[4] <<  8) |
    328                (USBD_MSC_CBW.CB[5] <<  0);
   \   00000002   0x....             LDR      R0,??DataTable11_2
   \   00000004   0x7C40             LDRB     R0,[R0, #+17]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0x....             LDR      R1,??DataTable11_2
   \   0000000A   0x7C89             LDRB     R1,[R1, #+18]
   \   0000000C   0x0409             LSLS     R1,R1,#+16
   \   0000000E   0x4301             ORRS     R1,R1,R0
   \   00000010   0x....             LDR      R0,??DataTable11_2
   \   00000012   0x7CC0             LDRB     R0,[R0, #+19]
   \   00000014   0x0202             LSLS     R2,R0,#+8
   \   00000016   0x430A             ORRS     R2,R2,R1
   \   00000018   0x....             LDR      R0,??DataTable11_2
   \   0000001A   0x7D00             LDRB     R0,[R0, #+20]
   \   0000001C   0x4310             ORRS     R0,R0,R2
    329          
    330            Block  = n;
   \   0000001E   0x....             LDR      R1,??DataTable9
   \   00000020   0x6008             STR      R0,[R1, #+0]
    331            Offset = 0;
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x....             LDR      R2,??DataTable10
   \   00000026   0x6011             STR      R1,[R2, #+0]
    332          
    333            /* Number of Blocks to transfer */
    334            switch (USBD_MSC_CBW.CB[0]) {
   \   00000028   0x....             LDR      R1,??DataTable11_2
   \   0000002A   0x7BC9             LDRB     R1,[R1, #+15]
   \   0000002C   0x2928             CMP      R1,#+40
   \   0000002E   0xD00E             BEQ      ??USBD_MSC_RWSetup_0
   \   00000030   0x292A             CMP      R1,#+42
   \   00000032   0xD006             BEQ      ??USBD_MSC_RWSetup_1
   \   00000034   0x292F             CMP      R1,#+47
   \   00000036   0xD004             BEQ      ??USBD_MSC_RWSetup_1
   \   00000038   0x29A8             CMP      R1,#+168
   \   0000003A   0xD015             BEQ      ??USBD_MSC_RWSetup_2
   \   0000003C   0x29AA             CMP      R1,#+170
   \   0000003E   0xD00D             BEQ      ??USBD_MSC_RWSetup_3
   \   00000040   0xE020             B        ??USBD_MSC_RWSetup_4
    335              case SCSI_WRITE10:
    336              case SCSI_VERIFY10:
    337                if (!USBD_MSC_CheckMedia()) return (__FALSE);
   \                     ??USBD_MSC_RWSetup_1: (+1)
   \   00000042   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD101             BNE      ??USBD_MSC_RWSetup_0
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xE047             B        ??USBD_MSC_RWSetup_5
    338              case SCSI_READ10:
    339                n = (USBD_MSC_CBW.CB[7] <<  8) |
    340                    (USBD_MSC_CBW.CB[8] <<  0);
   \                     ??USBD_MSC_RWSetup_0: (+1)
   \   0000004E   0x....             LDR      R0,??DataTable11_2
   \   00000050   0x7D80             LDRB     R0,[R0, #+22]
   \   00000052   0x0201             LSLS     R1,R0,#+8
   \   00000054   0x....             LDR      R0,??DataTable11_2
   \   00000056   0x7DC0             LDRB     R0,[R0, #+23]
   \   00000058   0x4308             ORRS     R0,R0,R1
    341                break;
   \   0000005A   0xE013             B        ??USBD_MSC_RWSetup_4
    342          
    343              case SCSI_WRITE12:
    344                if (!USBD_MSC_CheckMedia()) return (__FALSE);
   \                     ??USBD_MSC_RWSetup_3: (+1)
   \   0000005C   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD101             BNE      ??USBD_MSC_RWSetup_2
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xE03A             B        ??USBD_MSC_RWSetup_5
    345              case SCSI_READ12:
    346                n = (USBD_MSC_CBW.CB[6] << 24) |
    347                    (USBD_MSC_CBW.CB[7] << 16) |
    348                    (USBD_MSC_CBW.CB[8] <<  8) |
    349                    (USBD_MSC_CBW.CB[9] <<  0);
   \                     ??USBD_MSC_RWSetup_2: (+1)
   \   00000068   0x....             LDR      R0,??DataTable11_2
   \   0000006A   0x7D40             LDRB     R0,[R0, #+21]
   \   0000006C   0x0600             LSLS     R0,R0,#+24
   \   0000006E   0x....             LDR      R1,??DataTable11_2
   \   00000070   0x7D89             LDRB     R1,[R1, #+22]
   \   00000072   0x0409             LSLS     R1,R1,#+16
   \   00000074   0x4301             ORRS     R1,R1,R0
   \   00000076   0x....             LDR      R0,??DataTable11_2
   \   00000078   0x7DC0             LDRB     R0,[R0, #+23]
   \   0000007A   0x0202             LSLS     R2,R0,#+8
   \   0000007C   0x430A             ORRS     R2,R2,R1
   \   0000007E   0x....             LDR      R0,??DataTable11_2
   \   00000080   0x7E00             LDRB     R0,[R0, #+24]
   \   00000082   0x4310             ORRS     R0,R0,R2
    350                break;
    351            }
    352          
    353            Length = n * USBD_MSC_BlockSize;
   \                     ??USBD_MSC_RWSetup_4: (+1)
   \   00000084   0x....             LDR      R1,??DataTable10_2
   \   00000086   0x6809             LDR      R1,[R1, #+0]
   \   00000088   0x4348             MULS     R0,R1,R0
   \   0000008A   0x....             LDR      R1,??DataTable10_1
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    354          
    355            if (USBD_MSC_CBW.dDataLength == 0) {     /* host requests no data */
   \   0000008E   0x....             LDR      R0,??DataTable11_2
   \   00000090   0x6880             LDR      R0,[R0, #+8]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD106             BNE      ??USBD_MSC_RWSetup_6
    356              USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x....             LDR      R1,??DataTable15
   \   0000009A   0x7308             STRB     R0,[R1, #+12]
    357              USBD_MSC_SetCSW();
   \   0000009C   0x.... 0x....      BL       USBD_MSC_SetCSW
    358              return (__FALSE);
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE01C             B        ??USBD_MSC_RWSetup_5
    359            }
    360          
    361            if (USBD_MSC_CBW.dDataLength != Length) {
   \                     ??USBD_MSC_RWSetup_6: (+1)
   \   000000A4   0x....             LDR      R0,??DataTable11_2
   \   000000A6   0x6880             LDR      R0,[R0, #+8]
   \   000000A8   0x....             LDR      R1,??DataTable10_1
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD015             BEQ      ??USBD_MSC_RWSetup_7
    362              if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {  /* stall appropriate EP */
   \   000000B0   0x....             LDR      R0,??DataTable11_2
   \   000000B2   0x7B00             LDRB     R0,[R0, #+12]
   \   000000B4   0x0600             LSLS     R0,R0,#+24
   \   000000B6   0xD506             BPL      ??USBD_MSC_RWSetup_8
    363                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \   000000B8   0x....             LDR      R0,??DataTable13
   \   000000BA   0x7801             LDRB     R1,[R0, #+0]
   \   000000BC   0x2080             MOVS     R0,#+128
   \   000000BE   0x4308             ORRS     R0,R0,R1
   \   000000C0   0x.... 0x....      BL       USBD_MSC_SetStallEP
   \   000000C4   0xE003             B        ??USBD_MSC_RWSetup_9
    364              } else {
    365                USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \                     ??USBD_MSC_RWSetup_8: (+1)
   \   000000C6   0x....             LDR      R0,??DataTable14
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x.... 0x....      BL       USBD_MSC_SetStallEP
    366              }
    367          
    368              USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \                     ??USBD_MSC_RWSetup_9: (+1)
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x....             LDR      R1,??DataTable15
   \   000000D2   0x7308             STRB     R0,[R1, #+12]
    369              USBD_MSC_SetCSW();
   \   000000D4   0x.... 0x....      BL       USBD_MSC_SetCSW
    370          
    371              return (__FALSE);
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0xE000             B        ??USBD_MSC_RWSetup_5
    372            }
    373          
    374            return (__TRUE);
   \                     ??USBD_MSC_RWSetup_7: (+1)
   \   000000DC   0x2001             MOVS     R0,#+1
   \                     ??USBD_MSC_RWSetup_5: (+1)
   \   000000DE   0xBD02             POP      {R1,PC}          ;; return
    375          }
    376          
    377          
    378          /*
    379           *  USB Device Check Data IN Format
    380           *    Parameters:      None
    381           *    Return Value:    TRUE - Success, FALSE - Error
    382           */
    383          

   \                                 In section .text, align 2, keep-with-next
    384          BOOL USBD_MSC_DataInFormat (void) {
   \                     USBD_MSC_DataInFormat: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    385          
    386            if (USBD_MSC_CBW.dDataLength == 0) {
   \   00000002   0x....             LDR      R0,??DataTable11_2
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD106             BNE      ??USBD_MSC_DataInFormat_0
    387              USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x....             LDR      R1,??DataTable15
   \   0000000E   0x7308             STRB     R0,[R1, #+12]
    388              USBD_MSC_SetCSW();
   \   00000010   0x.... 0x....      BL       USBD_MSC_SetCSW
    389              return (__FALSE);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE00F             B        ??USBD_MSC_DataInFormat_1
    390            }
    391            if ((USBD_MSC_CBW.bmFlags & 0x80) == 0) {
   \                     ??USBD_MSC_DataInFormat_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable11_2
   \   0000001A   0x7B00             LDRB     R0,[R0, #+12]
   \   0000001C   0x0600             LSLS     R0,R0,#+24
   \   0000001E   0xD40A             BMI      ??USBD_MSC_DataInFormat_2
    392              USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \   00000020   0x....             LDR      R0,??DataTable14
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x.... 0x....      BL       USBD_MSC_SetStallEP
    393              USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x....             LDR      R1,??DataTable15
   \   0000002C   0x7308             STRB     R0,[R1, #+12]
    394              USBD_MSC_SetCSW();
   \   0000002E   0x.... 0x....      BL       USBD_MSC_SetCSW
    395              return (__FALSE);
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE000             B        ??USBD_MSC_DataInFormat_1
    396            }
    397            return (__TRUE);
   \                     ??USBD_MSC_DataInFormat_2: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??USBD_MSC_DataInFormat_1: (+1)
   \   00000038   0xBD02             POP      {R1,PC}          ;; return
    398          }
    399          
    400          
    401          /*
    402           *  USB Device Perform Data IN Transfer
    403           *    Parameters:      None
    404           *    Return Value:    None
    405           */
    406          

   \                                 In section .text, align 2, keep-with-next
    407          void USBD_MSC_DataInTransfer (void) {
   \                     USBD_MSC_DataInTransfer: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    408          
    409            if (BulkLen >= USBD_MSC_CBW.dDataLength) {
   \   00000002   0x....             LDR      R0,??DataTable15_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable11_2
   \   00000008   0x6889             LDR      R1,[R1, #+8]
   \   0000000A   0x4288             CMP      R0,R1
   \   0000000C   0xD307             BCC      ??USBD_MSC_DataInTransfer_0
    410              BulkLen = USBD_MSC_CBW.dDataLength;
   \   0000000E   0x....             LDR      R0,??DataTable11_2
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x....             LDR      R1,??DataTable15_1
   \   00000014   0x6008             STR      R0,[R1, #+0]
    411              BulkStage = MSC_BS_DATA_IN_LAST;
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x....             LDR      R1,??DataTable11_1
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
   \   0000001C   0xE002             B        ??USBD_MSC_DataInTransfer_1
    412            }
    413            else {
    414              BulkStage = MSC_BS_DATA_IN_LAST_STALL; /* short or zero packet */
   \                     ??USBD_MSC_DataInTransfer_0: (+1)
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x....             LDR      R1,??DataTable11_1
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    415            }
    416          
    417            USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, USBD_MSC_BulkBuf, BulkLen);
   \                     ??USBD_MSC_DataInTransfer_1: (+1)
   \   00000024   0x....             LDR      R0,??DataTable15_1
   \   00000026   0x6802             LDR      R2,[R0, #+0]
   \   00000028   0x....             LDR      R1,??DataTable16
   \   0000002A   0x....             LDR      R0,??DataTable13
   \   0000002C   0x7803             LDRB     R3,[R0, #+0]
   \   0000002E   0x2080             MOVS     R0,#+128
   \   00000030   0x4318             ORRS     R0,R0,R3
   \   00000032   0x.... 0x....      BL       USBD_WriteEP
    418          
    419            USBD_MSC_CSW.dDataResidue -= BulkLen;
   \   00000036   0x....             LDR      R0,??DataTable15
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x....             LDR      R1,??DataTable15_1
   \   0000003C   0x6809             LDR      R1,[R1, #+0]
   \   0000003E   0x1A40             SUBS     R0,R0,R1
   \   00000040   0x....             LDR      R1,??DataTable15
   \   00000042   0x6088             STR      R0,[R1, #+8]
    420            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x....             LDR      R1,??DataTable15
   \   00000048   0x7308             STRB     R0,[R1, #+12]
    421          }
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    422          
    423          
    424          /*
    425           *  USB Device MSC SCSI Test Unit Ready Callback
    426           *    Parameters:      None
    427           *    Return Value:    None
    428           */
    429          

   \                                 In section .text, align 2, keep-with-next
    430          void USBD_MSC_TestUnitReady (void) {
   \                     USBD_MSC_TestUnitReady: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    431          
    432            if (USBD_MSC_CBW.dDataLength != 0) {
   \   00000002   0x....             LDR      R0,??DataTable11_2
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD014             BEQ      ??USBD_MSC_TestUnitReady_0
    433              if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {
   \   0000000A   0x....             LDR      R0,??DataTable11_2
   \   0000000C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000000E   0x0600             LSLS     R0,R0,#+24
   \   00000010   0xD506             BPL      ??USBD_MSC_TestUnitReady_1
    434                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \   00000012   0x....             LDR      R0,??DataTable13
   \   00000014   0x7801             LDRB     R1,[R0, #+0]
   \   00000016   0x2080             MOVS     R0,#+128
   \   00000018   0x4308             ORRS     R0,R0,R1
   \   0000001A   0x.... 0x....      BL       USBD_MSC_SetStallEP
   \   0000001E   0xE003             B        ??USBD_MSC_TestUnitReady_2
    435              } else {
    436                USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \                     ??USBD_MSC_TestUnitReady_1: (+1)
   \   00000020   0x....             LDR      R0,??DataTable14
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x.... 0x....      BL       USBD_MSC_SetStallEP
    437              }
    438              USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \                     ??USBD_MSC_TestUnitReady_2: (+1)
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x....             LDR      R1,??DataTable18
   \   0000002C   0x7308             STRB     R0,[R1, #+12]
    439              USBD_MSC_SetCSW();
   \   0000002E   0x.... 0x....      BL       USBD_MSC_SetCSW
    440              return;
   \   00000032   0xE008             B        ??USBD_MSC_TestUnitReady_3
    441            }
    442          
    443            if (!USBD_MSC_CheckMedia()) return;
   \                     ??USBD_MSC_TestUnitReady_0: (+1)
   \   00000034   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD004             BEQ      ??USBD_MSC_TestUnitReady_3
    444          
    445            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \                     ??USBD_MSC_TestUnitReady_4: (+1)
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x....             LDR      R1,??DataTable18
   \   00000040   0x7308             STRB     R0,[R1, #+12]
    446            USBD_MSC_SetCSW();
   \   00000042   0x.... 0x....      BL       USBD_MSC_SetCSW
    447          }
   \                     ??USBD_MSC_TestUnitReady_3: (+1)
   \   00000046   0xBD01             POP      {R0,PC}          ;; return
    448          
    449          
    450          /*
    451           *  USB Device MSC SCSI Request Sense Callback
    452           *    Parameters:      None
    453           *    Return Value:    None
    454           */
    455          

   \                                 In section .text, align 2, keep-with-next
    456          void USBD_MSC_RequestSense (void) {
   \                     USBD_MSC_RequestSense: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    457          
    458            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD06E             BEQ      ??USBD_MSC_RequestSense_0
    459          
    460            USBD_MSC_BulkBuf[ 0] = 0x70;             /* Response Code */
   \                     ??USBD_MSC_RequestSense_1: (+1)
   \   0000000A   0x2070             MOVS     R0,#+112
   \   0000000C   0x....             LDR      R1,??DataTable16
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    461            USBD_MSC_BulkBuf[ 1] = 0x00;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR      R1,??DataTable16
   \   00000014   0x7048             STRB     R0,[R1, #+1]
    462            if ((USBD_MSC_MediaReadyEx ^ USBD_MSC_MediaReady) & USBD_MSC_MediaReady) {  /* If media state changed to ready */
   \   00000016   0x....             LDR      R0,??DataTable17
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x....             LDR      R1,??DataTable17_1
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x4041             EORS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable17_1
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x4008             ANDS     R0,R0,R1
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD00D             BEQ      ??USBD_MSC_RequestSense_2
    463              USBD_MSC_BulkBuf[ 2] = 0x06;           /* UNIT ATTENTION */
   \   0000002A   0x2006             MOVS     R0,#+6
   \   0000002C   0x....             LDR      R1,??DataTable16
   \   0000002E   0x7088             STRB     R0,[R1, #+2]
    464              USBD_MSC_BulkBuf[12] = 0x28;           /* Additional Sense Code: Not ready to ready transition */
   \   00000030   0x2028             MOVS     R0,#+40
   \   00000032   0x....             LDR      R1,??DataTable16
   \   00000034   0x7308             STRB     R0,[R1, #+12]
    465              USBD_MSC_BulkBuf[13] = 0x00;           /* Additional Sense Code Qualifier */
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x....             LDR      R1,??DataTable16
   \   0000003A   0x7348             STRB     R0,[R1, #+13]
    466              USBD_MSC_MediaReadyEx= USBD_MSC_MediaReady;
   \   0000003C   0x....             LDR      R0,??DataTable17_1
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x....             LDR      R1,??DataTable17
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \   00000044   0xE024             B        ??USBD_MSC_RequestSense_3
    467            } else if (!USBD_MSC_MediaReady) {
   \                     ??USBD_MSC_RequestSense_2: (+1)
   \   00000046   0x....             LDR      R0,??DataTable17_1
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD109             BNE      ??USBD_MSC_RequestSense_4
    468              USBD_MSC_BulkBuf[ 2] = 0x02;           /* NOT READY */
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x....             LDR      R1,??DataTable16
   \   00000052   0x7088             STRB     R0,[R1, #+2]
    469              USBD_MSC_BulkBuf[12] = 0x3A;           /* Additional Sense Code: Medium not present */
   \   00000054   0x203A             MOVS     R0,#+58
   \   00000056   0x....             LDR      R1,??DataTable16
   \   00000058   0x7308             STRB     R0,[R1, #+12]
    470              USBD_MSC_BulkBuf[13] = 0x00;           /* Additional Sense Code Qualifier */
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x....             LDR      R1,??DataTable16
   \   0000005E   0x7348             STRB     R0,[R1, #+13]
   \   00000060   0xE016             B        ??USBD_MSC_RequestSense_3
    471            } else {
    472              if (USBD_MSC_CSW.bStatus == CSW_CMD_PASSED) {
   \                     ??USBD_MSC_RequestSense_4: (+1)
   \   00000062   0x....             LDR      R0,??DataTable15
   \   00000064   0x7B00             LDRB     R0,[R0, #+12]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD109             BNE      ??USBD_MSC_RequestSense_5
    473                USBD_MSC_BulkBuf[ 2] = 0x00;         /* NO SENSE */
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x....             LDR      R1,??DataTable16
   \   0000006E   0x7088             STRB     R0,[R1, #+2]
    474                USBD_MSC_BulkBuf[12] = 0x00;         /* Additional Sense Code: No additional code */
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x....             LDR      R1,??DataTable16
   \   00000074   0x7308             STRB     R0,[R1, #+12]
    475                USBD_MSC_BulkBuf[13] = 0x00;         /* Additional Sense Code Qualifier */
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x....             LDR      R1,??DataTable16
   \   0000007A   0x7348             STRB     R0,[R1, #+13]
   \   0000007C   0xE008             B        ??USBD_MSC_RequestSense_3
    476              } else {
    477                USBD_MSC_BulkBuf[ 2] = 0x05;         /* ILLEGAL REQUEST */
   \                     ??USBD_MSC_RequestSense_5: (+1)
   \   0000007E   0x2005             MOVS     R0,#+5
   \   00000080   0x....             LDR      R1,??DataTable16
   \   00000082   0x7088             STRB     R0,[R1, #+2]
    478                USBD_MSC_BulkBuf[12] = 0x20;         /* Additional Sense Code: Invalid command */
   \   00000084   0x2020             MOVS     R0,#+32
   \   00000086   0x....             LDR      R1,??DataTable16
   \   00000088   0x7308             STRB     R0,[R1, #+12]
    479                USBD_MSC_BulkBuf[13] = 0x00;         /* Additional Sense Code Qualifier */
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x....             LDR      R1,??DataTable16
   \   0000008E   0x7348             STRB     R0,[R1, #+13]
    480              }
    481            }
    482            USBD_MSC_BulkBuf[ 3] = 0x00;
   \                     ??USBD_MSC_RequestSense_3: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x....             LDR      R1,??DataTable16
   \   00000094   0x70C8             STRB     R0,[R1, #+3]
    483            USBD_MSC_BulkBuf[ 4] = 0x00;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x....             LDR      R1,??DataTable16
   \   0000009A   0x7108             STRB     R0,[R1, #+4]
    484            USBD_MSC_BulkBuf[ 5] = 0x00;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x....             LDR      R1,??DataTable16
   \   000000A0   0x7148             STRB     R0,[R1, #+5]
    485            USBD_MSC_BulkBuf[ 6] = 0x00;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR      R1,??DataTable16
   \   000000A6   0x7188             STRB     R0,[R1, #+6]
    486            USBD_MSC_BulkBuf[ 7] = 0x0A;             /* Additional Length */
   \   000000A8   0x200A             MOVS     R0,#+10
   \   000000AA   0x....             LDR      R1,??DataTable16
   \   000000AC   0x71C8             STRB     R0,[R1, #+7]
    487            USBD_MSC_BulkBuf[ 8] = 0x00;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x....             LDR      R1,??DataTable16
   \   000000B2   0x7208             STRB     R0,[R1, #+8]
    488            USBD_MSC_BulkBuf[ 9] = 0x00;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x....             LDR      R1,??DataTable16
   \   000000B8   0x7248             STRB     R0,[R1, #+9]
    489            USBD_MSC_BulkBuf[10] = 0x00;
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0x....             LDR      R1,??DataTable16
   \   000000BE   0x7288             STRB     R0,[R1, #+10]
    490            USBD_MSC_BulkBuf[11] = 0x00;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x....             LDR      R1,??DataTable16
   \   000000C4   0x72C8             STRB     R0,[R1, #+11]
    491            USBD_MSC_BulkBuf[14] = 0x00;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x....             LDR      R1,??DataTable16
   \   000000CA   0x7388             STRB     R0,[R1, #+14]
    492            USBD_MSC_BulkBuf[15] = 0x00;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x....             LDR      R1,??DataTable16
   \   000000D0   0x73C8             STRB     R0,[R1, #+15]
    493            USBD_MSC_BulkBuf[16] = 0x00;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x....             LDR      R1,??DataTable16
   \   000000D6   0x7408             STRB     R0,[R1, #+16]
    494            USBD_MSC_BulkBuf[17] = 0x00;
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x....             LDR      R1,??DataTable16
   \   000000DC   0x7448             STRB     R0,[R1, #+17]
    495          
    496            BulkLen = 18;
   \   000000DE   0x2012             MOVS     R0,#+18
   \   000000E0   0x....             LDR      R1,??DataTable15_1
   \   000000E2   0x6008             STR      R0,[R1, #+0]
    497            USBD_MSC_DataInTransfer();
   \   000000E4   0x.... 0x....      BL       USBD_MSC_DataInTransfer
    498          }
   \                     ??USBD_MSC_RequestSense_0: (+1)
   \   000000E8   0xBD01             POP      {R0,PC}          ;; return
    499          
    500          
    501          /*
    502           *  USB Device MSC SCSI Inquiry Callback
    503           *    Parameters:      None
    504           *    Return Value:    None
    505           */
    506          

   \                                 In section .text, align 2, keep-with-next
    507          void USBD_MSC_Inquiry (void) {
   \                     USBD_MSC_Inquiry: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    508            U8  i;
    509            U8 *ptr_str;
    510          
    511            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD031             BEQ      ??USBD_MSC_Inquiry_0
    512          
    513            USBD_MSC_BulkBuf[ 0] = 0x00;             /* Direct Access Device */
   \                     ??USBD_MSC_Inquiry_1: (+1)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR      R1,??DataTable16
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    514            USBD_MSC_BulkBuf[ 1] = 0x80;             /* RMB = 1: Removable Medium */
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0x....             LDR      R1,??DataTable16
   \   00000014   0x7048             STRB     R0,[R1, #+1]
    515            USBD_MSC_BulkBuf[ 2] = 0x02;             /* Version: ANSI X3.131: 1994 */
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x....             LDR      R1,??DataTable16
   \   0000001A   0x7088             STRB     R0,[R1, #+2]
    516            USBD_MSC_BulkBuf[ 3] = 0x02;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable16
   \   00000020   0x70C8             STRB     R0,[R1, #+3]
    517          
    518            USBD_MSC_BulkBuf[ 4] = 36-4;             /* Additional Length */
   \   00000022   0x2020             MOVS     R0,#+32
   \   00000024   0x....             LDR      R1,??DataTable16
   \   00000026   0x7108             STRB     R0,[R1, #+4]
    519            USBD_MSC_BulkBuf[ 5] = 0x00;             /* SCCS = 0: No Storage Controller Component */
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR      R1,??DataTable16
   \   0000002C   0x7148             STRB     R0,[R1, #+5]
    520            USBD_MSC_BulkBuf[ 6] = 0x00;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable16
   \   00000032   0x7188             STRB     R0,[R1, #+6]
    521            USBD_MSC_BulkBuf[ 7] = 0x00;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR      R1,??DataTable16
   \   00000038   0x71C8             STRB     R0,[R1, #+7]
    522          
    523            ptr_str = (U8 *)usbd_msc_inquiry_data;
   \   0000003A   0x....             LDR      R0,??DataTable20
   \   0000003C   0x6801             LDR      R1,[R0, #+0]
    524            for (i = 8; i < 36; i++) {               /* Product Information    + */
   \   0000003E   0x2008             MOVS     R0,#+8
   \   00000040   0xE004             B        ??USBD_MSC_Inquiry_2
    525              if (*ptr_str)                          /* Product Revision Level   */
    526                USBD_MSC_BulkBuf[i] = *ptr_str++;
    527              else
    528                USBD_MSC_BulkBuf[i] = ' ';
   \                     ??USBD_MSC_Inquiry_3: (+1)
   \   00000042   0x2220             MOVS     R2,#+32
   \   00000044   0x....             LDR      R3,??DataTable16
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0x541A             STRB     R2,[R3, R0]
   \                     ??USBD_MSC_Inquiry_4: (+1)
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \                     ??USBD_MSC_Inquiry_2: (+1)
   \   0000004C   0xB2C0             UXTB     R0,R0
   \   0000004E   0x2824             CMP      R0,#+36
   \   00000050   0xDA08             BGE      ??USBD_MSC_Inquiry_5
   \   00000052   0x780A             LDRB     R2,[R1, #+0]
   \   00000054   0x2A00             CMP      R2,#+0
   \   00000056   0xD0F4             BEQ      ??USBD_MSC_Inquiry_3
   \   00000058   0x780A             LDRB     R2,[R1, #+0]
   \   0000005A   0x....             LDR      R3,??DataTable16
   \   0000005C   0xB2C0             UXTB     R0,R0
   \   0000005E   0x541A             STRB     R2,[R3, R0]
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \   00000062   0xE7F2             B        ??USBD_MSC_Inquiry_4
    529            }
    530          
    531            BulkLen = 36;
   \                     ??USBD_MSC_Inquiry_5: (+1)
   \   00000064   0x2024             MOVS     R0,#+36
   \   00000066   0x....             LDR      R1,??DataTable22
   \   00000068   0x6008             STR      R0,[R1, #+0]
    532            USBD_MSC_DataInTransfer();
   \   0000006A   0x.... 0x....      BL       USBD_MSC_DataInTransfer
    533          }
   \                     ??USBD_MSC_Inquiry_0: (+1)
   \   0000006E   0xBD01             POP      {R0,PC}          ;; return
    534          
    535          
    536          /*
    537           *  USB Device MSC SCSI Start Stop Unit Callback
    538           *    Parameters:      None
    539           *    Return Value:    None
    540           */
    541          

   \                                 In section .text, align 2, keep-with-next
    542          void USBD_MSC_StartStopUnit (void) {
   \                     USBD_MSC_StartStopUnit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    543          
    544            if (!USBD_MSC_CBW.CB[3]) {               /* If power condition modifier is 0 */
   \   00000002   0x....             LDR      R0,??DataTable20_1
   \   00000004   0x7C80             LDRB     R0,[R0, #+18]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD110             BNE      ??USBD_MSC_StartStopUnit_0
    545              USBD_MSC_MediaReady  = USBD_MSC_CBW.CB[4] & 0x01;   /* Media ready = START bit value */
   \   0000000A   0x....             LDR      R0,??DataTable20_1
   \   0000000C   0x7CC0             LDRB     R0,[R0, #+19]
   \   0000000E   0x0001             MOVS     R1,R0
   \   00000010   0x07C9             LSLS     R1,R1,#+31       ;; ZeroExtS R1,R1,#+31,#+31
   \   00000012   0x0FC9             LSRS     R1,R1,#+31
   \   00000014   0x....             LDR      R0,??DataTable17_1
   \   00000016   0x6001             STR      R1,[R0, #+0]
    546              usbd_msc_start_stop(USBD_MSC_MediaReady);
   \   00000018   0x....             LDR      R0,??DataTable17_1
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x.... 0x....      BL       usbd_msc_start_stop
    547              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED; /* Start Stop Unit -> pass */
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR      R1,??DataTable18
   \   00000024   0x7308             STRB     R0,[R1, #+12]
    548              USBD_MSC_SetCSW();
   \   00000026   0x.... 0x....      BL       USBD_MSC_SetCSW
    549              return;
   \   0000002A   0xE004             B        ??USBD_MSC_StartStopUnit_1
    550            }
    551          
    552            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;   /* Start Stop Unit -> fail */
   \                     ??USBD_MSC_StartStopUnit_0: (+1)
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x....             LDR      R1,??DataTable18
   \   00000030   0x7308             STRB     R0,[R1, #+12]
    553            USBD_MSC_SetCSW();
   \   00000032   0x.... 0x....      BL       USBD_MSC_SetCSW
    554          }
   \                     ??USBD_MSC_StartStopUnit_1: (+1)
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    555          
    556          
    557          /*
    558           *  USB Device MSC SCSI Media Removal Callback
    559           *    Parameters:      None
    560           *    Return Value:    None
    561           */
    562          

   \                                 In section .text, align 2, keep-with-next
    563          void USBD_MSC_MediaRemoval (void) {
   \                     USBD_MSC_MediaRemoval: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    564          
    565            if (USBD_MSC_CBW.CB[4] & 1)              /* If prevent */
   \   00000002   0x....             LDR      R0,??DataTable20_1
   \   00000004   0x7CC0             LDRB     R0,[R0, #+19]
   \   00000006   0x07C0             LSLS     R0,R0,#+31
   \   00000008   0xD503             BPL      ??USBD_MSC_MediaRemoval_0
    566              USBD_MSC_CSW.bStatus = CSW_CMD_FAILED; /* Prevent media removal -> fail */
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x....             LDR      R1,??DataTable18
   \   0000000E   0x7308             STRB     R0,[R1, #+12]
   \   00000010   0xE002             B        ??USBD_MSC_MediaRemoval_1
    567            else                                     /* If allow */
    568              USBD_MSC_CSW.bStatus = CSW_CMD_PASSED; /* Allow media removal -> pass */
   \                     ??USBD_MSC_MediaRemoval_0: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR      R1,??DataTable18
   \   00000016   0x7308             STRB     R0,[R1, #+12]
    569          
    570            USBD_MSC_SetCSW();
   \                     ??USBD_MSC_MediaRemoval_1: (+1)
   \   00000018   0x.... 0x....      BL       USBD_MSC_SetCSW
    571          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    572          
    573          
    574          /*
    575           *  USB Device MSC SCSI Mode Sense (6-Byte) Callback
    576           *    Parameters:      None
    577           *    Return Value:    None
    578           */
    579          

   \                                 In section .text, align 2, keep-with-next
    580          void USBD_MSC_ModeSense6 (void) {
   \                     USBD_MSC_ModeSense6: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    581          
    582            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD024             BEQ      ??USBD_MSC_ModeSense6_0
    583            if (!USBD_MSC_CheckMedia())   return;
   \                     ??USBD_MSC_ModeSense6_1: (+1)
   \   0000000A   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD020             BEQ      ??USBD_MSC_ModeSense6_0
    584          
    585            USBD_MSC_BulkBuf[ 0] = 0x03;
   \                     ??USBD_MSC_ModeSense6_2: (+1)
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0x....             LDR      R1,??DataTable16
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    586            USBD_MSC_BulkBuf[ 1] = 0x00;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR      R1,??DataTable16
   \   0000001C   0x7048             STRB     R0,[R1, #+1]
    587            USBD_MSC_BulkBuf[ 2] =(USBD_MSC_ReadOnly << 7);
   \   0000001E   0x....             LDR      R0,??DataTable21
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x01C0             LSLS     R0,R0,#+7
   \   00000024   0x....             LDR      R1,??DataTable16
   \   00000026   0x7088             STRB     R0,[R1, #+2]
    588            USBD_MSC_BulkBuf[ 3] = 0x00;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x....             LDR      R1,??DataTable16
   \   0000002C   0x70C8             STRB     R0,[R1, #+3]
    589          
    590            BulkLen = 4;
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0x....             LDR      R1,??DataTable22
   \   00000032   0x6008             STR      R0,[R1, #+0]
    591            /* Win host requests maximum number of bytes but as all we have is 4 bytes we have
    592               to tell host back that it is all we have, that's why we correct residue */
    593            if (USBD_MSC_CSW.dDataResidue > BulkLen) {
   \   00000034   0x....             LDR      R0,??DataTable22
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x....             LDR      R1,??DataTable18
   \   0000003A   0x6889             LDR      R1,[R1, #+8]
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD207             BCS      ??USBD_MSC_ModeSense6_3
    594              USBD_MSC_CBW.dDataLength  = BulkLen;
   \   00000040   0x....             LDR      R0,??DataTable22
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x....             LDR      R1,??DataTable20_1
   \   00000046   0x6088             STR      R0,[R1, #+8]
    595              USBD_MSC_CSW.dDataResidue = BulkLen;
   \   00000048   0x....             LDR      R0,??DataTable22
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x....             LDR      R1,??DataTable18
   \   0000004E   0x6088             STR      R0,[R1, #+8]
    596            }
    597            USBD_MSC_DataInTransfer();
   \                     ??USBD_MSC_ModeSense6_3: (+1)
   \   00000050   0x.... 0x....      BL       USBD_MSC_DataInTransfer
    598          }
   \                     ??USBD_MSC_ModeSense6_0: (+1)
   \   00000054   0xBD01             POP      {R0,PC}          ;; return
    599          
    600          
    601          /*
    602           *  USB Device MSC SCSI Mode Sense (10-Byte) Callback
    603           *    Parameters:      None
    604           *    Return Value:    None
    605           */
    606          

   \                                 In section .text, align 2, keep-with-next
    607          void USBD_MSC_ModeSense10 (void) {
   \                     USBD_MSC_ModeSense10: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    608          
    609            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD030             BEQ      ??USBD_MSC_ModeSense10_0
    610            if (!USBD_MSC_CheckMedia())   return;
   \                     ??USBD_MSC_ModeSense10_1: (+1)
   \   0000000A   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD02C             BEQ      ??USBD_MSC_ModeSense10_0
    611          
    612            USBD_MSC_BulkBuf[ 0] = 0x00;
   \                     ??USBD_MSC_ModeSense10_2: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR      R1,??DataTable22_1
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    613            USBD_MSC_BulkBuf[ 1] = 0x06;
   \   00000018   0x2006             MOVS     R0,#+6
   \   0000001A   0x....             LDR      R1,??DataTable22_1
   \   0000001C   0x7048             STRB     R0,[R1, #+1]
    614            USBD_MSC_BulkBuf[ 2] = 0x00;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR      R1,??DataTable22_1
   \   00000022   0x7088             STRB     R0,[R1, #+2]
    615            USBD_MSC_BulkBuf[ 3] =(USBD_MSC_ReadOnly << 7);
   \   00000024   0x....             LDR      R0,??DataTable21
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x01C0             LSLS     R0,R0,#+7
   \   0000002A   0x....             LDR      R1,??DataTable22_1
   \   0000002C   0x70C8             STRB     R0,[R1, #+3]
    616            USBD_MSC_BulkBuf[ 4] = 0x00;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR      R1,??DataTable22_1
   \   00000032   0x7108             STRB     R0,[R1, #+4]
    617            USBD_MSC_BulkBuf[ 5] = 0x00;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR      R1,??DataTable22_1
   \   00000038   0x7148             STRB     R0,[R1, #+5]
    618            USBD_MSC_BulkBuf[ 6] = 0x00;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x....             LDR      R1,??DataTable22_1
   \   0000003E   0x7188             STRB     R0,[R1, #+6]
    619            USBD_MSC_BulkBuf[ 7] = 0x00;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x....             LDR      R1,??DataTable22_1
   \   00000044   0x71C8             STRB     R0,[R1, #+7]
    620          
    621            BulkLen = 8;
   \   00000046   0x2008             MOVS     R0,#+8
   \   00000048   0x....             LDR      R1,??DataTable22
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    622            /* Win host requests maximum number of bytes but as all we have is 8 bytes we have
    623               to tell host back that it is all we have, that's why we correct residue */
    624            if (USBD_MSC_CSW.dDataResidue > BulkLen) {
   \   0000004C   0x....             LDR      R0,??DataTable22
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x....             LDR      R1,??DataTable18
   \   00000052   0x6889             LDR      R1,[R1, #+8]
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xD207             BCS      ??USBD_MSC_ModeSense10_3
    625              USBD_MSC_CBW.dDataLength  = BulkLen;
   \   00000058   0x....             LDR      R0,??DataTable22
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x....             LDR      R1,??DataTable20_1
   \   0000005E   0x6088             STR      R0,[R1, #+8]
    626              USBD_MSC_CSW.dDataResidue = BulkLen;
   \   00000060   0x....             LDR      R0,??DataTable22
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x....             LDR      R1,??DataTable18
   \   00000066   0x6088             STR      R0,[R1, #+8]
    627            }
    628            USBD_MSC_DataInTransfer();
   \                     ??USBD_MSC_ModeSense10_3: (+1)
   \   00000068   0x.... 0x....      BL       USBD_MSC_DataInTransfer
    629          }
   \                     ??USBD_MSC_ModeSense10_0: (+1)
   \   0000006C   0xBD01             POP      {R0,PC}          ;; return
    630          
    631          
    632          /*
    633           *  USB Device MSC SCSI Read Capacity Callback
    634           *    Parameters:      None
    635           *    Return Value:    None
    636           */
    637          

   \                                 In section .text, align 2, keep-with-next
    638          void USBD_MSC_ReadCapacity (void) {
   \                     USBD_MSC_ReadCapacity: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    639          
    640            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD032             BEQ      ??USBD_MSC_ReadCapacity_0
    641            if (!USBD_MSC_CheckMedia())   return;
   \                     ??USBD_MSC_ReadCapacity_1: (+1)
   \   0000000A   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD02E             BEQ      ??USBD_MSC_ReadCapacity_0
    642          
    643            /* Last Logical Block */
    644            USBD_MSC_BulkBuf[ 0] = ((USBD_MSC_BlockCount - 1) >> 24) & 0xFF;
   \                     ??USBD_MSC_ReadCapacity_2: (+1)
   \   00000012   0x....             LDR      R0,??DataTable22_2
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x1E40             SUBS     R0,R0,#+1
   \   00000018   0x0E00             LSRS     R0,R0,#+24
   \   0000001A   0x....             LDR      R1,??DataTable22_1
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    645            USBD_MSC_BulkBuf[ 1] = ((USBD_MSC_BlockCount - 1) >> 16) & 0xFF;
   \   0000001E   0x....             LDR      R0,??DataTable22_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x1E40             SUBS     R0,R0,#+1
   \   00000024   0x0C00             LSRS     R0,R0,#+16
   \   00000026   0x....             LDR      R1,??DataTable22_1
   \   00000028   0x7048             STRB     R0,[R1, #+1]
    646            USBD_MSC_BulkBuf[ 2] = ((USBD_MSC_BlockCount - 1) >>  8) & 0xFF;
   \   0000002A   0x....             LDR      R0,??DataTable22_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x1E40             SUBS     R0,R0,#+1
   \   00000030   0x0A00             LSRS     R0,R0,#+8
   \   00000032   0x....             LDR      R1,??DataTable22_1
   \   00000034   0x7088             STRB     R0,[R1, #+2]
    647            USBD_MSC_BulkBuf[ 3] = ((USBD_MSC_BlockCount - 1) >>  0) & 0xFF;
   \   00000036   0x....             LDR      R0,??DataTable22_2
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x1E40             SUBS     R0,R0,#+1
   \   0000003C   0x....             LDR      R1,??DataTable22_1
   \   0000003E   0x70C8             STRB     R0,[R1, #+3]
    648          
    649            /* Block Length */
    650            USBD_MSC_BulkBuf[ 4] = (USBD_MSC_BlockSize        >> 24) & 0xFF;
   \   00000040   0x....             LDR      R0,??DataTable22_3
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x0E00             LSRS     R0,R0,#+24
   \   00000046   0x....             LDR      R1,??DataTable22_1
   \   00000048   0x7108             STRB     R0,[R1, #+4]
    651            USBD_MSC_BulkBuf[ 5] = (USBD_MSC_BlockSize        >> 16) & 0xFF;
   \   0000004A   0x....             LDR      R0,??DataTable22_3
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x0C00             LSRS     R0,R0,#+16
   \   00000050   0x....             LDR      R1,??DataTable22_1
   \   00000052   0x7148             STRB     R0,[R1, #+5]
    652            USBD_MSC_BulkBuf[ 6] = (USBD_MSC_BlockSize        >>  8) & 0xFF;
   \   00000054   0x....             LDR      R0,??DataTable22_3
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x0A00             LSRS     R0,R0,#+8
   \   0000005A   0x....             LDR      R1,??DataTable22_1
   \   0000005C   0x7188             STRB     R0,[R1, #+6]
    653            USBD_MSC_BulkBuf[ 7] = (USBD_MSC_BlockSize        >>  0) & 0xFF;
   \   0000005E   0x....             LDR      R0,??DataTable22_3
   \   00000060   0x6800             LDR      R0,[R0, #+0]
   \   00000062   0x....             LDR      R1,??DataTable22_1
   \   00000064   0x71C8             STRB     R0,[R1, #+7]
    654          
    655            BulkLen = 8;
   \   00000066   0x2008             MOVS     R0,#+8
   \   00000068   0x....             LDR      R1,??DataTable22
   \   0000006A   0x6008             STR      R0,[R1, #+0]
    656            USBD_MSC_DataInTransfer();
   \   0000006C   0x.... 0x....      BL       USBD_MSC_DataInTransfer
    657          }
   \                     ??USBD_MSC_ReadCapacity_0: (+1)
   \   00000070   0xBD01             POP      {R0,PC}          ;; return
    658          
    659          
    660          /*
    661           *  USB Device MSC SCSI Read Format Capacity Callback
    662           *    Parameters:      None
    663           *    Return Value:    None
    664           */
    665          

   \                                 In section .text, align 2, keep-with-next
    666          void USBD_MSC_ReadFormatCapacity (void) {
   \                     USBD_MSC_ReadFormatCapacity: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    667          
    668            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD046             BEQ      ??USBD_MSC_ReadFormatCapacity_0
    669            if (!USBD_MSC_CheckMedia())   return;
   \                     ??USBD_MSC_ReadFormatCapacity_1: (+1)
   \   0000000A   0x.... 0x....      BL       USBD_MSC_CheckMedia
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD042             BEQ      ??USBD_MSC_ReadFormatCapacity_0
    670          
    671            USBD_MSC_BulkBuf[ 0] = 0x00;
   \                     ??USBD_MSC_ReadFormatCapacity_2: (+1)
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x....             LDR      R1,??DataTable22_1
   \   00000016   0x7008             STRB     R0,[R1, #+0]
    672            USBD_MSC_BulkBuf[ 1] = 0x00;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR      R1,??DataTable22_1
   \   0000001C   0x7048             STRB     R0,[R1, #+1]
    673            USBD_MSC_BulkBuf[ 2] = 0x00;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x....             LDR      R1,??DataTable22_1
   \   00000022   0x7088             STRB     R0,[R1, #+2]
    674            USBD_MSC_BulkBuf[ 3] = 0x08;                      /* Capacity List Length */
   \   00000024   0x2008             MOVS     R0,#+8
   \   00000026   0x....             LDR      R1,??DataTable22_1
   \   00000028   0x70C8             STRB     R0,[R1, #+3]
    675          
    676            /* Block Count */
    677            USBD_MSC_BulkBuf[ 4] = (USBD_MSC_BlockCount >> 24) & 0xFF;
   \   0000002A   0x....             LDR      R0,??DataTable22_2
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0E00             LSRS     R0,R0,#+24
   \   00000030   0x....             LDR      R1,??DataTable22_1
   \   00000032   0x7108             STRB     R0,[R1, #+4]
    678            USBD_MSC_BulkBuf[ 5] = (USBD_MSC_BlockCount >> 16) & 0xFF;
   \   00000034   0x....             LDR      R0,??DataTable22_2
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x0C00             LSRS     R0,R0,#+16
   \   0000003A   0x....             LDR      R1,??DataTable22_1
   \   0000003C   0x7148             STRB     R0,[R1, #+5]
    679            USBD_MSC_BulkBuf[ 6] = (USBD_MSC_BlockCount >>  8) & 0xFF;
   \   0000003E   0x....             LDR      R0,??DataTable22_2
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x0A00             LSRS     R0,R0,#+8
   \   00000044   0x....             LDR      R1,??DataTable22_1
   \   00000046   0x7188             STRB     R0,[R1, #+6]
    680            USBD_MSC_BulkBuf[ 7] = (USBD_MSC_BlockCount >>  0) & 0xFF;
   \   00000048   0x....             LDR      R0,??DataTable22_2
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x....             LDR      R1,??DataTable22_1
   \   0000004E   0x71C8             STRB     R0,[R1, #+7]
    681          
    682            /* Block Length */
    683            USBD_MSC_BulkBuf[ 8] = 0x02;                      /* Descriptor Code: Formatted Media */
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x....             LDR      R1,??DataTable22_1
   \   00000054   0x7208             STRB     R0,[R1, #+8]
    684            USBD_MSC_BulkBuf[ 9] = (USBD_MSC_BlockSize  >> 16) & 0xFF;
   \   00000056   0x....             LDR      R0,??DataTable22_3
   \   00000058   0x6800             LDR      R0,[R0, #+0]
   \   0000005A   0x0C00             LSRS     R0,R0,#+16
   \   0000005C   0x....             LDR      R1,??DataTable22_1
   \   0000005E   0x7248             STRB     R0,[R1, #+9]
    685            USBD_MSC_BulkBuf[10] = (USBD_MSC_BlockSize  >>  8) & 0xFF;
   \   00000060   0x....             LDR      R0,??DataTable22_3
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x0A00             LSRS     R0,R0,#+8
   \   00000066   0x....             LDR      R1,??DataTable22_1
   \   00000068   0x7288             STRB     R0,[R1, #+10]
    686            USBD_MSC_BulkBuf[11] = (USBD_MSC_BlockSize  >>  0) & 0xFF;
   \   0000006A   0x....             LDR      R0,??DataTable22_3
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0x....             LDR      R1,??DataTable22_1
   \   00000070   0x72C8             STRB     R0,[R1, #+11]
    687          
    688            BulkLen = 12;
   \   00000072   0x200C             MOVS     R0,#+12
   \   00000074   0x....             LDR      R1,??DataTable22
   \   00000076   0x6008             STR      R0,[R1, #+0]
    689            /* Win host requests maximum number of bytes but as all we have is 12 bytes we have
    690               to tell host back that it is all we have, that's why we correct residue */
    691            if (USBD_MSC_CSW.dDataResidue > BulkLen) {
   \   00000078   0x....             LDR      R0,??DataTable22
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x....             LDR      R1,??DataTable22_4
   \   0000007E   0x6889             LDR      R1,[R1, #+8]
   \   00000080   0x4288             CMP      R0,R1
   \   00000082   0xD207             BCS      ??USBD_MSC_ReadFormatCapacity_3
    692              USBD_MSC_CBW.dDataLength  = BulkLen;
   \   00000084   0x....             LDR      R0,??DataTable22
   \   00000086   0x6800             LDR      R0,[R0, #+0]
   \   00000088   0x....             LDR      R1,??DataTable20_1
   \   0000008A   0x6088             STR      R0,[R1, #+8]
    693              USBD_MSC_CSW.dDataResidue = BulkLen;
   \   0000008C   0x....             LDR      R0,??DataTable22
   \   0000008E   0x6800             LDR      R0,[R0, #+0]
   \   00000090   0x....             LDR      R1,??DataTable22_4
   \   00000092   0x6088             STR      R0,[R1, #+8]
    694            }
    695          
    696            USBD_MSC_DataInTransfer();
   \                     ??USBD_MSC_ReadFormatCapacity_3: (+1)
   \   00000094   0x.... 0x....      BL       USBD_MSC_DataInTransfer
    697          }
   \                     ??USBD_MSC_ReadFormatCapacity_0: (+1)
   \   00000098   0xBD01             POP      {R0,PC}          ;; return
    698          
    699          
    700          /*
    701           *  USB Device MSC SCSI Synchronize Cache (10/16-Byte) Callback
    702           *    Parameters:      None
    703           *    Return Value:    None
    704           */
    705          

   \                                 In section .text, align 2, keep-with-next
    706          void USBD_MSC_SynchronizeCache (void) {
   \                     USBD_MSC_SynchronizeCache: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    707          
    708            /* Synchronize check always passes as we always write data dirrectly
    709               so cache is always synchronized                                          */
    710            USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR      R1,??DataTable22_4
   \   00000006   0x7308             STRB     R0,[R1, #+12]
    711            USBD_MSC_SetCSW();
   \   00000008   0x.... 0x....      BL       USBD_MSC_SetCSW
    712          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    713          
    714          
    715          /*
    716           *  USB Device MSC ATA Pass-Through Callback
    717           *    Parameters:      None
    718           *    Return Value:    None
    719           */
    720          

   \                                 In section .text, align 2, keep-with-next
    721          void USBD_MSC_ATAPassThrough (void) {
   \                     USBD_MSC_ATAPassThrough: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    722          
    723            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD02C             BEQ      ??USBD_MSC_ATAPassThrough_0
    724          
    725            USBD_MSC_BulkBuf[ 0] = 0x02;
   \                     ??USBD_MSC_ATAPassThrough_1: (+1)
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x....             LDR      R1,??DataTable22_1
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    726            USBD_MSC_BulkBuf[ 1] = 0x02;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x....             LDR      R1,??DataTable22_1
   \   00000014   0x7048             STRB     R0,[R1, #+1]
    727          
    728            BulkLen = 2;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x....             LDR      R1,??DataTable22
   \   0000001A   0x6008             STR      R0,[R1, #+0]
    729            BulkStage = MSC_BS_DATA_IN_LAST;
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x....             LDR      R1,??DataTable22_5
   \   00000020   0x7008             STRB     R0,[R1, #+0]
    730          
    731            /* Win host requests maximum number of bytes but as all we have is 2 bytes we have
    732               to tell host back that it is all we have, that's why we correct residue */
    733            if (USBD_MSC_CSW.dDataResidue > BulkLen) {
   \   00000022   0x....             LDR      R0,??DataTable22
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x....             LDR      R1,??DataTable22_4
   \   00000028   0x6889             LDR      R1,[R1, #+8]
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD207             BCS      ??USBD_MSC_ATAPassThrough_2
    734              USBD_MSC_CBW.dDataLength  = BulkLen;
   \   0000002E   0x....             LDR      R0,??DataTable22
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x....             LDR      R1,??DataTable22_6
   \   00000034   0x6088             STR      R0,[R1, #+8]
    735              USBD_MSC_CSW.dDataResidue = BulkLen;
   \   00000036   0x....             LDR      R0,??DataTable22
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x....             LDR      R1,??DataTable22_4
   \   0000003C   0x6088             STR      R0,[R1, #+8]
    736            }
    737          
    738            USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, USBD_MSC_BulkBuf, BulkLen);
   \                     ??USBD_MSC_ATAPassThrough_2: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable22
   \   00000040   0x6802             LDR      R2,[R0, #+0]
   \   00000042   0x....             LDR      R1,??DataTable22_1
   \   00000044   0x....             LDR      R0,??DataTable22_7
   \   00000046   0x7803             LDRB     R3,[R0, #+0]
   \   00000048   0x2080             MOVS     R0,#+128
   \   0000004A   0x4318             ORRS     R0,R0,R3
   \   0000004C   0x.... 0x....      BL       USBD_WriteEP
    739          
    740            USBD_MSC_CSW.dDataResidue -= BulkLen;
   \   00000050   0x....             LDR      R0,??DataTable22_4
   \   00000052   0x6880             LDR      R0,[R0, #+8]
   \   00000054   0x....             LDR      R1,??DataTable22
   \   00000056   0x6809             LDR      R1,[R1, #+0]
   \   00000058   0x1A40             SUBS     R0,R0,R1
   \   0000005A   0x....             LDR      R1,??DataTable22_4
   \   0000005C   0x6088             STR      R0,[R1, #+8]
    741            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x....             LDR      R1,??DataTable22_4
   \   00000062   0x7308             STRB     R0,[R1, #+12]
    742          }
   \                     ??USBD_MSC_ATAPassThrough_0: (+1)
   \   00000064   0xBD01             POP      {R0,PC}          ;; return
    743          
    744          /*
    745           *  USB Device MSC Service Action (16-Byte) Callback
    746           *    Parameters:      None
    747           *    Return Value:    None
    748           */
    749          
    750          

   \                                 In section .text, align 2, keep-with-next
    751          void USBD_MSC_ServiceActionIn16 (void) {
   \                     USBD_MSC_ServiceActionIn16: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    752          
    753            if (!USBD_MSC_DataInFormat()) return;
   \   00000002   0x.... 0x....      BL       USBD_MSC_DataInFormat
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD021             BEQ      ??USBD_MSC_ServiceActionIn16_0
    754          
    755            USBD_MSC_BulkBuf[ 0] = 0x20;
   \                     ??USBD_MSC_ServiceActionIn16_1: (+1)
   \   0000000A   0x2020             MOVS     R0,#+32
   \   0000000C   0x....             LDR      R1,??DataTable22_1
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    756            USBD_MSC_BulkBuf[ 1] = 0x00;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR      R1,??DataTable22_1
   \   00000014   0x7048             STRB     R0,[R1, #+1]
    757          
    758            USBD_MSC_BulkBuf[31] = 0x00;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             LDR      R1,??DataTable22_1
   \   0000001A   0x77C8             STRB     R0,[R1, #+31]
    759          
    760            BulkLen = 32;
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x....             LDR      R1,??DataTable22
   \   00000020   0x6008             STR      R0,[R1, #+0]
    761            BulkStage = MSC_BS_DATA_IN_LAST;
   \   00000022   0x2003             MOVS     R0,#+3
   \   00000024   0x....             LDR      R1,??DataTable22_5
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    762          
    763            USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, USBD_MSC_BulkBuf, BulkLen);
   \   00000028   0x....             LDR      R0,??DataTable22
   \   0000002A   0x6802             LDR      R2,[R0, #+0]
   \   0000002C   0x....             LDR      R1,??DataTable22_1
   \   0000002E   0x....             LDR      R0,??DataTable22_7
   \   00000030   0x7803             LDRB     R3,[R0, #+0]
   \   00000032   0x2080             MOVS     R0,#+128
   \   00000034   0x4318             ORRS     R0,R0,R3
   \   00000036   0x.... 0x....      BL       USBD_WriteEP
    764          
    765            USBD_MSC_CSW.dDataResidue -= BulkLen;
   \   0000003A   0x....             LDR      R0,??DataTable25
   \   0000003C   0x6880             LDR      R0,[R0, #+8]
   \   0000003E   0x....             LDR      R1,??DataTable22
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0x1A40             SUBS     R0,R0,R1
   \   00000044   0x....             LDR      R1,??DataTable25
   \   00000046   0x6088             STR      R0,[R1, #+8]
    766            USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x....             LDR      R1,??DataTable25
   \   0000004C   0x7308             STRB     R0,[R1, #+12]
    767          }
   \                     ??USBD_MSC_ServiceActionIn16_0: (+1)
   \   0000004E   0xBD01             POP      {R0,PC}          ;; return
    768          
    769          
    770          /*
    771           *  USB Device MSC Get Command Block Wrapper Callback
    772           *    Parameters:      None
    773           *    Return Value:    None
    774           */
    775          

   \                                 In section .text, align 2, keep-with-next
    776          void USBD_MSC_GetCBW (void) {
   \                     USBD_MSC_GetCBW: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    777            U32 n;
    778          
    779            for (n = 0; n < BulkLen; n++) {
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xE004             B        ??USBD_MSC_GetCBW_0
    780              *((U8 *)&USBD_MSC_CBW + n) = USBD_MSC_BulkBuf[n];
   \                     ??USBD_MSC_GetCBW_1: (+1)
   \   00000006   0x....             LDR      R1,??DataTable25_1
   \   00000008   0x5C09             LDRB     R1,[R1, R0]
   \   0000000A   0x....             LDR      R2,??DataTable25_2
   \   0000000C   0x5411             STRB     R1,[R2, R0]
    781            }
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \                     ??USBD_MSC_GetCBW_0: (+1)
   \   00000010   0x....             LDR      R1,??DataTable25_3
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x4288             CMP      R0,R1
   \   00000016   0xD3F6             BCC      ??USBD_MSC_GetCBW_1
    782            if ((BulkLen == sizeof(USBD_MSC_CBW)) && (USBD_MSC_CBW.dSignature == MSC_CBW_Signature)) {
   \   00000018   0x....             LDR      R0,??DataTable25_3
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x281F             CMP      R0,#+31
   \   0000001E   0xD000             BEQ      .+4
   \   00000020   0xE0D5             B        ??USBD_MSC_GetCBW_2
   \   00000022   0x....             LDR      R0,??DataTable25_2
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x....             LDR      R1,??DataTable25_4  ;; 0x43425355
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD000             BEQ      .+4
   \   0000002C   0xE0CF             B        ??USBD_MSC_GetCBW_2
    783              /* Valid USBD_MSC_CBW */
    784              USBD_MSC_CSW.dTag = USBD_MSC_CBW.dTag;
   \   0000002E   0x....             LDR      R0,??DataTable25_2
   \   00000030   0x6840             LDR      R0,[R0, #+4]
   \   00000032   0x....             LDR      R1,??DataTable25
   \   00000034   0x6048             STR      R0,[R1, #+4]
    785              USBD_MSC_CSW.dDataResidue = USBD_MSC_CBW.dDataLength;
   \   00000036   0x....             LDR      R0,??DataTable25_2
   \   00000038   0x6880             LDR      R0,[R0, #+8]
   \   0000003A   0x....             LDR      R1,??DataTable25
   \   0000003C   0x6088             STR      R0,[R1, #+8]
    786              if ((USBD_MSC_CBW.bLUN      >  0) ||
    787                  (USBD_MSC_CBW.bCBLength <  1) ||
    788                  (USBD_MSC_CBW.bCBLength > 16)) {
   \   0000003E   0x....             LDR      R0,??DataTable25_2
   \   00000040   0x7B40             LDRB     R0,[R0, #+13]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD107             BNE      ??USBD_MSC_GetCBW_3
   \   00000046   0x....             LDR      R0,??DataTable25_2
   \   00000048   0x7B80             LDRB     R0,[R0, #+14]
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD003             BEQ      ??USBD_MSC_GetCBW_3
   \   0000004E   0x....             LDR      R0,??DataTable25_2
   \   00000050   0x7B80             LDRB     R0,[R0, #+14]
   \   00000052   0x2811             CMP      R0,#+17
   \   00000054   0xDB05             BLT      ??USBD_MSC_GetCBW_4
    789          fail:
    790                USBD_MSC_CSW.bStatus = CSW_CMD_FAILED;
   \                     ??USBD_MSC_GetCBW_3: (+1)
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x....             LDR      R1,??DataTable25
   \   0000005A   0x7308             STRB     R0,[R1, #+12]
    791                USBD_MSC_SetCSW();
   \   0000005C   0x.... 0x....      BL       USBD_MSC_SetCSW
   \   00000060   0xE0D7             B        ??USBD_MSC_GetCBW_5
    792              } else {
    793                switch (USBD_MSC_CBW.CB[0]) {
   \                     ??USBD_MSC_GetCBW_4: (+1)
   \   00000062   0x....             LDR      R0,??DataTable25_2
   \   00000064   0x7BC0             LDRB     R0,[R0, #+15]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD02D             BEQ      ??USBD_MSC_GetCBW_6
   \   0000006A   0x2803             CMP      R0,#+3
   \   0000006C   0xD02E             BEQ      ??USBD_MSC_GetCBW_7
   \   0000006E   0x2804             CMP      R0,#+4
   \   00000070   0xD02F             BEQ      ??USBD_MSC_GetCBW_8
   \   00000072   0x2812             CMP      R0,#+18
   \   00000074   0xD02E             BEQ      ??USBD_MSC_GetCBW_9
   \   00000076   0x2815             CMP      R0,#+21
   \   00000078   0xD035             BEQ      ??USBD_MSC_GetCBW_10
   \   0000007A   0x281A             CMP      R0,#+26
   \   0000007C   0xD034             BEQ      ??USBD_MSC_GetCBW_11
   \   0000007E   0x281B             CMP      R0,#+27
   \   00000080   0xD02B             BEQ      ??USBD_MSC_GetCBW_12
   \   00000082   0x281E             CMP      R0,#+30
   \   00000084   0xD02C             BEQ      ??USBD_MSC_GetCBW_13
   \   00000086   0x2823             CMP      R0,#+35
   \   00000088   0xD035             BEQ      ??USBD_MSC_GetCBW_14
   \   0000008A   0x2825             CMP      R0,#+37
   \   0000008C   0xD036             BEQ      ??USBD_MSC_GetCBW_15
   \   0000008E   0x2828             CMP      R0,#+40
   \   00000090   0xD03D             BEQ      ??USBD_MSC_GetCBW_16
   \   00000092   0x282A             CMP      R0,#+42
   \   00000094   0xD053             BEQ      ??USBD_MSC_GetCBW_17
   \   00000096   0x282F             CMP      R0,#+47
   \   00000098   0xD069             BEQ      ??USBD_MSC_GetCBW_18
   \   0000009A   0x2835             CMP      R0,#+53
   \   0000009C   0xD100             BNE      .+4
   \   0000009E   0xE08B             B        ??USBD_MSC_GetCBW_19
   \   000000A0   0x2855             CMP      R0,#+85
   \   000000A2   0xD024             BEQ      ??USBD_MSC_GetCBW_20
   \   000000A4   0x285A             CMP      R0,#+90
   \   000000A6   0xD023             BEQ      ??USBD_MSC_GetCBW_21
   \   000000A8   0x2891             CMP      R0,#+145
   \   000000AA   0xD100             BNE      .+4
   \   000000AC   0xE084             B        ??USBD_MSC_GetCBW_19
   \   000000AE   0x289E             CMP      R0,#+158
   \   000000B0   0xD02A             BEQ      ??USBD_MSC_GetCBW_22
   \   000000B2   0x28A1             CMP      R0,#+161
   \   000000B4   0xD025             BEQ      ??USBD_MSC_GetCBW_23
   \   000000B6   0x28A3             CMP      R0,#+163
   \   000000B8   0xD100             BNE      .+4
   \   000000BA   0xE080             B        ??USBD_MSC_GetCBW_24
   \   000000BC   0x28A8             CMP      R0,#+168
   \   000000BE   0xD026             BEQ      ??USBD_MSC_GetCBW_16
   \   000000C0   0x28AA             CMP      R0,#+170
   \   000000C2   0xD03C             BEQ      ??USBD_MSC_GetCBW_17
   \   000000C4   0xE082             B        ??USBD_MSC_GetCBW_25
    794                  case SCSI_TEST_UNIT_READY:
    795                    USBD_MSC_TestUnitReady();
   \                     ??USBD_MSC_GetCBW_6: (+1)
   \   000000C6   0x.... 0x....      BL       USBD_MSC_TestUnitReady
    796                    break;
   \   000000CA   0xE0A2             B        ??USBD_MSC_GetCBW_5
    797                  case SCSI_REQUEST_SENSE:
    798                    USBD_MSC_RequestSense();
   \                     ??USBD_MSC_GetCBW_7: (+1)
   \   000000CC   0x.... 0x....      BL       USBD_MSC_RequestSense
    799                    break;
   \   000000D0   0xE09F             B        ??USBD_MSC_GetCBW_5
    800                  case SCSI_FORMAT_UNIT:
    801                    goto fail;
   \                     ??USBD_MSC_GetCBW_8: (+1)
   \   000000D2   0xE7C0             B        ??USBD_MSC_GetCBW_3
    802                  case SCSI_INQUIRY:
    803                    USBD_MSC_Inquiry();
   \                     ??USBD_MSC_GetCBW_9: (+1)
   \   000000D4   0x.... 0x....      BL       USBD_MSC_Inquiry
    804                    break;
   \   000000D8   0xE09B             B        ??USBD_MSC_GetCBW_5
    805                  case SCSI_START_STOP_UNIT:
    806                    USBD_MSC_StartStopUnit();
   \                     ??USBD_MSC_GetCBW_12: (+1)
   \   000000DA   0x.... 0x....      BL       USBD_MSC_StartStopUnit
    807                    break;
   \   000000DE   0xE098             B        ??USBD_MSC_GetCBW_5
    808                  case SCSI_MEDIA_REMOVAL:
    809                    USBD_MSC_MediaRemoval();
   \                     ??USBD_MSC_GetCBW_13: (+1)
   \   000000E0   0x.... 0x....      BL       USBD_MSC_MediaRemoval
    810                    break;
   \   000000E4   0xE095             B        ??USBD_MSC_GetCBW_5
    811                  case SCSI_MODE_SELECT6:
    812                    goto fail;
   \                     ??USBD_MSC_GetCBW_10: (+1)
   \   000000E6   0xE7B6             B        ??USBD_MSC_GetCBW_3
    813                  case SCSI_MODE_SENSE6:
    814                    USBD_MSC_ModeSense6();
   \                     ??USBD_MSC_GetCBW_11: (+1)
   \   000000E8   0x.... 0x....      BL       USBD_MSC_ModeSense6
    815                    break;
   \   000000EC   0xE091             B        ??USBD_MSC_GetCBW_5
    816                  case SCSI_MODE_SELECT10:
    817                    goto fail;
   \                     ??USBD_MSC_GetCBW_20: (+1)
   \   000000EE   0xE7B2             B        ??USBD_MSC_GetCBW_3
    818                  case SCSI_MODE_SENSE10:
    819                    USBD_MSC_ModeSense10();
   \                     ??USBD_MSC_GetCBW_21: (+1)
   \   000000F0   0x.... 0x....      BL       USBD_MSC_ModeSense10
    820                    break;
   \   000000F4   0xE08D             B        ??USBD_MSC_GetCBW_5
    821                  case SCSI_READ_FORMAT_CAPACITIES:
    822                    USBD_MSC_ReadFormatCapacity();
   \                     ??USBD_MSC_GetCBW_14: (+1)
   \   000000F6   0x.... 0x....      BL       USBD_MSC_ReadFormatCapacity
    823                    break;
   \   000000FA   0xE08A             B        ??USBD_MSC_GetCBW_5
    824                  case SCSI_READ_CAPACITY:
    825                    USBD_MSC_ReadCapacity();
   \                     ??USBD_MSC_GetCBW_15: (+1)
   \   000000FC   0x.... 0x....      BL       USBD_MSC_ReadCapacity
    826                    break;
   \   00000100   0xE087             B        ??USBD_MSC_GetCBW_5
    827                  case SCSI_ATA_COMMAND_PASS_THROUGH12:
    828                    USBD_MSC_ATAPassThrough ();
   \                     ??USBD_MSC_GetCBW_23: (+1)
   \   00000102   0x.... 0x....      BL       USBD_MSC_ATAPassThrough
    829                    break;
   \   00000106   0xE084             B        ??USBD_MSC_GetCBW_5
    830                  case SCSI_SERVICE_ACTION_IN16:
    831                    USBD_MSC_ServiceActionIn16 ();
   \                     ??USBD_MSC_GetCBW_22: (+1)
   \   00000108   0x.... 0x....      BL       USBD_MSC_ServiceActionIn16
    832                    break;
   \   0000010C   0xE081             B        ??USBD_MSC_GetCBW_5
    833                  case SCSI_READ10:
    834                  case SCSI_READ12:
    835                    if (USBD_MSC_RWSetup()) {
   \                     ??USBD_MSC_GetCBW_16: (+1)
   \   0000010E   0x.... 0x....      BL       USBD_MSC_RWSetup
   \   00000112   0x2800             CMP      R0,#+0
   \   00000114   0xD012             BEQ      ??USBD_MSC_GetCBW_26
    836                      if ((USBD_MSC_CBW.bmFlags & 0x80) != 0) {
   \   00000116   0x....             LDR      R0,??DataTable25_2
   \   00000118   0x7B00             LDRB     R0,[R0, #+12]
   \   0000011A   0x0600             LSLS     R0,R0,#+24
   \   0000011C   0xD505             BPL      ??USBD_MSC_GetCBW_27
    837                        BulkStage = MSC_BS_DATA_IN;
   \   0000011E   0x2002             MOVS     R0,#+2
   \   00000120   0x....             LDR      R1,??DataTable27
   \   00000122   0x7008             STRB     R0,[R1, #+0]
    838                        USBD_MSC_MemoryRead();
   \   00000124   0x.... 0x....      BL       USBD_MSC_MemoryRead
   \   00000128   0xE008             B        ??USBD_MSC_GetCBW_26
    839                      } else {                       /* direction mismatch */
    840                        USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \                     ??USBD_MSC_GetCBW_27: (+1)
   \   0000012A   0x....             LDR      R0,??DataTable27_1
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x.... 0x....      BL       USBD_MSC_SetStallEP
    841                        USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
   \   00000132   0x2002             MOVS     R0,#+2
   \   00000134   0x....             LDR      R1,??DataTable25
   \   00000136   0x7308             STRB     R0,[R1, #+12]
    842                        USBD_MSC_SetCSW();
   \   00000138   0x.... 0x....      BL       USBD_MSC_SetCSW
    843                      }
    844                    }
    845                    break;
   \                     ??USBD_MSC_GetCBW_26: (+1)
   \   0000013C   0xE069             B        ??USBD_MSC_GetCBW_5
    846                  case SCSI_WRITE10:
    847                  case SCSI_WRITE12:
    848                    if (USBD_MSC_RWSetup()) {
   \                     ??USBD_MSC_GetCBW_17: (+1)
   \   0000013E   0x.... 0x....      BL       USBD_MSC_RWSetup
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD012             BEQ      ??USBD_MSC_GetCBW_28
    849                      if ((USBD_MSC_CBW.bmFlags & 0x80) == 0) {
   \   00000146   0x....             LDR      R0,??DataTable25_2
   \   00000148   0x7B00             LDRB     R0,[R0, #+12]
   \   0000014A   0x0600             LSLS     R0,R0,#+24
   \   0000014C   0xD403             BMI      ??USBD_MSC_GetCBW_29
    850                        BulkStage = MSC_BS_DATA_OUT;
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x....             LDR      R1,??DataTable27
   \   00000152   0x7008             STRB     R0,[R1, #+0]
   \   00000154   0xE00A             B        ??USBD_MSC_GetCBW_28
    851                      } else {                       /* direction mismatch */
    852                        USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \                     ??USBD_MSC_GetCBW_29: (+1)
   \   00000156   0x....             LDR      R0,??DataTable27_2
   \   00000158   0x7801             LDRB     R1,[R0, #+0]
   \   0000015A   0x2080             MOVS     R0,#+128
   \   0000015C   0x4308             ORRS     R0,R0,R1
   \   0000015E   0x.... 0x....      BL       USBD_MSC_SetStallEP
    853                        USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
   \   00000162   0x2002             MOVS     R0,#+2
   \   00000164   0x....             LDR      R1,??DataTable25
   \   00000166   0x7308             STRB     R0,[R1, #+12]
    854                        USBD_MSC_SetCSW();
   \   00000168   0x.... 0x....      BL       USBD_MSC_SetCSW
    855                      }
    856                    }
    857                    break;
   \                     ??USBD_MSC_GetCBW_28: (+1)
   \   0000016C   0xE051             B        ??USBD_MSC_GetCBW_5
    858                  case SCSI_VERIFY10:
    859                    if ((USBD_MSC_CBW.CB[1] & 0x02) == 0) {
   \                     ??USBD_MSC_GetCBW_18: (+1)
   \   0000016E   0x....             LDR      R0,??DataTable25_2
   \   00000170   0x7C00             LDRB     R0,[R0, #+16]
   \   00000172   0x0780             LSLS     R0,R0,#+30
   \   00000174   0xD405             BMI      ??USBD_MSC_GetCBW_30
    860                      // BYTCHK = 0 -> CRC Check (not implemented)
    861                      USBD_MSC_CSW.bStatus = CSW_CMD_PASSED;
   \   00000176   0x2000             MOVS     R0,#+0
   \   00000178   0x....             LDR      R1,??DataTable25
   \   0000017A   0x7308             STRB     R0,[R1, #+12]
    862                      USBD_MSC_SetCSW();
   \   0000017C   0x.... 0x....      BL       USBD_MSC_SetCSW
    863                      break;
   \   00000180   0xE047             B        ??USBD_MSC_GetCBW_5
    864                    }
    865                    if (USBD_MSC_RWSetup()) {
   \                     ??USBD_MSC_GetCBW_30: (+1)
   \   00000182   0x.... 0x....      BL       USBD_MSC_RWSetup
   \   00000186   0x2800             CMP      R0,#+0
   \   00000188   0xD015             BEQ      ??USBD_MSC_GetCBW_31
    866                      if ((USBD_MSC_CBW.bmFlags & 0x80) == 0) {
   \   0000018A   0x....             LDR      R0,??DataTable25_2
   \   0000018C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000018E   0x0600             LSLS     R0,R0,#+24
   \   00000190   0xD406             BMI      ??USBD_MSC_GetCBW_32
    867                        BulkStage = MSC_BS_DATA_OUT;
   \   00000192   0x2001             MOVS     R0,#+1
   \   00000194   0x....             LDR      R1,??DataTable27
   \   00000196   0x7008             STRB     R0,[R1, #+0]
    868                        MemOK = __TRUE;
   \   00000198   0x2001             MOVS     R0,#+1
   \   0000019A   0x....             LDR      R1,??DataTable27_3
   \   0000019C   0x6008             STR      R0,[R1, #+0]
   \   0000019E   0xE00A             B        ??USBD_MSC_GetCBW_31
    869                      } else {
    870                        USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \                     ??USBD_MSC_GetCBW_32: (+1)
   \   000001A0   0x....             LDR      R0,??DataTable27_2
   \   000001A2   0x7801             LDRB     R1,[R0, #+0]
   \   000001A4   0x2080             MOVS     R0,#+128
   \   000001A6   0x4308             ORRS     R0,R0,R1
   \   000001A8   0x.... 0x....      BL       USBD_MSC_SetStallEP
    871                        USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
   \   000001AC   0x2002             MOVS     R0,#+2
   \   000001AE   0x....             LDR      R1,??DataTable25
   \   000001B0   0x7308             STRB     R0,[R1, #+12]
    872                        USBD_MSC_SetCSW();
   \   000001B2   0x.... 0x....      BL       USBD_MSC_SetCSW
    873                      }
    874                    }
    875                    break;
   \                     ??USBD_MSC_GetCBW_31: (+1)
   \   000001B6   0xE02C             B        ??USBD_MSC_GetCBW_5
    876                  case SCSI_SYNC_CACHE10:
    877                  case SCSI_SYNC_CACHE16:
    878                    USBD_MSC_SynchronizeCache();
   \                     ??USBD_MSC_GetCBW_19: (+1)
   \   000001B8   0x.... 0x....      BL       USBD_MSC_SynchronizeCache
    879                    break;
   \   000001BC   0xE029             B        ??USBD_MSC_GetCBW_5
    880                  case SCSI_REPORT_ID_INFO:
    881                    USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \                     ??USBD_MSC_GetCBW_24: (+1)
   \   000001BE   0x....             LDR      R0,??DataTable27_2
   \   000001C0   0x7801             LDRB     R1,[R0, #+0]
   \   000001C2   0x2080             MOVS     R0,#+128
   \   000001C4   0x4308             ORRS     R0,R0,R1
   \   000001C6   0x.... 0x....      BL       USBD_MSC_SetStallEP
    882                    goto fail;
   \   000001CA   0xE744             B        ??USBD_MSC_GetCBW_3
    883                  default:
    884                    goto fail;
   \                     ??USBD_MSC_GetCBW_25: (+1)
   \   000001CC   0xE743             B        ??USBD_MSC_GetCBW_3
    885                }
    886              }
    887            } else {
    888              /* Invalid USBD_MSC_CBW */
    889              USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \                     ??USBD_MSC_GetCBW_2: (+1)
   \   000001CE   0x....             LDR      R0,??DataTable27_2
   \   000001D0   0x7801             LDRB     R1,[R0, #+0]
   \   000001D2   0x2080             MOVS     R0,#+128
   \   000001D4   0x4308             ORRS     R0,R0,R1
   \   000001D6   0x.... 0x....      BL       USBD_MSC_SetStallEP
    890                                                     /* set EP to stay stalled */
    891              USBD_EndPointStall |=  ((1 << 16) << (usbd_msc_ep_bulkin & 0x0F));
   \   000001DA   0x....             LDR      R0,??DataTable27_4
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x2180             MOVS     R1,#+128
   \   000001E0   0x0249             LSLS     R1,R1,#+9        ;; #+65536
   \   000001E2   0x....             LDR      R2,??DataTable27_2
   \   000001E4   0x7812             LDRB     R2,[R2, #+0]
   \   000001E6   0x0712             LSLS     R2,R2,#+28       ;; ZeroExtS R2,R2,#+28,#+28
   \   000001E8   0x0F12             LSRS     R2,R2,#+28
   \   000001EA   0x4091             LSLS     R1,R1,R2
   \   000001EC   0x4301             ORRS     R1,R1,R0
   \   000001EE   0x....             LDR      R0,??DataTable27_4
   \   000001F0   0x6001             STR      R1,[R0, #+0]
    892              USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \   000001F2   0x....             LDR      R0,??DataTable27_1
   \   000001F4   0x7800             LDRB     R0,[R0, #+0]
   \   000001F6   0x.... 0x....      BL       USBD_MSC_SetStallEP
    893                                                     /* set EP to stay stalled */
    894              USBD_EndPointStall |=  1 << usbd_msc_ep_bulkout;
   \   000001FA   0x....             LDR      R0,??DataTable27_4
   \   000001FC   0x6800             LDR      R0,[R0, #+0]
   \   000001FE   0x2101             MOVS     R1,#+1
   \   00000200   0x....             LDR      R2,??DataTable27_1
   \   00000202   0x7812             LDRB     R2,[R2, #+0]
   \   00000204   0x4091             LSLS     R1,R1,R2
   \   00000206   0x4301             ORRS     R1,R1,R0
   \   00000208   0x....             LDR      R0,??DataTable27_4
   \   0000020A   0x6001             STR      R1,[R0, #+0]
    895              BulkStage = MSC_BS_ERROR;
   \   0000020C   0x2006             MOVS     R0,#+6
   \   0000020E   0x....             LDR      R1,??DataTable27
   \   00000210   0x7008             STRB     R0,[R1, #+0]
    896            }
    897          }
   \                     ??USBD_MSC_GetCBW_5: (+1)
   \   00000212   0xBD01             POP      {R0,PC}          ;; return
    898          
    899          
    900          /*
    901           *  USB Device MSC Set Command Status Wrapper Callback
    902           *    Parameters:      None
    903           *    Return Value:    None
    904           */
    905          

   \                                 In section .text, align 2, keep-with-next
    906          void USBD_MSC_SetCSW (void) {
   \                     USBD_MSC_SetCSW: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    907          
    908            USBD_MSC_CSW.dSignature = MSC_CSW_Signature;
   \   00000002   0x....             LDR      R0,??DataTable27_5  ;; 0x53425355
   \   00000004   0x....             LDR      R1,??DataTable25
   \   00000006   0x6008             STR      R0,[R1, #+0]
    909            USBD_WriteEP(usbd_msc_ep_bulkin | 0x80, (U8 *)&USBD_MSC_CSW, sizeof(USBD_MSC_CSW));
   \   00000008   0x220D             MOVS     R2,#+13
   \   0000000A   0x....             LDR      R1,??DataTable25
   \   0000000C   0x....             LDR      R0,??DataTable27_2
   \   0000000E   0x7803             LDRB     R3,[R0, #+0]
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0x4318             ORRS     R0,R0,R3
   \   00000014   0x.... 0x....      BL       USBD_WriteEP
    910            BulkStage = MSC_BS_CSW;
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0x....             LDR      R1,??DataTable27
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    911          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    912          
    913          
    914          /*
    915           *  USB Device MSC Bulk In Callback
    916           *    Parameters:      None
    917           *    Return Value:    None
    918           */
    919          

   \                                 In section .text, align 2, keep-with-next
    920          void USBD_MSC_BulkIn (void) {
   \                     USBD_MSC_BulkIn: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    921          
    922            switch (BulkStage) {
   \   00000002   0x....             LDR      R0,??DataTable27
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD006             BEQ      ??USBD_MSC_BulkIn_0
   \   0000000A   0xD31D             BCC      ??USBD_MSC_BulkIn_1
   \   0000000C   0x2804             CMP      R0,#+4
   \   0000000E   0xD00F             BEQ      ??USBD_MSC_BulkIn_2
   \   00000010   0xD30B             BCC      ??USBD_MSC_BulkIn_3
   \   00000012   0x2805             CMP      R0,#+5
   \   00000014   0xD015             BEQ      ??USBD_MSC_BulkIn_4
   \   00000016   0xE017             B        ??USBD_MSC_BulkIn_1
    923              case MSC_BS_DATA_IN:
    924                switch (USBD_MSC_CBW.CB[0]) {
   \                     ??USBD_MSC_BulkIn_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable25_2
   \   0000001A   0x7BC0             LDRB     R0,[R0, #+15]
   \   0000001C   0x2828             CMP      R0,#+40
   \   0000001E   0xD001             BEQ      ??USBD_MSC_BulkIn_5
   \   00000020   0x28A8             CMP      R0,#+168
   \   00000022   0xD101             BNE      ??USBD_MSC_BulkIn_6
    925                  case SCSI_READ10:
    926                  case SCSI_READ12:
    927                    USBD_MSC_MemoryRead();
   \                     ??USBD_MSC_BulkIn_5: (+1)
   \   00000024   0x.... 0x....      BL       USBD_MSC_MemoryRead
    928                    break;
    929                }
    930                break;
   \                     ??USBD_MSC_BulkIn_6: (+1)
   \   00000028   0xE00E             B        ??USBD_MSC_BulkIn_1
    931              case MSC_BS_DATA_IN_LAST:
    932                USBD_MSC_SetCSW();
   \                     ??USBD_MSC_BulkIn_3: (+1)
   \   0000002A   0x.... 0x....      BL       USBD_MSC_SetCSW
    933                break;
   \   0000002E   0xE00B             B        ??USBD_MSC_BulkIn_1
    934              case MSC_BS_DATA_IN_LAST_STALL:
    935                USBD_MSC_SetStallEP(usbd_msc_ep_bulkin | 0x80);
   \                     ??USBD_MSC_BulkIn_2: (+1)
   \   00000030   0x....             LDR      R0,??DataTable27_2
   \   00000032   0x7801             LDRB     R1,[R0, #+0]
   \   00000034   0x2080             MOVS     R0,#+128
   \   00000036   0x4308             ORRS     R0,R0,R1
   \   00000038   0x.... 0x....      BL       USBD_MSC_SetStallEP
    936                USBD_MSC_SetCSW();
   \   0000003C   0x.... 0x....      BL       USBD_MSC_SetCSW
    937                break;
   \   00000040   0xE002             B        ??USBD_MSC_BulkIn_1
    938              case MSC_BS_CSW:
    939                BulkStage = MSC_BS_CBW;
   \                     ??USBD_MSC_BulkIn_4: (+1)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR      R1,??DataTable27
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    940                break;
    941            }
    942          }
   \                     ??USBD_MSC_BulkIn_1: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    943          
    944          
    945          /*
    946           *  USB Device MSC Bulk Out Callback
    947           *    Parameters:      None
    948           *    Return Value:    None
    949           */
    950          

   \                                 In section .text, align 2, keep-with-next
    951          void USBD_MSC_BulkOut (void) {
   \                     USBD_MSC_BulkOut: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    952          
    953            switch (BulkStage) {
   \   00000002   0x....             LDR      R0,??DataTable27
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD004             BEQ      ??USBD_MSC_BulkOut_0
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD005             BEQ      ??USBD_MSC_BulkOut_1
   \   0000000E   0x2805             CMP      R0,#+5
   \   00000010   0xD011             BEQ      ??USBD_MSC_BulkOut_2
   \   00000012   0xE011             B        ??USBD_MSC_BulkOut_3
    954              case MSC_BS_CBW:
    955                USBD_MSC_GetCBW();
   \                     ??USBD_MSC_BulkOut_0: (+1)
   \   00000014   0x.... 0x....      BL       USBD_MSC_GetCBW
    956                break;
   \   00000018   0xE017             B        ??USBD_MSC_BulkOut_4
    957              case MSC_BS_DATA_OUT:
    958                switch (USBD_MSC_CBW.CB[0]) {
   \                     ??USBD_MSC_BulkOut_1: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable27_6
   \   0000001C   0x7BC0             LDRB     R0,[R0, #+15]
   \   0000001E   0x282A             CMP      R0,#+42
   \   00000020   0xD003             BEQ      ??USBD_MSC_BulkOut_5
   \   00000022   0x282F             CMP      R0,#+47
   \   00000024   0xD004             BEQ      ??USBD_MSC_BulkOut_6
   \   00000026   0x28AA             CMP      R0,#+170
   \   00000028   0xD104             BNE      ??USBD_MSC_BulkOut_7
    959                  case SCSI_WRITE10:
    960                  case SCSI_WRITE12:
    961                    USBD_MSC_MemoryWrite();
   \                     ??USBD_MSC_BulkOut_5: (+1)
   \   0000002A   0x.... 0x....      BL       USBD_MSC_MemoryWrite
    962                    break;
   \   0000002E   0xE001             B        ??USBD_MSC_BulkOut_7
    963                  case SCSI_VERIFY10:
    964                    USBD_MSC_MemoryVerify();
   \                     ??USBD_MSC_BulkOut_6: (+1)
   \   00000030   0x.... 0x....      BL       USBD_MSC_MemoryVerify
    965                    break;
    966                }
    967                break;
   \                     ??USBD_MSC_BulkOut_7: (+1)
   \   00000034   0xE009             B        ??USBD_MSC_BulkOut_4
    968              case MSC_BS_CSW:
    969                break;
   \                     ??USBD_MSC_BulkOut_2: (+1)
   \   00000036   0xE008             B        ??USBD_MSC_BulkOut_4
    970              default:
    971                USBD_MSC_SetStallEP(usbd_msc_ep_bulkout);
   \                     ??USBD_MSC_BulkOut_3: (+1)
   \   00000038   0x....             LDR      R0,??DataTable27_1
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x.... 0x....      BL       USBD_MSC_SetStallEP
    972                USBD_MSC_CSW.bStatus = CSW_PHASE_ERROR;
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x....             LDR      R1,??DataTable27_7
   \   00000044   0x7308             STRB     R0,[R1, #+12]
    973                USBD_MSC_SetCSW();
   \   00000046   0x.... 0x....      BL       USBD_MSC_SetCSW
    974                break;
    975            }
    976          }
   \                     ??USBD_MSC_BulkOut_4: (+1)
   \   0000004A   0xBD01             POP      {R0,PC}          ;; return
    977          
    978          
    979          /*
    980           *  USB Device MSC Bulk In Endpoint Event Callback
    981           *    Parameters:      event: not used (just for compatibility)
    982           *    Return Value:    None
    983           */
    984          

   \                                 In section .text, align 2, keep-with-next
    985          void USBD_MSC_EP_BULKIN_Event (U32 event) {
   \                     USBD_MSC_EP_BULKIN_Event: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    986            USBD_MSC_BulkIn();
   \   00000002   0x.... 0x....      BL       USBD_MSC_BulkIn
    987          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    988          
    989          
    990          /*
    991           *  USB Device MSC Bulk Out Endpoint Event Callback
    992           *    Parameters:      event: not used (just for compatibility)
    993           *    Return Value:    None
    994           */
    995          

   \                                 In section .text, align 2, keep-with-next
    996          void USBD_MSC_EP_BULKOUT_Event (U32 event) {
   \                     USBD_MSC_EP_BULKOUT_Event: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    997            BulkLen = USBD_ReadEP(usbd_msc_ep_bulkout, USBD_MSC_BulkBuf);
   \   00000002   0x....             LDR      R1,??DataTable27_8
   \   00000004   0x....             LDR      R0,??DataTable27_1
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x.... 0x....      BL       USBD_ReadEP
   \   0000000C   0x....             LDR      R1,??DataTable27_9
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    998            USBD_MSC_BulkOut();
   \   00000010   0x.... 0x....      BL       USBD_MSC_BulkOut
    999          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
   1000          
   1001          
   1002          /*
   1003           *  USB Device MSC Bulk In/Out Endpoint Event Callback
   1004           *    Parameters:      event: USB Device Event
   1005           *                       USBD_EVT_OUT: Output Event
   1006           *                       USBD_EVT_IN:  Input Event
   1007           *    Return Value:    None
   1008           */
   1009          

   \                                 In section .text, align 2, keep-with-next
   1010          void USBD_MSC_EP_BULK_Event (U32 event) {
   \                     USBD_MSC_EP_BULK_Event: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1011            if (event & USBD_EVT_OUT) {
   \   00000004   0x0760             LSLS     R0,R4,#+29
   \   00000006   0xD502             BPL      ??USBD_MSC_EP_BULK_Event_0
   1012              USBD_MSC_EP_BULKOUT_Event (0);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       USBD_MSC_EP_BULKOUT_Event
   1013            }
   1014            if (event & USBD_EVT_IN) {
   \                     ??USBD_MSC_EP_BULK_Event_0: (+1)
   \   0000000E   0x0720             LSLS     R0,R4,#+28
   \   00000010   0xD502             BPL      ??USBD_MSC_EP_BULK_Event_1
   1015              USBD_MSC_EP_BULKIN_Event (0);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       USBD_MSC_EP_BULKIN_Event
   1016            }
   1017          }
   \                     ??USBD_MSC_EP_BULK_Event_1: (+1)
   \   00000018   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     USBD_EndPointHalt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     USBD_SetupPacket

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x53425355         DC32     0x53425355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     USBD_EndPointStall

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     USBD_MSC_MediaReady

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     USBD_MSC_MediaReadyEx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     USBD_MSC_CBW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     BulkStage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     USBD_EP0Buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     Block

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     USBD_MSC_BlockCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     usbd_msc_maxpacketsize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     USBD_HighSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     Length

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     Offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     USBD_MSC_BlockSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     USBD_MSC_BlockGroup

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     USBD_MSC_BlockBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     BulkLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     USBD_MSC_BulkBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     Block

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     USBD_MSC_BlockCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x........         DC32     Offset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     Length

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     USBD_MSC_BlockSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x........         DC32     USBD_MSC_BlockGroup

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     USBD_MSC_BlockBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x........         DC32     MemOK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x........         DC32     BulkStage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   0x........         DC32     USBD_MSC_CBW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     BulkLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x........         DC32     USBD_MSC_BulkBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x........         DC32     USBD_MSC_MediaReadyEx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x........         DC32     USBD_MSC_MediaReady

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     usbd_msc_inquiry_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     USBD_MSC_CBW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   0x........         DC32     USBD_MSC_ReadOnly

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   0x........         DC32     BulkLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   0x........         DC32     USBD_MSC_BulkBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   0x........         DC32     USBD_MSC_BlockCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   0x........         DC32     USBD_MSC_BlockSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_4:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_5:
   \   00000000   0x........         DC32     BulkStage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_6:
   \   00000000   0x........         DC32     USBD_MSC_CBW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_7:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x........         DC32     USBD_MSC_BulkBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x........         DC32     USBD_MSC_CBW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x........         DC32     BulkLen

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0x43425355         DC32     0x43425355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   0x........         DC32     BulkStage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_1:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_2:
   \   00000000   0x........         DC32     usbd_msc_ep_bulkin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_3:
   \   00000000   0x........         DC32     MemOK

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_4:
   \   00000000   0x........         DC32     USBD_EndPointStall

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_5:
   \   00000000   0x53425355         DC32     0x53425355

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_6:
   \   00000000   0x........         DC32     USBD_MSC_CBW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_7:
   \   00000000   0x........         DC32     USBD_MSC_CSW

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_8:
   \   00000000   0x........         DC32     USBD_MSC_BulkBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable27_9:
   \   00000000   0x........         DC32     BulkLen
   1018          
   1019          
   1020          #ifdef __RTX                            /* RTX tasks for handling events */
   1021          
   1022          /*
   1023           *  USB Device MSC Bulk In Endpoint Event Handler Task
   1024           *    Parameters:      None
   1025           *    Return Value:    None
   1026           */
   1027          
   1028          __task void USBD_RTX_MSC_EP_BULKIN_Event (void) {
   1029          
   1030            if (__rtx) {
   1031              for (;;) {
   1032                usbd_os_evt_wait_or (0xFFFF, 0xFFFF);
   1033                if (usbd_os_evt_get() & USBD_EVT_IN) {
   1034                  USBD_MSC_EP_BULKIN_Event (0);
   1035                }
   1036              }
   1037            }
   1038          }
   1039          
   1040          
   1041          /*
   1042           *  USB Device MSC Bulk Out Endpoint Event Handler Task
   1043           *    Parameters:      None
   1044           *    Return Value:    None
   1045           */
   1046          
   1047          __task void USBD_RTX_MSC_EP_BULKOUT_Event (void) {
   1048          
   1049            if (__rtx) {
   1050              for (;;) {
   1051                usbd_os_evt_wait_or (0xFFFF, 0xFFFF);
   1052                if (usbd_os_evt_get() & USBD_EVT_OUT) {
   1053                  USBD_MSC_EP_BULKOUT_Event (0);
   1054                }
   1055              }
   1056            }
   1057          }
   1058          
   1059          
   1060          /*
   1061           *  USB Device MSC Bulk In/Out Endpoint Event Handler Task
   1062           *    Parameters:      None
   1063           *    Return Value:    None
   1064           */
   1065          
   1066          __task void USBD_RTX_MSC_EP_BULK_Event (void) {
   1067          
   1068            if (__rtx) {
   1069              for (;;) {
   1070                usbd_os_evt_wait_or (0xFFFF, 0xFFFF);
   1071                USBD_MSC_EP_BULK_Event (usbd_os_evt_get());
   1072              }
   1073            }
   1074          }
   1075          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   USBD_MSC_ATAPassThrough
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_WriteEP
       8   USBD_MSC_BulkIn
         8   -> USBD_MSC_MemoryRead
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
       8   USBD_MSC_BulkOut
         8   -> USBD_MSC_GetCBW
         8   -> USBD_MSC_MemoryVerify
         8   -> USBD_MSC_MemoryWrite
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
       8   USBD_MSC_CheckMedia
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
       8   USBD_MSC_ClrStallEP
         8   -> USBD_WriteEP
       8   USBD_MSC_DataInFormat
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
       8   USBD_MSC_DataInTransfer
         8   -> USBD_WriteEP
       8   USBD_MSC_EP_BULKIN_Event
         8   -> USBD_MSC_BulkIn
       8   USBD_MSC_EP_BULKOUT_Event
         8   -> USBD_MSC_BulkOut
         8   -> USBD_ReadEP
       8   USBD_MSC_EP_BULK_Event
         8   -> USBD_MSC_EP_BULKIN_Event
         8   -> USBD_MSC_EP_BULKOUT_Event
       8   USBD_MSC_GetCBW
         8   -> USBD_MSC_ATAPassThrough
         8   -> USBD_MSC_Inquiry
         8   -> USBD_MSC_MediaRemoval
         8   -> USBD_MSC_MemoryRead
         8   -> USBD_MSC_ModeSense10
         8   -> USBD_MSC_ModeSense6
         8   -> USBD_MSC_RWSetup
         8   -> USBD_MSC_ReadCapacity
         8   -> USBD_MSC_ReadFormatCapacity
         8   -> USBD_MSC_RequestSense
         8   -> USBD_MSC_ServiceActionIn16
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
         8   -> USBD_MSC_StartStopUnit
         8   -> USBD_MSC_SynchronizeCache
         8   -> USBD_MSC_TestUnitReady
       0   USBD_MSC_GetMaxLUN
       8   USBD_MSC_Inquiry
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_MSC_DataInTransfer
       8   USBD_MSC_MediaRemoval
         8   -> USBD_MSC_SetCSW
       8   USBD_MSC_MemoryRead
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
         8   -> USBD_WriteEP
         8   -> usbd_msc_read_sect
         8 __aeabi_uidiv
       8   USBD_MSC_MemoryVerify
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
         8   -> usbd_msc_read_sect
         8 __aeabi_uidiv
       8   USBD_MSC_MemoryWrite
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
         8   -> usbd_msc_write_sect
         8 __aeabi_uidiv
       8   USBD_MSC_ModeSense10
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_MSC_DataInTransfer
       8   USBD_MSC_ModeSense6
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_MSC_DataInTransfer
       8   USBD_MSC_RWSetup
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
       8   USBD_MSC_ReadCapacity
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_MSC_DataInTransfer
       8   USBD_MSC_ReadFormatCapacity
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_MSC_DataInTransfer
       8   USBD_MSC_RequestSense
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_MSC_DataInTransfer
       0   USBD_MSC_Reset
       8   USBD_MSC_ServiceActionIn16
         8   -> USBD_MSC_DataInFormat
         8   -> USBD_WriteEP
       8   USBD_MSC_SetCSW
         8   -> USBD_WriteEP
       8   USBD_MSC_SetStallEP
         8   -> USBD_SetStallEP
       8   USBD_MSC_StartStopUnit
         8   -> USBD_MSC_SetCSW
         8   -> usbd_msc_start_stop
       8   USBD_MSC_SynchronizeCache
         8   -> USBD_MSC_SetCSW
       8   USBD_MSC_TestUnitReady
         8   -> USBD_MSC_CheckMedia
         8   -> USBD_MSC_SetCSW
         8   -> USBD_MSC_SetStallEP
       0   usbd_msc_init
       0   usbd_msc_read_sect
       0   usbd_msc_start_stop
       0   usbd_msc_write_sect


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable13
       4  ??DataTable14
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable18
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable21
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable22_2
       4  ??DataTable22_3
       4  ??DataTable22_4
       4  ??DataTable22_5
       4  ??DataTable22_6
       4  ??DataTable22_7
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
       4  ??DataTable27
       4  ??DataTable27_1
       4  ??DataTable27_2
       4  ??DataTable27_3
       4  ??DataTable27_4
       4  ??DataTable27_5
       4  ??DataTable27_6
       4  ??DataTable27_7
       4  ??DataTable27_8
       4  ??DataTable27_9
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable9
       4  ??DataTable9_1
       4  Block
       4  BulkLen
       1  BulkStage
       4  Length
       4  MemOK
       4  Offset
     102  USBD_MSC_ATAPassThrough
       4  USBD_MSC_BlockBuf
       4  USBD_MSC_BlockCount
       4  USBD_MSC_BlockGroup
       4  USBD_MSC_BlockSize
      74  USBD_MSC_BulkIn
      76  USBD_MSC_BulkOut
      32  USBD_MSC_CBW
      16  USBD_MSC_CSW
      74  USBD_MSC_CheckMedia
      82  USBD_MSC_ClrStallEP
      58  USBD_MSC_DataInFormat
      76  USBD_MSC_DataInTransfer
       8  USBD_MSC_EP_BULKIN_Event
      22  USBD_MSC_EP_BULKOUT_Event
      26  USBD_MSC_EP_BULK_Event
     532  USBD_MSC_GetCBW
      10  USBD_MSC_GetMaxLUN
     112  USBD_MSC_Inquiry
       4  USBD_MSC_MediaReady
       4  USBD_MSC_MediaReadyEx
      30  USBD_MSC_MediaRemoval
     276  USBD_MSC_MemoryRead
       4  USBD_MSC_MemorySize
     294  USBD_MSC_MemoryVerify
     304  USBD_MSC_MemoryWrite
     110  USBD_MSC_ModeSense10
      86  USBD_MSC_ModeSense6
     224  USBD_MSC_RWSetup
     114  USBD_MSC_ReadCapacity
     154  USBD_MSC_ReadFormatCapacity
       4  USBD_MSC_ReadOnly
     234  USBD_MSC_RequestSense
      22  USBD_MSC_Reset
      80  USBD_MSC_ServiceActionIn16
      32  USBD_MSC_SetCSW
      42  USBD_MSC_SetStallEP
      56  USBD_MSC_StartStopUnit
      14  USBD_MSC_SynchronizeCache
      72  USBD_MSC_TestUnitReady
       2  usbd_msc_init
       2  usbd_msc_read_sect
       2  usbd_msc_start_stop
       2  usbd_msc_write_sect

 
   101 bytes in section .bss
 3 680 bytes in section .text
 
 3 680 bytes of CODE memory
   101 bytes of DATA memory

Errors: none
Warnings: 1
