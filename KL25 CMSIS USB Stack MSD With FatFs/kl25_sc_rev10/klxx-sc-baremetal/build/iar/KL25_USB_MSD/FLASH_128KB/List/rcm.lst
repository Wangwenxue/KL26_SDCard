###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        18/Feb/2016  22:52:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\rcm\rcm.c
#    Command line =  
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\rcm\rcm.c" -D IAR -D
#        FREEDOM -D SD_DISK_ENABLE -lCN "D:\My Project\SDCardJicheng\KL25 CMSIS
#        USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -lB "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -o "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\common\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\i2c\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\platforms\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\" -I
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\inc\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack
#        MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\Porting use\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB
#        Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\SPI_SDCard\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\fsl_sd_disk\"
#        -Ol
#    List file    =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\rcm.lst
#    Object file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\rcm.o
#
###############################################################################

D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\rcm\rcm.c
      1          /*
      2           * File:        rcm.c
      3           * Purpose:     Provides routines for the reset controller module
      4           *              
      5           */
      6          
      7          #include "common.h"
      8          #include "rcm.h"
      9          
     10          /* OutSRS routine - checks the value in the SRS registers and sends
     11           * messages to the terminal announcing the status at the start of the 
     12           * code.
     13           */

   \                                 In section .text, align 4, keep-with-next
     14          void outSRS(void){                         //[outSRS]
   \                     outSRS: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     15          
     16            
     17          	if (RCM_SRS1 & RCM_SRS1_SACKERR_MASK)
   \   00000002   0x4857             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0680             LSLS     R0,R0,#+26
   \   00000008   0xD502             BPL      ??outSRS_1
     18          		printf("\n\rStop Mode Acknowledge Error Reset");
   \   0000000A   0x4856             LDR      R0,??outSRS_0+0x4
   \   0000000C   0x.... 0x....      BL       printf
     19          	if (RCM_SRS1 & RCM_SRS1_MDM_AP_MASK)
   \                     ??outSRS_1: (+1)
   \   00000010   0x4853             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0700             LSLS     R0,R0,#+28
   \   00000016   0xD502             BPL      ??outSRS_2
     20          		printf("\n\rMDM-AP Reset");
   \   00000018   0x4853             LDR      R0,??outSRS_0+0x8
   \   0000001A   0x.... 0x....      BL       printf
     21          	if (RCM_SRS1 & RCM_SRS1_SW_MASK)
   \                     ??outSRS_2: (+1)
   \   0000001E   0x4850             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x0740             LSLS     R0,R0,#+29
   \   00000024   0xD502             BPL      ??outSRS_3
     22          		printf("\n\rSoftware Reset");
   \   00000026   0x4851             LDR      R0,??outSRS_0+0xC
   \   00000028   0x.... 0x....      BL       printf
     23          	if (RCM_SRS1 & RCM_SRS1_LOCKUP_MASK)
   \                     ??outSRS_3: (+1)
   \   0000002C   0x484C             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x0780             LSLS     R0,R0,#+30
   \   00000032   0xD502             BPL      ??outSRS_4
     24          		printf("\n\rCore Lockup Event Reset");
   \   00000034   0x484E             LDR      R0,??outSRS_0+0x10
   \   00000036   0x.... 0x....      BL       printf
     25          	
     26          	if (RCM_SRS0 & RCM_SRS0_POR_MASK)
   \                     ??outSRS_4: (+1)
   \   0000003A   0x484E             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x0600             LSLS     R0,R0,#+24
   \   00000040   0xD502             BPL      ??outSRS_5
     27          		printf("\n\rPower-on Reset");
   \   00000042   0x484D             LDR      R0,??outSRS_0+0x18
   \   00000044   0x.... 0x....      BL       printf
     28          	if (RCM_SRS0 & RCM_SRS0_PIN_MASK)
   \                     ??outSRS_5: (+1)
   \   00000048   0x484A             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x0640             LSLS     R0,R0,#+25
   \   0000004E   0xD502             BPL      ??outSRS_6
     29          		printf("\n\rExternal Pin Reset");
   \   00000050   0x484A             LDR      R0,??outSRS_0+0x1C
   \   00000052   0x.... 0x....      BL       printf
     30          	if (RCM_SRS0 & RCM_SRS0_WDOG_MASK)
   \                     ??outSRS_6: (+1)
   \   00000056   0x4847             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x0680             LSLS     R0,R0,#+26
   \   0000005C   0xD502             BPL      ??outSRS_7
     31          		printf("\n\rWatchdog(COP) Reset");
   \   0000005E   0x4848             LDR      R0,??outSRS_0+0x20
   \   00000060   0x.... 0x....      BL       printf
     32          	if (RCM_SRS0 & RCM_SRS0_LOC_MASK)
   \                     ??outSRS_7: (+1)
   \   00000064   0x4843             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0740             LSLS     R0,R0,#+29
   \   0000006A   0xD502             BPL      ??outSRS_8
     33          		printf("\n\rLoss of External Clock Reset");
   \   0000006C   0x4845             LDR      R0,??outSRS_0+0x24
   \   0000006E   0x.... 0x....      BL       printf
     34          	if (RCM_SRS0 & RCM_SRS0_LOL_MASK)
   \                     ??outSRS_8: (+1)
   \   00000072   0x4840             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x0700             LSLS     R0,R0,#+28
   \   00000078   0xD502             BPL      ??outSRS_9
     35          		printf("\n\rLoss of Lock in PLL Reset");
   \   0000007A   0x4843             LDR      R0,??outSRS_0+0x28
   \   0000007C   0x.... 0x....      BL       printf
     36          	if (RCM_SRS0 & RCM_SRS0_LVD_MASK)
   \                     ??outSRS_9: (+1)
   \   00000080   0x483C             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x0780             LSLS     R0,R0,#+30
   \   00000086   0xD502             BPL      ??outSRS_10
     37          		printf("\n\rLow-voltage Detect Reset");
   \   00000088   0x4840             LDR      R0,??outSRS_0+0x2C
   \   0000008A   0x.... 0x....      BL       printf
     38          	if (RCM_SRS0 & RCM_SRS0_WAKEUP_MASK)
   \                     ??outSRS_10: (+1)
   \   0000008E   0x4839             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x07C0             LSLS     R0,R0,#+31
   \   00000094   0xD54D             BPL      ??outSRS_11
     39                  {
     40                    printf("\n\r[outSRS]Wakeup bit set from low power mode ");
   \   00000096   0x483E             LDR      R0,??outSRS_0+0x30
   \   00000098   0x.... 0x....      BL       printf
     41                    if ((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 3)
   \   0000009C   0x483D             LDR      R0,??outSRS_0+0x34  ;; 0x4007e001
   \   0000009E   0x7800             LDRB     R0,[R0, #+0]
   \   000000A0   0xB2C0             UXTB     R0,R0
   \   000000A2   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000A4   0x0F40             LSRS     R0,R0,#+29
   \   000000A6   0x2803             CMP      R0,#+3
   \   000000A8   0xD102             BNE      ??outSRS_12
     42                      printf("LLS exit ") ;
   \   000000AA   0x483B             LDR      R0,??outSRS_0+0x38
   \   000000AC   0x.... 0x....      BL       printf
     43                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 0))
   \                     ??outSRS_12: (+1)
   \   000000B0   0x4838             LDR      R0,??outSRS_0+0x34  ;; 0x4007e001
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0xB2C0             UXTB     R0,R0
   \   000000B6   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000B8   0x0F40             LSRS     R0,R0,#+29
   \   000000BA   0x2804             CMP      R0,#+4
   \   000000BC   0xD106             BNE      ??outSRS_13
   \   000000BE   0x4837             LDR      R0,??outSRS_0+0x3C  ;; 0x4007e002
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0x0740             LSLS     R0,R0,#+29
   \   000000C4   0xD102             BNE      ??outSRS_13
     44                      printf("VLLS0 exit ") ;
   \   000000C6   0x4836             LDR      R0,??outSRS_0+0x40
   \   000000C8   0x.... 0x....      BL       printf
     45                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 1))
   \                     ??outSRS_13: (+1)
   \   000000CC   0x4831             LDR      R0,??outSRS_0+0x34  ;; 0x4007e001
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0xB2C0             UXTB     R0,R0
   \   000000D2   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000D4   0x0F40             LSRS     R0,R0,#+29
   \   000000D6   0x2804             CMP      R0,#+4
   \   000000D8   0xD109             BNE      ??outSRS_14
   \   000000DA   0x4830             LDR      R0,??outSRS_0+0x3C  ;; 0x4007e002
   \   000000DC   0x7800             LDRB     R0,[R0, #+0]
   \   000000DE   0xB2C0             UXTB     R0,R0
   \   000000E0   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000E2   0x0F40             LSRS     R0,R0,#+29
   \   000000E4   0x2801             CMP      R0,#+1
   \   000000E6   0xD102             BNE      ??outSRS_14
     46                      printf("VLLS1 exit ") ;
   \   000000E8   0x482E             LDR      R0,??outSRS_0+0x44
   \   000000EA   0x.... 0x....      BL       printf
     47                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 2))
   \                     ??outSRS_14: (+1)
   \   000000EE   0x4829             LDR      R0,??outSRS_0+0x34  ;; 0x4007e001
   \   000000F0   0x7800             LDRB     R0,[R0, #+0]
   \   000000F2   0xB2C0             UXTB     R0,R0
   \   000000F4   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   000000F6   0x0F40             LSRS     R0,R0,#+29
   \   000000F8   0x2804             CMP      R0,#+4
   \   000000FA   0xD109             BNE      ??outSRS_15
   \   000000FC   0x4827             LDR      R0,??outSRS_0+0x3C  ;; 0x4007e002
   \   000000FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000100   0xB2C0             UXTB     R0,R0
   \   00000102   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000104   0x0F40             LSRS     R0,R0,#+29
   \   00000106   0x2802             CMP      R0,#+2
   \   00000108   0xD102             BNE      ??outSRS_15
     48                      printf("VLLS2 exit") ;
   \   0000010A   0x4827             LDR      R0,??outSRS_0+0x48
   \   0000010C   0x.... 0x....      BL       printf
     49                    if (((SMC_PMCTRL & SMC_PMCTRL_STOPM_MASK)== 4) && ((SMC_STOPCTRL & SMC_STOPCTRL_VLLSM_MASK)== 3))
   \                     ??outSRS_15: (+1)
   \   00000110   0x4820             LDR      R0,??outSRS_0+0x34  ;; 0x4007e001
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0xB2C0             UXTB     R0,R0
   \   00000116   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000118   0x0F40             LSRS     R0,R0,#+29
   \   0000011A   0x2804             CMP      R0,#+4
   \   0000011C   0xD109             BNE      ??outSRS_11
   \   0000011E   0x481F             LDR      R0,??outSRS_0+0x3C  ;; 0x4007e002
   \   00000120   0x7800             LDRB     R0,[R0, #+0]
   \   00000122   0xB2C0             UXTB     R0,R0
   \   00000124   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000126   0x0F40             LSRS     R0,R0,#+29
   \   00000128   0x2803             CMP      R0,#+3
   \   0000012A   0xD102             BNE      ??outSRS_11
     50                      printf("VLLS3 exit ") ; 
   \   0000012C   0x481F             LDR      R0,??outSRS_0+0x4C
   \   0000012E   0x.... 0x....      BL       printf
     51          	}
     52          
     53                  if ((RCM_SRS0 == 0) && (RCM_SRS1 == 0)) 
   \                     ??outSRS_11: (+1)
   \   00000132   0x4810             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000134   0x7800             LDRB     R0,[R0, #+0]
   \   00000136   0xB2C0             UXTB     R0,R0
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD110             BNE      ??outSRS_16
   \   0000013C   0x4808             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   0000013E   0x7800             LDRB     R0,[R0, #+0]
   \   00000140   0xB2C0             UXTB     R0,R0
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD10B             BNE      ??outSRS_16
     54                  {
     55          	       printf("[outSRS]RCM_SRS0 is ZERO   = %#02X \r\n\r", (RCM_SRS0))  ;
   \   00000146   0x480B             LDR      R0,??outSRS_0+0x14  ;; 0x4007f000
   \   00000148   0x7801             LDRB     R1,[R0, #+0]
   \   0000014A   0xB2C9             UXTB     R1,R1
   \   0000014C   0x4818             LDR      R0,??outSRS_0+0x50
   \   0000014E   0x.... 0x....      BL       printf
     56          	       printf("[outSRS]RCM_SRS1 is ZERO   = %#02X \r\n\r", (RCM_SRS1))  ;	 
   \   00000152   0x4803             LDR      R0,??outSRS_0    ;; 0x4007f001
   \   00000154   0x7801             LDRB     R1,[R0, #+0]
   \   00000156   0xB2C9             UXTB     R1,R1
   \   00000158   0x4816             LDR      R0,??outSRS_0+0x54
   \   0000015A   0x.... 0x....      BL       printf
     57                  }
     58            }
   \                     ??outSRS_16: (+1)
   \   0000015E   0xBD01             POP      {R0,PC}          ;; return
   \                     ??outSRS_0:
   \   00000160   0x4007F001         DC32     0x4007f001
   \   00000164   0x........         DC32     ?_0
   \   00000168   0x........         DC32     ?_1
   \   0000016C   0x........         DC32     ?_2
   \   00000170   0x........         DC32     ?_3
   \   00000174   0x4007F000         DC32     0x4007f000
   \   00000178   0x........         DC32     ?_4
   \   0000017C   0x........         DC32     ?_5
   \   00000180   0x........         DC32     ?_6
   \   00000184   0x........         DC32     ?_7
   \   00000188   0x........         DC32     ?_8
   \   0000018C   0x........         DC32     ?_9
   \   00000190   0x........         DC32     ?_10
   \   00000194   0x4007E001         DC32     0x4007e001
   \   00000198   0x........         DC32     ?_11
   \   0000019C   0x4007E002         DC32     0x4007e002
   \   000001A0   0x........         DC32     ?_12
   \   000001A4   0x........         DC32     ?_13
   \   000001A8   0x........         DC32     ?_14
   \   000001AC   0x........         DC32     ?_15
   \   000001B0   0x........         DC32     ?_16
   \   000001B4   0x........         DC32     ?_17

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0A 0x0D          DC8 "\012\015Stop Mode Acknowledge Error Reset"
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x20 0x4D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x41 0x63    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6C 0x65    
   \              0x64 0x67    
   \              0x65 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0A 0x0D          DC8 "\012\015MDM-AP Reset"
   \              0x4D 0x44    
   \              0x4D 0x2D    
   \              0x41 0x50    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0A 0x0D          DC8 "\012\015Software Reset"
   \              0x53 0x6F    
   \              0x66 0x74    
   \              0x77 0x61    
   \              0x72 0x65    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0A 0x0D          DC8 "\012\015Core Lockup Event Reset"
   \              0x43 0x6F    
   \              0x72 0x65    
   \              0x20 0x4C    
   \              0x6F 0x63    
   \              0x6B 0x75    
   \              0x70 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0A 0x0D          DC8 "\012\015Power-on Reset"
   \              0x50 0x6F    
   \              0x77 0x65    
   \              0x72 0x2D    
   \              0x6F 0x6E    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x0A 0x0D          DC8 "\012\015External Pin Reset"
   \              0x45 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x50    
   \              0x69 0x6E    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0x0A 0x0D          DC8 "\012\015Watchdog(COP) Reset"
   \              0x57 0x61    
   \              0x74 0x63    
   \              0x68 0x64    
   \              0x6F 0x67    
   \              0x28 0x43    
   \              0x4F 0x50    
   \              0x29 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0x0A 0x0D          DC8 "\012\015Loss of External Clock Reset"
   \              0x4C 0x6F    
   \              0x73 0x73    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x45 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x43    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x0A 0x0D          DC8 "\012\015Loss of Lock in PLL Reset"
   \              0x4C 0x6F    
   \              0x73 0x73    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x4C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x50 0x4C    
   \              0x4C 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x0A 0x0D          DC8 "\012\015Low-voltage Detect Reset"
   \              0x4C 0x6F    
   \              0x77 0x2D    
   \              0x76 0x6F    
   \              0x6C 0x74    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x44 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0x0A 0x0D          DC8 "\012\015[outSRS]Wakeup bit set from low power mode "
   \              0x5B 0x6F    
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x57 0x61    
   \              0x6B 0x65    
   \              0x75 0x70    
   \              0x20 0x62    
   \              0x69 0x74    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x6C 0x6F    
   \              0x77 0x20    
   \              0x70 0x6F    
   \              0x77 0x65    
   \              0x72 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x20 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0x4C 0x4C          DC8 "LLS exit "
   \              0x53 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x56 0x4C          DC8 "VLLS0 exit "
   \              0x4C 0x53    
   \              0x30 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x56 0x4C          DC8 "VLLS1 exit "
   \              0x4C 0x53    
   \              0x31 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_14:
   \   00000000   0x56 0x4C          DC8 "VLLS2 exit"
   \              0x4C 0x53    
   \              0x32 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \   00000000   0x56 0x4C          DC8 "VLLS3 exit "
   \              0x4C 0x53    
   \              0x33 0x20    
   \              0x65 0x78    
   \              0x69 0x74    
   \              0x20 0x00    

   \                                 In section .rodata, align 4
   \                     ?_16:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]RCM_SRS0 is ZERO   = %#02X \015\012\015"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x52 0x43    
   \              0x4D 0x5F    
   \              0x53 0x52    
   \              0x53 0x30    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x5A 0x45    
   \              0x52 0x4F    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x0D    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \   00000000   0x5B 0x6F          DC8 "[outSRS]RCM_SRS1 is ZERO   = %#02X \015\012\015"
   \              0x75 0x74    
   \              0x53 0x52    
   \              0x53 0x5D    
   \              0x52 0x43    
   \              0x4D 0x5F    
   \              0x53 0x52    
   \              0x53 0x31    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x5A 0x45    
   \              0x52 0x4F    
   \              0x20 0x20    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x23 0x30    
   \              0x32 0x58    
   \              0x20 0x0D    
   \              0x0A 0x0D    
   \              0x00         
   \   00000027   0x00               DC8 0
     59          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   outSRS
         8   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  ?_0
      16  ?_1
      48  ?_10
      12  ?_11
      12  ?_12
      12  ?_13
      12  ?_14
      12  ?_15
      40  ?_16
      40  ?_17
      20  ?_2
      28  ?_3
      20  ?_4
      24  ?_5
      24  ?_6
      32  ?_7
      28  ?_8
      28  ?_9
     440  outSRS

 
 444 bytes in section .rodata
 440 bytes in section .text
 
 440 bytes of CODE  memory
 444 bytes of CONST memory

Errors: none
Warnings: none
