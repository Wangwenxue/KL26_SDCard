###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        18/Feb/2016  22:52:46
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\lptmr\lptmr.c
#    Command line =  
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\lptmr\lptmr.c" -D
#        IAR -D FREEDOM -D SD_DISK_ENABLE -lCN "D:\My
#        Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -lB "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -o "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\common\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\i2c\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\platforms\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\" -I
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\inc\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack
#        MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\Porting use\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB
#        Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\SPI_SDCard\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\fsl_sd_disk\"
#        -Ol
#    List file    =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\lptmr.lst
#    Object file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\lptmr.o
#
###############################################################################

D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\lptmr\lptmr.c
      1          /*
      2           * File:        lptmr.c
      3           * Purpose:     Provide common low power timer functions
      4           *
      5           * Notes:       Right now only function provided is used
      6           *              to generate a delay in ms. This driver
      7           *              could be expanded to include more functions
      8           *              in the future.
      9           *
     10           */
     11          
     12          
     13          #include "common.h"
     14          #include "lptmr.h"
     15          
     16          
     17          extern int re_init_clk;
     18          extern int clock_freq_hz;
     19          
     20          /********************************************************************/
     21          /*
     22           * Initialize the low power time to provide a delay measured in ms.
     23           *
     24           *
     25           * Parameters:
     26           *  count_val   number of ms to delay
     27           *
     28           * Returns:
     29           * None
     30           */

   \                                 In section .text, align 2, keep-with-next
     31          void time_delay_ms(unsigned int count_val)
     32          {
   \                     time_delay_ms: (+1)
   \   00000000   0xB500             PUSH     {LR}
     33            /* Make sure the clock to the LPTMR is enabled */
     34            SIM_SCGC5|=SIM_SCGC5_LPTMR_MASK;
   \   00000002   0x....             LDR      R1,??DataTable2  ;; 0x40048038
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x2201             MOVS     R2,#+1
   \   00000008   0x430A             ORRS     R2,R2,R1
   \   0000000A   0x....             LDR      R1,??DataTable2  ;; 0x40048038
   \   0000000C   0x600A             STR      R2,[R1, #+0]
     35          
     36            /* Reset LPTMR settings */
     37            LPTMR0_CSR=0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x....             LDR      R2,??DataTable2_1  ;; 0x40040000
   \   00000012   0x6011             STR      R1,[R2, #+0]
     38          
     39            /* Set the compare value to the number of ms to delay */
     40            LPTMR0_CMR = count_val;
   \   00000014   0x....             LDR      R1,??DataTable2_2  ;; 0x40040008
   \   00000016   0x6008             STR      R0,[R1, #+0]
     41          
     42            /* Set up LPTMR to use 1kHz LPO with no prescaler as its clock source */
     43            LPTMR0_PSR = LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK;
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0x....             LDR      R1,??DataTable2_3  ;; 0x40040004
   \   0000001C   0x6008             STR      R0,[R1, #+0]
     44          
     45            /* Start the timer */
     46            LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;
   \   0000001E   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2101             MOVS     R1,#+1
   \   00000024   0x4301             ORRS     R1,R1,R0
   \   00000026   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   00000028   0x6001             STR      R1,[R0, #+0]
     47          
     48            /* Wait for counter to reach compare value */
     49            while (!(LPTMR0_CSR & LPTMR_CSR_TCF_MASK));
   \                     ??time_delay_ms_0: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x0600             LSLS     R0,R0,#+24
   \   00000030   0xD5FB             BPL      ??time_delay_ms_0
     50          
     51            /* Disable counter and Clear Timer Compare Flag */
     52            LPTMR0_CSR &= ~LPTMR_CSR_TEN_MASK;
   \   00000032   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x4388             BICS     R0,R0,R1
   \   0000003A   0x....             LDR      R1,??DataTable2_1  ;; 0x40040000
   \   0000003C   0x6008             STR      R0,[R1, #+0]
     53          
     54            return;
   \   0000003E   0xBD00             POP      {PC}             ;; return
     55          }
     56          

   \                                 In section .text, align 2, keep-with-next
     57          void lptmr_isr(void)
     58          {
   \                     lptmr_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     59            
     60            printf("\n****LPT ISR entered*****\r\n");
   \   00000002   0x....             LDR      R0,??DataTable2_4
   \   00000004   0x.... 0x....      BL       printf
     61          
     62            // enable timer
     63            // enable interrupts
     64            // clear the flag
     65            LPTMR0_CSR |=  LPTMR_CSR_TCF_MASK;   // write 1 to TCF to clear the LPT timer compare flag
   \   00000008   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2180             MOVS     R1,#+128
   \   0000000E   0x4301             ORRS     R1,R1,R0
   \   00000010   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   00000012   0x6001             STR      R1,[R0, #+0]
     66            LPTMR0_CSR = ( LPTMR_CSR_TEN_MASK | LPTMR_CSR_TIE_MASK | LPTMR_CSR_TCF_MASK  );
   \   00000014   0x20C1             MOVS     R0,#+193
   \   00000016   0x....             LDR      R1,??DataTable2_1  ;; 0x40040000
   \   00000018   0x6008             STR      R0,[R1, #+0]
     67          
     68          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     69          /*******************************************************************************
     70          *
     71          *   PROCEDURE NAME:
     72          *       lptmr_init -
     73          *
     74          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     75          void lptmr_init(int count, int clock_source)
     76          {
   \                     lptmr_init: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
   \   00000004   0x000C             MOVS     R4,R1
     77              SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;
   \   00000006   0x....             LDR      R0,??DataTable2  ;; 0x40048038
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x4301             ORRS     R1,R1,R0
   \   0000000E   0x....             LDR      R0,??DataTable2  ;; 0x40048038
   \   00000010   0x6001             STR      R1,[R0, #+0]
     78          
     79              LPTMR0_PSR = ( LPTMR_PSR_PRESCALE(0) // 0000 is div 2
     80                           | LPTMR_PSR_PBYP_MASK  // LPO feeds directly to LPT
     81                           | LPTMR_PSR_PCS(clock_source)) ; // use the choice of clock
   \   00000012   0x07A0             LSLS     R0,R4,#+30       ;; ZeroExtS R0,R4,#+30,#+30
   \   00000014   0x0F80             LSRS     R0,R0,#+30
   \   00000016   0x2104             MOVS     R1,#+4
   \   00000018   0x4301             ORRS     R1,R1,R0
   \   0000001A   0x....             LDR      R0,??DataTable2_3  ;; 0x40040004
   \   0000001C   0x6001             STR      R1,[R0, #+0]
     82              if (clock_source== 0)
   \   0000001E   0x2C00             CMP      R4,#+0
   \   00000020   0xD102             BNE      ??lptmr_init_0
     83                printf("\n LPTMR Clock source is the MCGIRCLK \n\r");
   \   00000022   0x....             LDR      R0,??DataTable2_5
   \   00000024   0x.... 0x....      BL       printf
     84              if (clock_source== 1)
   \                     ??lptmr_init_0: (+1)
   \   00000028   0x2C01             CMP      R4,#+1
   \   0000002A   0xD102             BNE      ??lptmr_init_1
     85                printf("\n LPTMR Clock source is the LPOCLK \n\r");
   \   0000002C   0x....             LDR      R0,??DataTable2_6
   \   0000002E   0x.... 0x....      BL       printf
     86              if (clock_source== 2)
   \                     ??lptmr_init_1: (+1)
   \   00000032   0x2C02             CMP      R4,#+2
   \   00000034   0xD102             BNE      ??lptmr_init_2
     87                printf("\n LPTMR Clock source is the ERCLK32 \n\r");
   \   00000036   0x....             LDR      R0,??DataTable2_7
   \   00000038   0x.... 0x....      BL       printf
     88              if (clock_source== 3)
   \                     ??lptmr_init_2: (+1)
   \   0000003C   0x2C03             CMP      R4,#+3
   \   0000003E   0xD102             BNE      ??lptmr_init_3
     89                printf("\n LPTMR Clock source is the OSCERCLK \n\r");
   \   00000040   0x....             LDR      R0,??DataTable2_8
   \   00000042   0x.... 0x....      BL       printf
     90                       
     91              LPTMR0_CMR = LPTMR_CMR_COMPARE(count);  //Set compare value
   \                     ??lptmr_init_3: (+1)
   \   00000046   0xB2A8             UXTH     R0,R5
   \   00000048   0x....             LDR      R1,??DataTable2_2  ;; 0x40040008
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     92          
     93              LPTMR0_CSR =(  LPTMR_CSR_TCF_MASK   // Clear any pending interrupt
     94                           | LPTMR_CSR_TIE_MASK   // LPT interrupt enabled
     95                           | LPTMR_CSR_TPS(0)     //TMR pin select
     96                           |!LPTMR_CSR_TPP_MASK   //TMR Pin polarity
     97                           |!LPTMR_CSR_TFC_MASK   // Timer Free running counter is reset whenever TMR counter equals compare
     98                           |!LPTMR_CSR_TMS_MASK   //LPTMR0 as Timer
     99                          );
   \   0000004C   0x20C0             MOVS     R0,#+192
   \   0000004E   0x....             LDR      R1,??DataTable2_1  ;; 0x40040000
   \   00000050   0x6008             STR      R0,[R1, #+0]
    100              LPTMR0_CSR |= LPTMR_CSR_TEN_MASK;   //Turn on LPT and start counting
   \   00000052   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x4301             ORRS     R1,R1,R0
   \   0000005A   0x....             LDR      R0,??DataTable2_1  ;; 0x40040000
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    101          }
   \   0000005E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40040000         DC32     0x40040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40040008         DC32     0x40040008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40040004         DC32     0x40040004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x0A 0x2A          DC8 "\012****LPT ISR entered*****\015\012"
   \              0x2A 0x2A    
   \              0x2A 0x4C    
   \              0x50 0x54    
   \              0x20 0x49    
   \              0x53 0x52    
   \              0x20 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x65 0x64    
   \              0x2A 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x0A 0x20          DC8 "\012 LPTMR Clock source is the MCGIRCLK \012\015"
   \              0x4C 0x50    
   \              0x54 0x4D    
   \              0x52 0x20    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x4D 0x43    
   \              0x47 0x49    
   \              0x52 0x43    
   \              0x4C 0x4B    
   \              0x20 0x0A    
   \              0x0D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x0A 0x20          DC8 "\012 LPTMR Clock source is the LPOCLK \012\015"
   \              0x4C 0x50    
   \              0x54 0x4D    
   \              0x52 0x20    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x4C 0x50    
   \              0x4F 0x43    
   \              0x4C 0x4B    
   \              0x20 0x0A    
   \              0x0D 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x0A 0x20          DC8 "\012 LPTMR Clock source is the ERCLK32 \012\015"
   \              0x4C 0x50    
   \              0x54 0x4D    
   \              0x52 0x20    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x45 0x52    
   \              0x43 0x4C    
   \              0x4B 0x33    
   \              0x32 0x20    
   \              0x0A 0x0D    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x0A 0x20          DC8 "\012 LPTMR Clock source is the OSCERCLK \012\015"
   \              0x4C 0x50    
   \              0x54 0x4D    
   \              0x52 0x20    
   \              0x43 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x73 0x6F    
   \              0x75 0x72    
   \              0x63 0x65    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x4F 0x53    
   \              0x43 0x45    
   \              0x52 0x43    
   \              0x4C 0x4B    
   \              0x20 0x0A    
   \              0x0D 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   lptmr_init
        16   -> printf
       8   lptmr_isr
         8   -> printf
       4   time_delay_ms


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
      28  ?_0
      40  ?_1
      40  ?_2
      40  ?_3
      40  ?_4
      96  lptmr_init
      28  lptmr_isr
      64  time_delay_ms

 
 188 bytes in section .rodata
 224 bytes in section .text
 
 224 bytes of CODE  memory
 188 bytes of CONST memory

Errors: none
Warnings: none
