###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        18/Feb/2016  22:52:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\uart\uart.c
#    Command line =  
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\uart\uart.c" -D IAR
#        -D FREEDOM -D SD_DISK_ENABLE -lCN "D:\My Project\SDCardJicheng\KL25
#        CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -lB "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\"
#        -o "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\"
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I "D:\My
#        Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\common\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\cpu\headers\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\i2c\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\llwu\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\lptmr\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\mcg\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\pmc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rcm\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\rtc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\smc\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\uart\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\wdog\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\drivers\cmp\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\platforms\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\" -I
#        "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\inc\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack
#        MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\CMSIS
#        USB Stack\Porting use\" -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB
#        Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\SPI_SDCard\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\"
#        -I "D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\..\..\..\src\projects\KL25_USB_MSD\FATFS\fsl_sd_disk\"
#        -Ol
#    List file    =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\List\uart.lst
#    Object file  =  
#        D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With
#        FatFs\kl25_sc_rev10\klxx-sc-baremetal\build\iar\KL25_USB_MSD\FLASH_128KB\Obj\uart.o
#
###############################################################################

D:\My Project\SDCardJicheng\KL25 CMSIS USB Stack MSD With FatFs\kl25_sc_rev10\klxx-sc-baremetal\src\drivers\uart\uart.c
      1          /*
      2           * File:        uart.c
      3           * Purpose:     Provide common uart routines for serial IO
      4           *
      5           * Notes:       
      6           *              
      7           */
      8          
      9          #include "common.h"
     10          #include "uart.h"
     11          #include <stdarg.h>
     12          
     13          /********************************************************************/
     14          /*
     15           * Initialize the uart for 8N1 operation, interrupts disabled, and
     16           * no hardware flow-control
     17           *
     18           * NOTE: Since the uarts are pinned out in multiple locations on most
     19           *       Kinetis devices, this driver does not enable uart pin functions.
     20           *       The desired pins should be enabled before calling this init function.
     21           *
     22           * Parameters:
     23           *  uartch      uart channel to initialize
     24           *  sysclk      uart module Clock in kHz(used to calculate baud)
     25           *  baud        uart baud rate
     26           */

   \                                 In section .text, align 2, keep-with-next
     27          void uart_init (UART_MemMapPtr uartch, int sysclk, int baud)
     28          {
   \                     uart_init: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0008             MOVS     R0,R1
   \   00000006   0x0011             MOVS     R1,R2
     29              register uint16 sbr;
     30              uint8 temp;
     31                                          
     32                   
     33                if (uartch == UART1_BASE_PTR)
   \   00000008   0x....             LDR      R2,??DataTable1  ;; 0x4006b000
   \   0000000A   0x4294             CMP      R4,R2
   \   0000000C   0xD107             BNE      ??uart_init_0
     34                  SIM_SCGC4 |= SIM_SCGC4_UART1_MASK;
   \   0000000E   0x....             LDR      R2,??DataTable1_1  ;; 0x40048034
   \   00000010   0x6812             LDR      R2,[R2, #+0]
   \   00000012   0x2380             MOVS     R3,#+128
   \   00000014   0x011B             LSLS     R3,R3,#+4        ;; #+2048
   \   00000016   0x4313             ORRS     R3,R3,R2
   \   00000018   0x....             LDR      R2,??DataTable1_1  ;; 0x40048034
   \   0000001A   0x6013             STR      R3,[R2, #+0]
   \   0000001C   0xE006             B        ??uart_init_1
     35                else
     36              	SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;
   \                     ??uart_init_0: (+1)
   \   0000001E   0x....             LDR      R2,??DataTable1_1  ;; 0x40048034
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0x2380             MOVS     R3,#+128
   \   00000024   0x015B             LSLS     R3,R3,#+5        ;; #+4096
   \   00000026   0x4313             ORRS     R3,R3,R2
   \   00000028   0x....             LDR      R2,??DataTable1_1  ;; 0x40048034
   \   0000002A   0x6013             STR      R3,[R2, #+0]
     37                /* Make sure that the transmitter and receiver are disabled while we 
     38                 * change settings.
     39                 */
     40                UART_C2_REG(uartch) &= ~(UART_C2_TE_MASK
     41          				| UART_C2_RE_MASK );
   \                     ??uart_init_1: (+1)
   \   0000002C   0x78E2             LDRB     R2,[R4, #+3]
   \   0000002E   0x23F3             MOVS     R3,#+243
   \   00000030   0x4013             ANDS     R3,R3,R2
   \   00000032   0x70E3             STRB     R3,[R4, #+3]
     42          
     43                /* Configure the uart for 8-bit mode, no parity */
     44                UART_C1_REG(uartch) = 0;	/* We need all default settings, so entire register is cleared */
   \   00000034   0x2200             MOVS     R2,#+0
   \   00000036   0x70A2             STRB     R2,[R4, #+2]
     45              
     46                /* Calculate baud settings */
     47                sbr = (uint16)((sysclk*1000)/(baud * 16));
   \   00000038   0x22FA             MOVS     R2,#+250
   \   0000003A   0x0092             LSLS     R2,R2,#+2        ;; #+1000
   \   0000003C   0x4350             MULS     R0,R2,R0
   \   0000003E   0x2210             MOVS     R2,#+16
   \   00000040   0x4351             MULS     R1,R2,R1
   \   00000042   0x.... 0x....      BL       __aeabi_idiv
     48                  
     49                /* Save off the current value of the uartx_BDH except for the SBR field */
     50                temp = UART_BDH_REG(uartch) & ~(UART_BDH_SBR(0x1F));
   \   00000046   0x7822             LDRB     R2,[R4, #+0]
   \   00000048   0x21E0             MOVS     R1,#+224
   \   0000004A   0x4011             ANDS     R1,R1,R2
     51              
     52                UART_BDH_REG(uartch) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
   \   0000004C   0x0002             MOVS     R2,R0
   \   0000004E   0xB292             UXTH     R2,R2
   \   00000050   0x0A12             LSRS     R2,R2,#+8
   \   00000052   0x06D2             LSLS     R2,R2,#+27       ;; ZeroExtS R2,R2,#+27,#+27
   \   00000054   0x0ED2             LSRS     R2,R2,#+27
   \   00000056   0x430A             ORRS     R2,R2,R1
   \   00000058   0x7022             STRB     R2,[R4, #+0]
     53                UART_BDL_REG(uartch) = (uint8)(sbr & UART_BDL_SBR_MASK);
   \   0000005A   0x7060             STRB     R0,[R4, #+1]
     54            
     55                /* Enable receiver and transmitter */
     56                UART_C2_REG(uartch) |= (UART_C2_TE_MASK
     57          	    		  | UART_C2_RE_MASK );
   \   0000005C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000005E   0x210C             MOVS     R1,#+12
   \   00000060   0x4301             ORRS     R1,R1,R0
   \   00000062   0x70E1             STRB     R1,[R4, #+3]
     58              
     59          }
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
     60          /********************************************************************/
     61          /*
     62           * Wait for a character to be received on the specified uart
     63           *
     64           * Parameters:
     65           *  channel      uart channel to read from
     66           *
     67           * Return Values:
     68           *  the received character
     69           */

   \                                 In section .text, align 2, keep-with-next
     70          char uart_getchar (UART_MemMapPtr channel)
     71          {
   \                     uart_getchar: (+1)
   \   00000000   0xB500             PUSH     {LR}
     72                /* Wait until character has been received */
     73                while (!(UART_S1_REG(channel) & UART_S1_RDRF_MASK));
   \                     ??uart_getchar_0: (+1)
   \   00000002   0x7901             LDRB     R1,[R0, #+4]
   \   00000004   0x0689             LSLS     R1,R1,#+26
   \   00000006   0xD5FC             BPL      ??uart_getchar_0
     74              
     75                /* Return the 8-bit data from the receiver */
     76                return UART_D_REG(channel);
   \   00000008   0x79C0             LDRB     R0,[R0, #+7]
   \   0000000A   0xBD00             POP      {PC}             ;; return
     77          }
     78          /********************************************************************/
     79          /*
     80           * Wait for space in the uart Tx FIFO and then send a character
     81           *
     82           * Parameters:
     83           *  channel      uart channel to send to
     84           *  ch			 character to send
     85           */ 

   \                                 In section .text, align 2, keep-with-next
     86          void uart_putchar (UART_MemMapPtr channel, char ch)
     87          {
   \                     uart_putchar: (+1)
   \   00000000   0xB500             PUSH     {LR}
     88                /* Wait until space is available in the FIFO */
     89                while(!(UART_S1_REG(channel) & UART_S1_TDRE_MASK));
   \                     ??uart_putchar_0: (+1)
   \   00000002   0x7902             LDRB     R2,[R0, #+4]
   \   00000004   0x0612             LSLS     R2,R2,#+24
   \   00000006   0xD5FC             BPL      ??uart_putchar_0
     90              
     91                /* Send the character */
     92                UART_D_REG(channel) = (uint8)ch;
   \   00000008   0x71C1             STRB     R1,[R0, #+7]
     93              
     94           }
   \   0000000A   0xBD00             POP      {PC}             ;; return
     95          /********************************************************************/
     96          /*
     97           * Check to see if a character has been received
     98           *
     99           * Parameters:
    100           *  channel      uart channel to check for a character
    101           *
    102           * Return values:
    103           *  0       No character received
    104           *  1       Character has been received
    105           */

   \                                 In section .text, align 2, keep-with-next
    106          int uart_getchar_present (UART_MemMapPtr channel)
    107          {
    108              return (UART_S1_REG(channel) & UART_S1_RDRF_MASK);
   \                     uart_getchar_present: (+1)
   \   00000000   0x7900             LDRB     R0,[R0, #+4]
   \   00000002   0x2120             MOVS     R1,#+32
   \   00000004   0x4008             ANDS     R0,R0,R1
   \   00000006   0x4770             BX       LR               ;; return
    109          }
    110          /********************************************************************/
    111          
    112          /***************************************************************************
    113           * Begin UART0 functions
    114           **************************************************************************/
    115          /********************************************************************/
    116          /*
    117           * Initialize the uart for 8N1 operation, interrupts disabled, and
    118           * no hardware flow-control
    119           *
    120           * NOTE: Since the uarts are pinned out in multiple locations on most
    121           *       Kinetis devices, this driver does not enable uart pin functions.
    122           *       The desired pins should be enabled before calling this init function.
    123           *
    124           * Parameters:
    125           *  uartch      uart channel to initialize
    126           *  sysclk      uart module Clock in kHz(used to calculate baud)
    127           *  baud        uart baud rate
    128           */

   \                                 In section .text, align 2, keep-with-next
    129          void uart0_init (UART0_MemMapPtr uartch, int sysclk, int baud)
    130          {
   \                     uart0_init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    131              uint8 i;
    132              uint32 calculated_baud = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    133              uint32 baud_diff = 0;
   \   00000004   0x2600             MOVS     R6,#+0
    134              uint32 osr_val = 0;
   \   00000006   0x2700             MOVS     R7,#+0
    135              uint32 sbr_val, uart0clk;
    136              uint32 baud_rate;
    137              uint32 reg_temp = 0;
   \   00000008   0x2300             MOVS     R3,#+0
    138              uint32 temp = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
    139              
    140              SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
   \   0000000C   0x....             LDR      R0,??DataTable1_1  ;; 0x40048034
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2380             MOVS     R3,#+128
   \   00000012   0x00DB             LSLS     R3,R3,#+3        ;; #+1024
   \   00000014   0x4303             ORRS     R3,R3,R0
   \   00000016   0x....             LDR      R0,??DataTable1_1  ;; 0x40048034
   \   00000018   0x6003             STR      R3,[R0, #+0]
    141              
    142              // Disable UART0 before changing registers
    143              UART0_C2 &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
   \   0000001A   0x....             LDR      R0,??DataTable1_2  ;; 0x4006a003
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x23F3             MOVS     R3,#+243
   \   00000020   0x4003             ANDS     R3,R3,R0
   \   00000022   0x....             LDR      R0,??DataTable1_2  ;; 0x4006a003
   \   00000024   0x7003             STRB     R3,[R0, #+0]
    144            
    145              // Verify that a valid clock value has been passed to the function 
    146              if ((sysclk > 50000) || (sysclk < 32))
   \   00000026   0x0008             MOVS     R0,R1
   \   00000028   0x3820             SUBS     R0,R0,#+32
   \   0000002A   0x....             LDR      R3,??DataTable1_3  ;; 0xc331
   \   0000002C   0x4298             CMP      R0,R3
   \   0000002E   0xD308             BCC      ??uart0_init_0
    147              {
    148                  sysclk = 0;
   \   00000030   0x2100             MOVS     R1,#+0
    149                  reg_temp = SIM_SOPT2;
   \   00000032   0x....             LDR      R0,??DataTable1_4  ;; 0x40048004
   \   00000034   0x6803             LDR      R3,[R0, #+0]
    150                  reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
   \   00000036   0x0018             MOVS     R0,R3
   \   00000038   0x....             LDR      R3,??DataTable1_5  ;; 0xf3ffffff
   \   0000003A   0x4003             ANDS     R3,R3,R0
    151                  reg_temp |= SIM_SOPT2_UART0SRC(0);
    152                  SIM_SOPT2 = reg_temp;
   \   0000003C   0x....             LDR      R0,??DataTable1_4  ;; 0x40048004
   \   0000003E   0x6003             STR      R3,[R0, #+0]
    153          			
    154          			  // Enter inifinite loop because the 
    155          			  // the desired system clock value is 
    156          			  // invalid!!
    157          			  while(1)
   \                     ??uart0_init_1: (+1)
   \   00000040   0xE7FE             B        ??uart0_init_1
    158          				{}
    159              }
    160              
    161              // Verify that a valid value has been passed to TERM_PORT_NUM and update
    162              // uart0_clk_hz accordingly.  Write 0 to TERM_PORT_NUM if an invalid 
    163              // value has been passed.  
    164              if (TERM_PORT_NUM != 0)
    165              {
    166                  reg_temp = SIM_SOPT2;
    167                  reg_temp &= ~SIM_SOPT2_UART0SRC_MASK;
    168                  reg_temp |= SIM_SOPT2_UART0SRC(0);
    169                  SIM_SOPT2 = reg_temp;
    170          			
    171          			  // Enter inifinite loop because the 
    172          			  // the desired terminal port number 
    173          			  // invalid!!
    174          			  while(1)
    175          				{}
    176              }
    177              
    178              
    179              
    180              // Initialize baud rate
    181              baud_rate = baud;
   \                     ??uart0_init_0: (+1)
   \   00000042   0x0014             MOVS     R4,R2
    182              
    183              // Change units to Hz
    184              uart0clk = sysclk * 1000;
   \   00000044   0x20FA             MOVS     R0,#+250
   \   00000046   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000048   0x4341             MULS     R1,R0,R1
   \   0000004A   0x9100             STR      R1,[SP, #+0]
    185              // Calculate the first baud rate using the lowest OSR value possible.  
    186              i = 4;
   \   0000004C   0x2504             MOVS     R5,#+4
    187              sbr_val = (uint32)(uart0clk/(baud_rate * i));
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x0021             MOVS     R1,R4
   \   00000052   0xB2ED             UXTB     R5,R5
   \   00000054   0x4369             MULS     R1,R5,R1
   \   00000056   0x.... 0x....      BL       __aeabi_uidiv
   \   0000005A   0x0001             MOVS     R1,R0
    188              calculated_baud = (uart0clk / (i * sbr_val));
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0xB2ED             UXTB     R5,R5
   \   00000060   0x4369             MULS     R1,R5,R1
   \   00000062   0x.... 0x....      BL       __aeabi_uidiv
    189                  
    190              if (calculated_baud > baud_rate)
   \   00000066   0x4284             CMP      R4,R0
   \   00000068   0xD201             BCS      ??uart0_init_2
    191                  baud_diff = calculated_baud - baud_rate;
   \   0000006A   0x1B06             SUBS     R6,R0,R4
   \   0000006C   0xE000             B        ??uart0_init_3
    192              else
    193                  baud_diff = baud_rate - calculated_baud;
   \                     ??uart0_init_2: (+1)
   \   0000006E   0x1A26             SUBS     R6,R4,R0
    194              
    195              osr_val = i;
   \                     ??uart0_init_3: (+1)
   \   00000070   0xB2ED             UXTB     R5,R5
   \   00000072   0x002F             MOVS     R7,R5
    196                  
    197              // Select the best OSR value
    198              for (i = 5; i <= 32; i++)
   \   00000074   0x2505             MOVS     R5,#+5
   \   00000076   0xE006             B        ??uart0_init_4
    199              {
    200                  sbr_val = (uint32)(uart0clk/(baud_rate * i));
    201                  calculated_baud = (uart0clk / (i * sbr_val));
    202                  
    203                  if (calculated_baud > baud_rate)
    204                      temp = calculated_baud - baud_rate;
    205                  else
    206                      temp = baud_rate - calculated_baud;
   \                     ??uart0_init_5: (+1)
   \   00000078   0x1A20             SUBS     R0,R4,R0
    207                  
    208                  if (temp <= baud_diff)
   \                     ??uart0_init_6: (+1)
   \   0000007A   0x4286             CMP      R6,R0
   \   0000007C   0xD302             BCC      ??uart0_init_7
    209                  {
    210                      baud_diff = temp;
   \   0000007E   0x0006             MOVS     R6,R0
    211                      osr_val = i; 
   \   00000080   0xB2ED             UXTB     R5,R5
   \   00000082   0x002F             MOVS     R7,R5
    212                  }
   \                     ??uart0_init_7: (+1)
   \   00000084   0x1C6D             ADDS     R5,R5,#+1
   \                     ??uart0_init_4: (+1)
   \   00000086   0xB2ED             UXTB     R5,R5
   \   00000088   0x2D21             CMP      R5,#+33
   \   0000008A   0xDA0F             BGE      ??uart0_init_8
   \   0000008C   0x9800             LDR      R0,[SP, #+0]
   \   0000008E   0x0021             MOVS     R1,R4
   \   00000090   0xB2ED             UXTB     R5,R5
   \   00000092   0x4369             MULS     R1,R5,R1
   \   00000094   0x.... 0x....      BL       __aeabi_uidiv
   \   00000098   0x0001             MOVS     R1,R0
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0xB2ED             UXTB     R5,R5
   \   0000009E   0x4369             MULS     R1,R5,R1
   \   000000A0   0x.... 0x....      BL       __aeabi_uidiv
   \   000000A4   0x4284             CMP      R4,R0
   \   000000A6   0xD2E7             BCS      ??uart0_init_5
   \   000000A8   0x1B00             SUBS     R0,R0,R4
   \   000000AA   0xE7E6             B        ??uart0_init_6
    213              }
    214              
    215              if (baud_diff < ((baud_rate / 100) * 3))
   \                     ??uart0_init_8: (+1)
   \   000000AC   0x0020             MOVS     R0,R4
   \   000000AE   0x2164             MOVS     R1,#+100
   \   000000B0   0x.... 0x....      BL       __aeabi_uidiv
   \   000000B4   0x2103             MOVS     R1,#+3
   \   000000B6   0x4348             MULS     R0,R1,R0
   \   000000B8   0x4286             CMP      R6,R0
   \   000000BA   0xD235             BCS      ??uart0_init_9
    216              {
    217                  // If the OSR is between 4x and 8x then both
    218                  // edge sampling MUST be turned on.  
    219                  if ((osr_val >3) && (osr_val < 9))
   \   000000BC   0x0038             MOVS     R0,R7
   \   000000BE   0x1F00             SUBS     R0,R0,#+4
   \   000000C0   0x2805             CMP      R0,#+5
   \   000000C2   0xD205             BCS      ??uart0_init_10
    220                      UART0_C5|= UART0_C5_BOTHEDGE_MASK;
   \   000000C4   0x....             LDR      R0,??DataTable1_6  ;; 0x4006a00b
   \   000000C6   0x7800             LDRB     R0,[R0, #+0]
   \   000000C8   0x2102             MOVS     R1,#+2
   \   000000CA   0x4301             ORRS     R1,R1,R0
   \   000000CC   0x....             LDR      R0,??DataTable1_6  ;; 0x4006a00b
   \   000000CE   0x7001             STRB     R1,[R0, #+0]
    221                  
    222                  // Setup OSR value 
    223                  reg_temp = UART0_C4;
   \                     ??uart0_init_10: (+1)
   \   000000D0   0x....             LDR      R0,??DataTable1_7  ;; 0x4006a00a
   \   000000D2   0x7803             LDRB     R3,[R0, #+0]
   \   000000D4   0xB2DB             UXTB     R3,R3
    224                  reg_temp &= ~UART0_C4_OSR_MASK;
   \   000000D6   0x201F             MOVS     R0,#+31
   \   000000D8   0x4383             BICS     R3,R3,R0
    225                  reg_temp |= UART0_C4_OSR(osr_val-1);
   \   000000DA   0x0019             MOVS     R1,R3
   \   000000DC   0x1E78             SUBS     R0,R7,#+1
   \   000000DE   0xB2C0             UXTB     R0,R0
   \   000000E0   0x06C3             LSLS     R3,R0,#+27       ;; ZeroExtS R3,R0,#+27,#+27
   \   000000E2   0x0EDB             LSRS     R3,R3,#+27
   \   000000E4   0x430B             ORRS     R3,R3,R1
    226              
    227                  // Write reg_temp to C4 register
    228                  UART0_C4 = reg_temp;
   \   000000E6   0x0018             MOVS     R0,R3
   \   000000E8   0x....             LDR      R1,??DataTable1_7  ;; 0x4006a00a
   \   000000EA   0x7008             STRB     R0,[R1, #+0]
    229                  
    230                  reg_temp = (reg_temp & UART0_C4_OSR_MASK) + 1;
   \   000000EC   0x06DB             LSLS     R3,R3,#+27       ;; ZeroExtS R3,R3,#+27,#+27
   \   000000EE   0x0EDB             LSRS     R3,R3,#+27
   \   000000F0   0x1C5B             ADDS     R3,R3,#+1
    231                  sbr_val = (uint32)((uart0clk)/(baud_rate * (reg_temp)));
   \   000000F2   0x9800             LDR      R0,[SP, #+0]
   \   000000F4   0x435C             MULS     R4,R3,R4
   \   000000F6   0x0021             MOVS     R1,R4
   \   000000F8   0x.... 0x....      BL       __aeabi_uidiv
   \   000000FC   0x0001             MOVS     R1,R0
    232                  
    233                   /* Save off the current value of the uartx_BDH except for the SBR field */
    234                  reg_temp = UART0_BDH & ~(UART0_BDH_SBR(0x1F));
   \   000000FE   0x....             LDR      R0,??DataTable1_8  ;; 0x4006a000
   \   00000100   0x7803             LDRB     R3,[R0, #+0]
   \   00000102   0xB2DB             UXTB     R3,R3
   \   00000104   0x201F             MOVS     R0,#+31
   \   00000106   0x4383             BICS     R3,R3,R0
    235             
    236                  UART0_BDH = reg_temp |  UART0_BDH_SBR(((sbr_val & 0x1F00) >> 8));
   \   00000108   0x0008             MOVS     R0,R1
   \   0000010A   0x0A00             LSRS     R0,R0,#+8
   \   0000010C   0x06C0             LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   0000010E   0x0EC0             LSRS     R0,R0,#+27
   \   00000110   0x4318             ORRS     R0,R0,R3
   \   00000112   0x....             LDR      R2,??DataTable1_8  ;; 0x4006a000
   \   00000114   0x7010             STRB     R0,[R2, #+0]
    237                  UART0_BDL = (uint8)(sbr_val & UART0_BDL_SBR_MASK);
   \   00000116   0x....             LDR      R0,??DataTable1_9  ;; 0x4006a001
   \   00000118   0x7001             STRB     R1,[R0, #+0]
    238                  
    239                  /* Enable receiver and transmitter */
    240                  UART0_C2 |= (UART0_C2_TE_MASK
    241                              | UART0_C2_RE_MASK );
   \   0000011A   0x....             LDR      R0,??DataTable1_2  ;; 0x4006a003
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0x210C             MOVS     R1,#+12
   \   00000120   0x4301             ORRS     R1,R1,R0
   \   00000122   0x....             LDR      R0,??DataTable1_2  ;; 0x4006a003
   \   00000124   0x7001             STRB     R1,[R0, #+0]
    242              }
    243              else
    244          		{
    245                  // Unacceptable baud rate difference
    246                  // More than 3% difference!!
    247                  // Enter infinite loop!
    248                  while(1)
    249          				{}
    250          		}					
    251              
    252          }
   \   00000126   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   \                     ??uart0_init_9: (+1)
   \   00000128   0xE7FE             B        ??uart0_init_9
    253          /********************************************************************/
    254          /*
    255           * Wait for a character to be received on the specified uart
    256           *
    257           * Parameters:
    258           *  channel      uart channel to read from
    259           *
    260           * Return Values:
    261           *  the received character
    262           */

   \                                 In section .text, align 2, keep-with-next
    263          char uart0_getchar (UART0_MemMapPtr channel)
    264          {
   \                     uart0_getchar: (+1)
   \   00000000   0xB500             PUSH     {LR}
    265                /* Wait until character has been received */
    266                while (!(UART0_S1_REG(channel) & UART0_S1_RDRF_MASK));
   \                     ??uart0_getchar_0: (+1)
   \   00000002   0x7901             LDRB     R1,[R0, #+4]
   \   00000004   0x0689             LSLS     R1,R1,#+26
   \   00000006   0xD5FC             BPL      ??uart0_getchar_0
    267              
    268                /* Return the 8-bit data from the receiver */
    269                return UART0_D_REG(channel);
   \   00000008   0x79C0             LDRB     R0,[R0, #+7]
   \   0000000A   0xBD00             POP      {PC}             ;; return
    270          }
    271          /********************************************************************/
    272          /*
    273           * Wait for space in the uart Tx FIFO and then send a character
    274           *
    275           * Parameters:
    276           *  channel      uart channel to send to
    277           *  ch			 character to send
    278           */ 

   \                                 In section .text, align 2, keep-with-next
    279          void uart0_putchar (UART0_MemMapPtr channel, char ch)
    280          {
   \                     uart0_putchar: (+1)
   \   00000000   0xB500             PUSH     {LR}
    281                /* Wait until space is available in the FIFO */
    282                while(!(UART0_S1_REG(channel) & UART0_S1_TDRE_MASK));
   \                     ??uart0_putchar_0: (+1)
   \   00000002   0x7902             LDRB     R2,[R0, #+4]
   \   00000004   0x0612             LSLS     R2,R2,#+24
   \   00000006   0xD5FC             BPL      ??uart0_putchar_0
    283              
    284                /* Send the character */
    285                UART0_D_REG(channel) = (uint8)ch;
   \   00000008   0x71C1             STRB     R1,[R0, #+7]
    286              
    287           }
   \   0000000A   0xBD00             POP      {PC}             ;; return
    288          /********************************************************************/
    289          /*
    290           * Check to see if a character has been received
    291           *
    292           * Parameters:
    293           *  channel      uart channel to check for a character
    294           *
    295           * Return values:
    296           *  0       No character received
    297           *  1       Character has been received
    298           */

   \                                 In section .text, align 2, keep-with-next
    299          int uart0_getchar_present (UART0_MemMapPtr channel)
    300          {
    301              return (UART0_S1_REG(channel) & UART0_S1_RDRF_MASK);
   \                     uart0_getchar_present: (+1)
   \   00000000   0x7900             LDRB     R0,[R0, #+4]
   \   00000002   0x2120             MOVS     R1,#+32
   \   00000004   0x4008             ANDS     R0,R0,R1
   \   00000006   0x4770             BX       LR               ;; return
    302          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x0000C331         DC32     0xc331

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x40048004         DC32     0x40048004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0xF3FFFFFF         DC32     0xf3ffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x4006A00B         DC32     0x4006a00b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x4006A00A         DC32     0x4006a00a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x4006A000         DC32     0x4006a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x4006A001         DC32     0x4006a001
    303          /********************************************************************/
    304          
    305          #if (defined(CW))
    306          /*
    307          ** ===================================================================
    308          **     Method      :  CsIO1___read_console (component ConsoleIO)
    309          **
    310          **     Description :
    311          **         __read_console
    312          **         This method is internal. It is used by Processor Expert only.
    313          ** ===================================================================
    314          */
    315          int __read_console(__file_handle handle, unsigned char* buffer, size_t * count)
    316          {
    317            size_t CharCnt = 0x00;
    318          
    319            (void)handle;                        /* Parameter is not used, suppress unused argument warning */
    320            if (TERM_PORT_NUM == 0)
    321          	  *buffer = (unsigned char)uart0_getchar(UART0_BASE_PTR);
    322            else if (TERM_PORT_NUM == 1)
    323          	  *buffer = (unsigned char)uart_getchar(UART1_BASE_PTR);
    324            else
    325          	  *buffer = (unsigned char)uart_getchar(UART2_BASE_PTR);
    326            CharCnt = 1;                         /* Increase char counter */
    327            
    328            *count = CharCnt;
    329            return (__no_io_error);
    330          }
    331          
    332          /*
    333          ** ===================================================================
    334          **     Method      :  CsIO1___write_console (component ConsoleIO)
    335          **
    336          **     Description :
    337          **         __write_console
    338          **         This method is internal. It is used by Processor Expert only.
    339          ** ===================================================================
    340          */
    341          int __write_console(__file_handle handle, unsigned char* buffer, size_t* count)
    342          {
    343            size_t CharCnt = 0x00;
    344          
    345            (void)handle;                        /* Parameter is not used, suppress unused argument warning */
    346            for (;*count > 0x00; --*count) {
    347              /* Wait until UART is ready for saving a next character into the transmit buffer */
    348              out_char((unsigned char)*buffer);
    349              buffer++;                          /* Increase buffer pointer */
    350              CharCnt++;                         /* Increase char counter */
    351            }
    352            *count = CharCnt;
    353            return(__no_io_error);
    354          }
    355          
    356          /*
    357          ** ===================================================================
    358          **     Method      :  CsIO1___close_console (component ConsoleIO)
    359          **
    360          **     Description :
    361          **         __close_console
    362          **         This method is internal. It is used by Processor Expert only.
    363          ** ===================================================================
    364          */
    365          int __close_console(__file_handle handle)
    366          {
    367            (void)handle;                        /* Parameter is not used, suppress unused argument warning */
    368            return(__no_io_error);
    369          }
    370          
    371          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   uart0_getchar
       0   uart0_getchar_present
      24   uart0_init
        24 __aeabi_uidiv
       4   uart0_putchar
       4   uart_getchar
       0   uart_getchar_present
       8   uart_init
         8 __aeabi_idiv
       4   uart_putchar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      12  uart0_getchar
       8  uart0_getchar_present
     298  uart0_init
      12  uart0_putchar
      12  uart_getchar
       8  uart_getchar_present
     102  uart_init
      12  uart_putchar

 
 504 bytes in section .text
 
 504 bytes of CODE memory

Errors: none
Warnings: none
